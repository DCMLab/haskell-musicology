-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Create Vega-Lite visualizations (version 4) in Haskell.
--   
--   This is based on the elm-vegalite package
--   (<a>http://package.elm-lang.org/packages/gicentre/elm-vegalite/latest</a>)
--   by Jo Wood of the giCentre at the City University of London.
@package hvega
@version 0.11.0.0


-- | This is a port of the <a>Elm Vega Lite module</a>, written by Jo Wood
--   of the giCentre at the City University of London. It was originally
--   based on version <tt>2.2.1</tt> but it has been updated to match later
--   versions. This module allows users to create a Vega-Lite
--   specification, targeting <b>version 4</b> of the <a>JSON schema</a>.
--   Version 0.11 of <tt>hvega</tt> supports version 4.15 of the Vega-Lite
--   specification.
--   
--   Although this is based on the Elm module, there are differences, such
--   as using type constructors rather than functions for many properties -
--   such as <tt><a>PName</a> "HorsePower"</tt> rather than <tt>pName
--   "HorsePower"</tt> - and the return value of <a>toVegaLite</a>. The
--   intention is to keep close to the Elm module, but it is more a guide
--   than an absolute requirement!
--   
--   Please see <a>Graphics.Vega.Tutorials.VegaLite</a> for an introduction
--   to using <tt>hvega</tt> to create visualizations. The
--   <a>ihaskell-hvega</a> package provides an easy way to embed Vega-Lite
--   visualizations in an IHaskell notebook (using <a>Vega-Embed</a>).
--   
--   <h2>Examples</h2>
--   
--   Note that this module exports several symbols that are exported by the
--   Prelude, such as <a>filter</a>, <a>lookup</a>, and <a>repeat</a>; to
--   avoid name clashes it's therefore advised to either import the module
--   qualified, for example:
--   
--   <pre>
--   import qualified Graphics.Vega.VegaLite as VL
--   </pre>
--   
--   or to hide the clashing names explicitly:
--   
--   <pre>
--   import Prelude hiding (filter, lookup, repeat)
--   </pre>
--   
--   In the following examples, we'll assume the latter.
--   
--   <h3>Example: viewing columns from a file</h3>
--   
--   The <a>Vega-Lite example gallery</a> contain a number of
--   visualizations of the "cars.json" dataset (and many other datasets
--   ;-), which has a number of columns to display, such as "Horsepower",
--   "Miles_per_Gallon", and "Origin". The following code will create a
--   visualization that plots the efficiency of the cars (the "mpg") as a
--   function of its Horsepower, and color-code by the origin of the car:
--   
--   <pre>
--   let cars =  <a>dataFromUrl</a> "https://vega.github.io/vega-datasets/data/cars.json" []
--   
--       enc = <a>encoding</a>
--               . <a>position</a> <a>X</a> [ <a>PName</a> "Horsepower", <a>PmType</a> <a>Quantitative</a> ]
--               . <a>position</a> <a>Y</a> [ <a>PName</a> "Miles_per_Gallon", <a>PmType</a> <a>Quantitative</a>, <a>PTitle</a> "Miles per Gallon" ]
--               . <a>color</a> [ <a>MName</a> "Origin" ]
--   
--       bkg = <a>background</a> "rgba(0, 0, 0, 0.05)"
--   
--   in <a>toVegaLite</a> [ bkg, cars, <a>mark</a> <a>Circle</a> [<a>MTooltip</a> <a>TTEncoding</a>], enc [] ]
--   </pre>
--   
--   When viewed with a Vega-Lite viewer (normally some form of a browser),
--   you can view the result. For instance:
--   
--   <ul>
--   <li>the <a>fromVL</a> function will create the JSON representation of
--   the visualization, which can then be passed to a Vega-Lite
--   viewer;</li>
--   <li>a routine like <a>toHtmlFile</a> can be used to create a HTML file
--   that will display the visualization using the <a>Vega-Embed</a>
--   Javascript library;</li>
--   <li>users of the <tt>Jupyter notebook</tt> environment can make use of
--   the automatic display of the <a>VegaLite</a> type, using
--   <tt>ihaskell-hvega</tt>, to view an in-browser version of the plot
--   (generated via Vega-Embed);</li>
--   <li>and users of <tt>Jupyter lab</tt> can use the <tt>vlShow</tt>
--   method (from <tt>ihaskell-hvega</tt>), but be aware that it is
--   currently limited to only supporing features from Vega-Lite version
--   2.</li>
--   </ul>
--   
--   The visualization can be viewed in the Vega Editor, which lets you
--   interact with the plot and modify its contents, as shown for <a>this
--   example</a>.
--   
--   It can also be viewed as a PNG version:
--   
--   
--   <h3>Example: faceting, data transformation, and interaction</h3>
--   
--   The following example is rather lengthy, as it includes data
--   tranformation (sub-setting the data and creating a new column),
--   automatic faceting (that is, creating separate plots for unique values
--   of a data column), interactive elements (the ability to filter a plot
--   by selecting a subset in another element), and some basic
--   configuration and styling (primarily to change the text sizes). The
--   <a>Graphics.Vega.Tutorials.VegaLite</a> tutorial should be reviewed to
--   understand how the plot works!
--   
--   It's aim is to show the recent community measurements of the
--   brightness of <a>the star Betelgeuse</a>, which caused much interest
--   in the Astronomical world at the start of 2020 as it became much
--   fainter than normal (although it is massive enough to go supernova, it
--   is not expected to happen for quite a while yet). The data shown is
--   based on data collated by the <a>AAVSO</a>, and converted to JSON
--   format, with the primary columns of interest being "<tt>jd</tt>" (the
--   date of the observation, in the <a>Julian day</a> system),
--   "<tt>magnitude</tt>" (the brightness of the star, reported as an
--   <a>apparent magnitude</a>), and "<tt>filterName"</tt> (the filter
--   through which the measurement was made). For display purposes we are
--   only going to use the "<tt>Vis.</tt>" and "<tt>V</tt>" filters (the
--   former is a by-eye estimate, which is less accurate but has the
--   advantage of having been used for a long time, and the second is
--   measured from a in image taken by a <a>CCD detector</a>, which is more
--   accurate and repeatable, but more costly to obtain), and the date
--   field is going to be converted into the number of days since the start
--   of 2020 (via a little bit of subtraction). For "historical reasons",
--   the magnitude system used by Astronomers to measure how bright a
--   system is reversed, so that larger magnitudes mean fainter systems.
--   For this reason, the magnitude axis is reversed in this visualization,
--   so that as Betelgeuse dims the values drop.
--   
--   <pre>
--   {-# LANGUAGE OverloadedStrings #-}
--   
--   betelgeuse =
--     let desc = "How has Betelgeuse's brightness varied, based on data collated by AAVSO (https://www.aavso.org/). " ++
--                "You should also look at https://twitter.com/betelbot and https://github.com/hippke/betelbot. " ++
--                "It was all the rage on social media at the start of 2020."
--   
--         titleStr = "Betelegeuse's magnitude measurements, collated by AAVSO"
--   
--         -- height and width of individual plots (in pixels)
--         w = <a>width</a> 600
--         h = <a>height</a> 150
--   
--         -- Define the properties used for the "position" channels. For this example
--         -- it makes sense to define as functions since they are used several times.
--         --
--         pos1Opts fld ttl = [<a>PName</a> fld, <a>PmType</a> <a>Quantitative</a>, <a>PTitle</a> ttl]
--         x1Opts = pos1Opts "days" "Days since January 1, 2020"
--         y1Opts = pos1Opts "magnitude" "Magnitude" ++ [<a>PSort</a> [<a>Descending</a>], y1Range]
--         y1Range = <a>PScale</a> [<a>SDomain</a> (<a>DNumbers</a> [-1, 3])]
--   
--         -- The filter name is used as a facet, but also to define the
--         -- color and shape of the points.
--         --
--         filtOpts = [<a>MName</a> "filterName"]
--         filtEnc = <a>color</a> (<a>MLegend</a> [<a>LTitle</a> "Filter", <a>LTitleFontSize</a> 16, <a>LLabelFontSize</a> 14] : filtOpts)
--                   . <a>shape</a> filtOpts
--   
--         -- In an attempt to make the V filter results visible, I have chosen
--         -- to use open symbols. It doesn't really work out well.
--         --
--         circle = <a>mark</a> <a>Point</a> [<a>MOpacity</a> 0.5, <a>MFilled</a> False]
--   
--         -- What is plotted in the "overview" plot?
--         --
--         encOverview = <a>encoding</a>
--                       . <a>position</a> <a>X</a> x1Opts
--                       . <a>position</a> <a>Y</a> y1Opts
--                       . filtEnc
--   
--         -- Select roughly the last year's observations (roughly the length of
--         -- time that Betelgeuse is visible)
--         --
--         xlim = (<a>Number</a> (-220), <a>Number</a> 100)
--         ylim = (<a>Number</a> (-0.5), <a>Number</a> 2.5)
--         overview = <a>asSpec</a> [ w
--                           , h
--                           , encOverview []
--                           , <a>selection</a>
--                             . <a>select</a> selName <a>Interval</a> [<a>Encodings</a> [<a>ChX</a>, <a>ChY</a>]
--                                                       , <a>SInitInterval</a> (Just xlim) (Just ylim)
--                                                       ]
--                             $ []
--                           , circle
--                           ]
--   
--         -- What is plotted in the "detail" plot?
--         --
--         selName = "brush"
--         pos2Opts fld = [ <a>PName</a> fld, <a>PmType</a> <a>Quantitative</a>, <a>PNoTitle</a>
--                        , <a>PScale</a> [<a>SDomainOpt</a> (<a>DSelectionField</a> selName fld)] ]
--         x2Opts = pos2Opts "days"
--         y2Opts = pos2Opts "magnitude" ++ [<a>PSort</a> [<a>Descending</a>]]
--   
--         encDetail = <a>encoding</a>
--                     . <a>position</a> <a>X</a> x2Opts
--                     . <a>position</a> <a>Y</a> y2Opts
--                     . filtEnc
--   
--         detail = <a>asSpec</a> [ w
--                         , h
--                         , encDetail []
--                         , circle
--                         ]
--   
--         -- Control the labelling of the faceted plots. Here we move the
--         -- label so that it appears at the top-right corner of each plot
--         -- and remove the title.
--         --
--         headerOpts = [ <a>HLabelFontSize</a> 16
--                      , <a>HLabelAlign</a> <a>AlignRight</a>
--                      , <a>HLabelAnchor</a> <a>AEnd</a>
--                      , <a>HLabelPadding</a> (-24)
--                      , <a>HNoTitle</a>
--                      , <a>HLabelExpr</a> "'Filter: ' + datum.label"
--                      ]
--   
--         -- The "detail" plot has multiple rows, one for each filter.
--         --
--         details = <a>asSpec</a> [ <a>columns</a> 1
--                          , <a>facetFlow</a> [ <a>FName</a> "filterName"
--                                      , <a>FHeader</a> headerOpts
--                                      ]
--                          , <a>spacing</a> 10
--                          , <a>specification</a> detail
--                          ]
--   
--     in <a>toVegaLite</a> [ <a>description</a> desc
--                   , <a>title</a> titleStr [<a>TFontSize</a> 18]
--                   , <a>dataFromUrl</a> "https://raw.githubusercontent.com/DougBurke/hvega/master/hvega/data/betelgeuse-2020-03-19.json" []
--                   , <a>transform</a>
--                     -- concentrate on the two filters with a reasonable number of points
--                     . <a>filter</a> (<a>FExpr</a> "datum.filterName[0] === 'V'")
--                     -- remove some "outliers"
--                     . <a>filter</a> (<a>FExpr</a> "datum.magnitude &lt; 4")
--                     -- subtract Jan 1 2020 (start of day, hence the .0 rather than .5)
--                     . <a>calculateAs</a> "datum.jd - 2458849.0" "days"
--                     $ []
--                   , <a>vConcat</a> [overview, details]
--                   , <a>configure</a>
--                     -- Change axis titles from bold- to normal-weight,
--                     -- and increase the size of the labels
--                     . <a>configuration</a> (<a>Axis</a> [<a>TitleFontWeight</a> <a>Normal</a>, <a>TitleFontSize</a> 16, <a>LabelFontSize</a> 14])
--                     $ []
--                   ]
--   </pre>
--   
--   The PNG version shows the basic features:
--   
--   
--   However this is missing the interactive elements of the visualization,
--   primarily selection and zooming in the top plot changes the axis
--   ranges of the bottom two plots. This interactivity requires a
--   Vega-Lite viewer such as <a>the Vega Editor</a>.
module Graphics.Vega.VegaLite

-- | Convert a list of Vega-Lite specifications into a single JSON object
--   that may be passed to Vega-Lite for graphics generation. Commonly
--   these will include at least a data, mark, and encoding specification.
--   
--   While simple properties like <a>mark</a> may be provided directly, it
--   is usually clearer to label more complex ones such as encodings as
--   separate expressions. This becomes increasingly helpful for
--   visualizations that involve composition of layers, repeats and facets.
--   
--   Specifications can be built up by chaining a series of functions (such
--   as <a>dataColumn</a> or <a>position</a> in the example below).
--   Functional composition using the <a>.</a> operator allows this to be
--   done compactly.
--   
--   <pre>
--   let dat = <a>dataFromColumns</a> []
--             . <a>dataColumn</a> "a" (<a>Strings</a> [ "C", "C", "D", "D", "E", "E" ])
--             . <a>dataColumn</a> "b" (<a>Numbers</a> [ 2, 7, 1, 2, 6, 8 ])
--   
--       enc = <a>encoding</a>
--             . <a>position</a> <a>X</a> [ <a>PName</a> "a", <a>PmType</a> <a>Nominal</a> ]
--             . <a>position</a> <a>Y</a> [ <a>PName</a> "b", <a>PmType</a> <a>Quantitative</a>, <a>PAggregate</a> <a>Mean</a> ]
--   
--   in <a>toVegaLite</a> [ dat [], <a>mark</a> <a>Bar</a> [], enc [] ]
--   </pre>
--   
--   The schema used is <a>version 4 of Vega-Lite</a>, and please <a>report
--   an issue</a> if you find a problem with the output of <tt>hvega</tt>.
--   Use <a>toVegaLiteSchema</a> if you need to create a Vega-Lite
--   specification which uses a different version of the schema.
toVegaLite :: [PropertySpec] -> VegaLite

-- | A version of <a>toVegaLite</a> that allows you to change the Vega-Lite
--   schema version of the visualization.
--   
--   <pre>
--   <a>toVegaLiteSchema</a> <a>vlSchema3</a> props
--   </pre>
--   
--   Note that the schema is <b>only used</b> to fill in the
--   <tt>"$schema"</tt> field of the JSON structure. It <b>does not</b>
--   change the JSON encoding of the visualization.
toVegaLiteSchema :: Text -> [PropertySpec] -> VegaLite

-- | The latest version 2 Vega-Lite schema (equivalent to
--   <tt><a>vlSchema</a> 2 Nothing Nothing Nothing</tt>).
vlSchema2 :: Text

-- | The latest version 3 Vega-Lite schema (equivalent to
--   <tt><a>vlSchema</a> 3 Nothing Nothing Nothing</tt>).
vlSchema3 :: Text

-- | The latest version 4 Vega-Lite schema (equivalent to
--   <tt><a>vlSchema</a> 4 Nothing Nothing Nothing</tt>).
vlSchema4 :: Text

-- | Create the Vega-Lite schema for an arbitrary version. See
--   <a>https://github.com/vega/schema</a> for more information on naming
--   and availability.
--   
--   There is no validation of the input values.
--   
--   Alpha and Beta releases can be specified by setting the last argument;
--   for instance to get the "beta.0" version of version 4 you would use
--   
--   <pre>
--   vlSchema 4 (Just 0) (Just 0) (Just "-beta.0")
--   </pre>
--   
--   whereas
--   
--   <pre>
--   vlSchema 4 Nothing Nothing Nothing
--   </pre>
--   
--   refers to the latest release of version 4.
vlSchema :: Natural -> Maybe Natural -> Maybe Natural -> Maybe Text -> Text

-- | Obtain the Vega-Lite JSON (i.e. specification) for passing to a
--   Vega-Lite visualizer.
--   
--   <pre>
--   let vlSpec = fromVL vl
--   Data.ByteString.Lazy.Char8.putStrLn (Data.Aeson.Encode.Pretty.encodePretty vlSpec)
--   </pre>
--   
--   Note that there is <b>no</b> validation done to ensure that the output
--   matches the Vega Lite schema. That is, it is possible to create an
--   invalid visualization with this module (e.g. missing a data source or
--   referring to an undefined field).
fromVL :: VegaLite -> Value

-- | Top-level Vega-Lite properties. These are the ones that define the
--   core of the visualization grammar. All properties are created by
--   functions which can be arranged into seven broad groups:
--   
--   <ul>
--   <li><i>Data Properties</i> These relate to the input data to be
--   visualized. Generated by <a>dataFromColumns</a>, <a>dataFromRows</a>,
--   <a>dataFromUrl</a>, <a>dataFromSource</a>, <a>dataFromJson</a>,
--   <a>dataSequence</a>, <a>sphere</a>, and <a>graticule</a>.</li>
--   <li><i>Transform Properties</i> These indicate that some
--   transformation of input data should be applied before encoding them
--   visually. Generated by <a>transform</a> and <a>projection</a> they can
--   include data transformations such as <a>filter</a>, <a>binAs</a> and
--   <a>calculateAs</a> and geo transformations of longitude, latitude
--   coordinates used by marks such as <a>Geoshape</a>, <a>Point</a>, and
--   <a>Line</a>.</li>
--   <li><i>Mark Properties</i> These relate to the symbols used to
--   visualize data items. They are generated by <a>mark</a>, and include
--   types such as <a>Circle</a>, <a>Bar</a>, and <a>Line</a>.</li>
--   <li><i>Encoding Properties</i> These specify which data elements are
--   mapped to which mark characteristics (known as <i>channels</i>).
--   Generated by <a>encoding</a>, they include encodings such as
--   <a>position</a>, <a>color</a>, <a>size</a>, <a>shape</a>, <a>text</a>,
--   <a>hyperlink</a>, and <a>order</a>.</li>
--   <li><i>Composition Properties</i> These allow visualization views to
--   be combined to form more complex visualizations. Generated by
--   <a>layer</a>, <a>repeat</a>, <a>repeatFlow</a>, <a>facet</a>,
--   <a>facetFlow</a>, <a>vlConcat</a>, <a>columns</a>, <a>hConcat</a>,
--   <a>vConcat</a>, <a>asSpec</a>, and <a>resolve</a>.</li>
--   <li><i>Interaction Properties</i> These allow interactions such as
--   clicking, dragging and others generated via a GUI or data stream to
--   influence the visualization. Generated by <a>selection</a>.</li>
--   <li><i>Supplementary and Configuration Properties</i> These provide a
--   means to add metadata and styling to one or more visualizations.
--   Generated by <a>name</a>, <a>title</a>, <a>description</a>,
--   <a>background</a>, <a>height</a>, <a>heightStep</a>, <a>width</a>,
--   <a>widthStep</a>, <a>padding</a>, <a>autosize</a>,
--   <a>viewBackground</a>, and <a>configure</a>.</li>
--   </ul>
--   
--   Prior to <tt>0.4.0.0</tt> this was an opaque data type, as the
--   constructors were not exported. It is suggested that you do not import
--   the constructors to <tt>VLProperty</tt> unless you need to transform
--   the Vega-Lite code in some manner (e.g. because <tt>hvega</tt> is
--   missing needed functionality or is buggy).
--   
--   Note that there is only a very-limited attempt to enforce the
--   Vega-Lite Schema (e.g. to ensure the required components are
--   provided).
data VLProperty

-- | See <a>align</a>.
VLAlign :: VLProperty

-- | See <a>autosize</a>.
VLAutosize :: VLProperty

-- | See <a>background</a>.
VLBackground :: VLProperty

-- | See <a>bounds</a>.
VLBounds :: VLProperty

-- | See <a>center</a> and <a>centerRC</a>.
VLCenter :: VLProperty

-- | See <a>columns</a>.
VLColumns :: VLProperty

-- | See <a>vlConcat</a>.
VLConcat :: VLProperty

-- | See <a>configure</a>.
VLConfig :: VLProperty

-- | See <a>dataFromColumns</a>, <a>dataFromJson</a>, <a>dataFromRows</a>,
--   <a>dataFromSource</a>, <a>dataFromUrl</a>, <a>dataName</a>,
--   <a>dataSequence</a>, <a>dataSequenceAs</a>, <a>graticule</a>,
--   <a>noData</a>, and <a>sphere</a>.
VLData :: VLProperty

-- | See <a>datasets</a>.
VLDatasets :: VLProperty

-- | See <a>description</a>.
VLDescription :: VLProperty

-- | See <a>encoding</a>.
VLEncoding :: VLProperty

-- | See <a>facet</a> and <a>facetFlow</a>.
VLFacet :: VLProperty

-- | See <a>hConcat</a>.
VLHConcat :: VLProperty

-- | See <a>height</a> and <a>heightStep</a>.
VLHeight :: VLProperty

-- | See <a>layer</a>.
VLLayer :: VLProperty

-- | See <a>mark</a>.
VLMark :: VLProperty

-- | See <a>name</a>.
VLName :: VLProperty

-- | See <a>padding</a>.
VLPadding :: VLProperty

-- | See <a>projection</a>.
VLProjection :: VLProperty

-- | See <a>repeat</a> and <a>repeatFlow</a>.
VLRepeat :: VLProperty

-- | See <a>resolve</a>.
VLResolve :: VLProperty

-- | See <a>selection</a>.
VLSelection :: VLProperty

-- | See <a>alignRC</a>, <a>spacing</a>, and <a>spacingRC</a>.
VLSpacing :: VLProperty

-- | See <a>specification</a>.
VLSpecification :: VLProperty

-- | See <a>title</a>.
VLTitle :: VLProperty

-- | See <a>transform</a>.
VLTransform :: VLProperty

-- | see <a>usermetadata</a>.
VLUserMetadata :: VLProperty

-- | See <a>vConcat</a>.
VLVConcat :: VLProperty

-- | See <a>viewBackground</a>.
VLViewBackground :: VLProperty

-- | See <a>width</a> and <a>widthStep</a>.
VLWidth :: VLProperty

-- | The Vega-Lite specification is represented as JSON.
type VLSpec = Value

-- | A Vega Lite visualization, created by <a>toVegaLite</a>. The contents
--   can be extracted with <a>fromVL</a>.
data VegaLite

-- | A convenience type-annotation label. It is the same as <a>Data</a>.
type PropertySpec = (VLProperty, VLSpec)

-- | Represents a named Vega-Lite specification, usually generated by a
--   function in this module. You shouldn't need to create
--   <tt>LabelledSpec</tt> tuples directly, but they can be useful for type
--   annotations.
type LabelledSpec = (Text, VLSpec)

-- | Represent an encoding (input to <a>encoding</a>).
--   
--   It is expected that routines like <a>position</a> and <a>color</a> are
--   used to create values with this type, but they can also be constructed
--   and deconstructed manually with <a>toEncodingSpec</a> and
--   <a>fromEncodingSpec</a>.
data EncodingSpec

-- | This function is provided in case there is any need to inject JSON
--   into the Vega-Lite document that <tt>hvega</tt> does not support (due
--   to changes in the Vega-Lite specification or missing functionality in
--   this module). If you find yourself needing to use this then please
--   <a>report an issue</a>.
--   
--   See also <a>fromEncodingSpec</a>.
toEncodingSpec :: Text -> VLSpec -> EncodingSpec

-- | Extract the contents of an encoding specification. This may be needed
--   when the Vega-Lite specification adds or modifies settings for a
--   particular encoding, and <tt>hvega</tt> has not been updated to
--   reflect this change. If you find yourself needing to use this then
--   please <a>report an issue</a>.
--   
--   See also <a>toEncodingSpec</a>.
fromEncodingSpec :: EncodingSpec -> (Text, VLSpec)

-- | Represent a transformation (input to <a>transform</a>).
--   
--   It is expected that routines like <a>calculateAs</a> and <a>filter</a>
--   are used to create values with this type, but they can also be
--   constructed and deconstructed manually with <a>toTransformSpec</a> and
--   <a>fromTransformSpec</a>.
data TransformSpec

-- | This function is provided in case there is any need to inject JSON
--   into the Vega-Lite document that <tt>hvega</tt> does not support (due
--   to changes in the Vega-Lite specification or missing functionality in
--   this module). If you find yourself needing to use this then please
--   <a>report an issue</a>.
--   
--   See also <a>fromTransformSpec</a>.
toTransformSpec :: VLSpec -> TransformSpec

-- | Extract the contents of a transformation specification. This may be
--   needed when the Vega-Lite specification adds or modifies settings for
--   a particular encoding, and <tt>hvega</tt> has not been updated to
--   reflect this change. If you find yourself needing to use this then
--   please <a>report an issue</a>.
--   
--   See also <a>toTransformSpec</a>.
fromTransformSpec :: TransformSpec -> VLSpec

-- | Represent a set of resolution properties (input to <a>resolve</a>).
--   
--   It is expected that <a>resolution</a> is used to create values with
--   this type, but they can also be constructed and deconstructed manually
--   with <a>toResolveSpec</a> and <a>fromResolveSpec</a>.
data ResolveSpec

-- | This function is provided in case there is any need to inject JSON
--   into the Vega-Lite document that <tt>hvega</tt> does not support (due
--   to changes in the Vega-Lite specification or missing functionality in
--   this module). If you find yourself needing to use this then please
--   <a>report an issue</a>.
--   
--   See also <a>fromResolveSpec</a>.
toResolveSpec :: Text -> VLSpec -> ResolveSpec

-- | Extract the contents of an resolve specification. This may be needed
--   when the Vega-Lite specification adds or modifies settings for a
--   particular resolve, and <tt>hvega</tt> has not been updated to reflect
--   this change. If you find yourself needing to use this then please
--   <a>report an issue</a>.
--   
--   See also <a>toResolveSpec</a>.
fromResolveSpec :: ResolveSpec -> (Text, VLSpec)

-- | Represent a set of resolution properties (input to <a>selection</a>).
--   
--   It is expected that <a>select</a> is used to create values with this
--   type, but they can also be constructed and deconstructed manually with
--   <a>toSelectSpec</a> and <a>fromSelectSpec</a>.
data SelectSpec

-- | This function is provided in case there is any need to inject JSON
--   into the Vega-Lite document that <tt>hvega</tt> does not support (due
--   to changes in the Vega-Lite specification or missing functionality in
--   this module). If you find yourself needing to use this then please
--   <a>report an issue</a>.
--   
--   See also <a>fromSelectSpec</a>.
toSelectSpec :: SelectionLabel -> VLSpec -> SelectSpec

-- | Extract the contents of a select specification. This may be needed
--   when the Vega-Lite specification adds or modifies settings for a
--   particular select, and <tt>hvega</tt> has not been updated to reflect
--   this change. If you find yourself needing to use this then please
--   <a>report an issue</a>.
--   
--   See also <a>toSelectSpec</a>.
fromSelectSpec :: SelectSpec -> (SelectionLabel, VLSpec)

-- | Represent a set of configuration properties (input to
--   <a>configuration</a>).
--   
--   It is expected that <a>configuration</a> is used to create values with
--   this type, but they can also be constructed and deconstructed manually
--   with <a>toConfigureSpec</a> and <a>fromConfigureSpec</a>.
data ConfigureSpec

-- | This function is provided in case there is any need to inject JSON
--   into the Vega-Lite document that <tt>hvega</tt> does not support (due
--   to changes in the Vega-Lite specification or missing functionality in
--   this module). If you find yourself needing to use this then please
--   <a>report an issue</a>.
--   
--   See also <a>fromConfigureSpec</a>.
toConfigureSpec :: Text -> VLSpec -> ConfigureSpec

-- | Extract the contents of a configuration specification. This may be
--   needed when the Vega-Lite specification adds or modifies settings for
--   a particular configure, and <tt>hvega</tt> has not been updated to
--   reflect this change. If you find yourself needing to use this then
--   please <a>report an issue</a>.
--   
--   See also <a>toConfigureSpec</a>.
fromConfigureSpec :: ConfigureSpec -> (Text, VLSpec)

-- | Represent the functions that can be chained together and sent to
--   <a>encoding</a>.
type BuildEncodingSpecs = [EncodingSpec] -> [EncodingSpec]

-- | Represent the functions that can be chained together and sent to
--   <a>transform</a>.
type BuildTransformSpecs = [TransformSpec] -> [TransformSpec]

-- | Represent the functions that can be chained together and sent to
--   <a>resolve</a>.
type BuildResolveSpecs = [ResolveSpec] -> [ResolveSpec]

-- | Represent the functions that can be chained together and sent to
--   <a>selection</a>.
type BuildSelectSpecs = [SelectSpec] -> [SelectSpec]

-- | Represent the functions that can be chained together and sent to
--   <a>configure</a>.
type BuildConfigureSpecs = [ConfigureSpec] -> [ConfigureSpec]

-- | Convenience type-annotation label to indicate an angle, which is
--   measured in degrees from the horizontal (so anti-clockwise).
--   
--   The value should be in the range 0 to 360, inclusive, but <b>no
--   attempt</b> is made to enforce this.
type Angle = Double

-- | Convenience type-annotation label to indicate a color value. There is
--   <b>no attempt</b> to validate that the user-supplied input is a valid
--   color.
--   
--   Any supported HTML color specification can be used, such as:
--   
--   <pre>
--   "#eee"
--   "#734FD8"
--   "crimson"
--   "rgb(255,204,210)"
--   "hsl(180, 50%, 50%)"
--   </pre>
--   
--   A blank string is converted to the JSON null value (new in
--   <tt>0.5.0.0</tt>).
type Color = Text

-- | The dash style for a line. This is defined as a series of on and then
--   off lengths, in pixels. So <tt>[10, 4, 5, 2]</tt> means a long line,
--   followed by a space, then a line half as long as the first segment,
--   and then a short space. This pattern is then repeated.
--   
--   This is a convenience type annotation and there is <b>no
--   validation</b> of the input.
type DashStyle = [Double]

-- | The offset at which to start drawing the line dash (given by a
--   <a>DashStyle</a> argument), in pixels.
--   
--   This is a convenience type annotation and there is <b>no
--   validation</b> of the input.
type DashOffset = Double

-- | The field name. This can include "dotted" notation, such as
--   <tt>"o.latitude"</tt>.
--   
--   There is <b>no attempt</b> to validate this value (e.g. check it is
--   not empty, contains only valid characters, or remove excess
--   whitespace).
type FieldName = Text

-- | Convenience type-annotation to label a normalized coordinate for color
--   gradients. The value should be in the range 0 to 1, inclusive. There
--   is <b>no attempt</b> to validate that the number lies within this
--   range.
type GradientCoord = Double

-- | Convenience type-annotation label to indicate the color interpolation
--   points - i.e. the colors to use at points along the normalized range 0
--   to 1 (inclusive).
--   
--   The list does not have to be sorted. There is no check that the color
--   is valid (i.e. not empty or a valid color specification).
type GradientStops = [(GradientCoord, Color)]

-- | Convenience type-annotation label to indicate an opacity value, which
--   lies in the range 0 to 1 inclusive. There is <b>no attempt</b> to
--   validate that the user-supplied value falls in this range.
--   
--   A value of 0 indicates fully transparent (see through), and 1 is fully
--   opaque (does not show anything it is on top of).
type Opacity = Double

-- | Convenience type-annotation label to indicate the name, or label, of a
--   selection. It is expected to be a non-empty string, but there is <b>no
--   attempt</b> to validate this.
type SelectionLabel = Text

-- | Convenience type-annotation to indicate a name, or label, that
--   represents a set of mark or axis styles. The styles are generated with
--   <a>AxisNamedStyles</a> and <a>MarkNamedStyles</a>, and used with
--   constructs such as <a>AStyle</a>, <a>AxStyle</a>, <a>MStyle</a>, and
--   <a>TStyle</a>.
type StyleLabel = Text

-- | Convenience type-annotation label to indicate a <a>Vega
--   Expression</a>. There is <b>no attempt</b> to validate the expression.
--   
--   Examples include:
--   
--   <pre>
--   "datum.IMDB_Rating != null"
--   "datum.height / 1000"
--   "if(datum.index % 2 == 1, datum.label, '')"
--   "sampleLogNormal(2.3, 0.3)"
--   </pre>
type VegaExpr = Text

-- | At what "depth" (z index) is the item to be drawn (a relative depth
--   for items in the visualization). The standard values are <tt>0</tt>
--   for back and <tt>1</tt> for front, but other values can be used if you
--   want to ensure a certain layering of items.
--   
--   The following example is taken from a discussion with <a>Jo Wood</a>:
--   
--   <pre>
--   let dcols = <a>dataFromColumns</a> []
--                 . <a>dataColumn</a> "x" (<a>Numbers</a> [ 20, 10 ])
--                 . <a>dataColumn</a> "y" (<a>Numbers</a> [ 10, 20 ])
--                 . <a>dataColumn</a> "cat" (<a>Strings</a> [ "a", "b" ])
--   
--       axis lbl z = [ <a>PName</a> lbl, <a>PmType</a> <a>Quantitative</a>, <a>PAxis</a> [ <a>AxZIndex</a> z ] ]
--       enc = <a>encoding</a>
--               . <a>position</a> <a>X</a> (axis "x" 2)
--               . <a>position</a> <a>Y</a> (axis "y" 1)
--               . <a>color</a> [ <a>MName</a> "cat", <a>MmType</a> <a>Nominal</a>, <a>MLegend</a> [] ]
--   
--       cfg = <a>configure</a>
--               . <a>configuration</a> (<a>Axis</a> [ <a>GridWidth</a> 8 ])
--               . <a>configuration</a> (<a>AxisX</a> [ <a>GridColor</a> "red" ])
--               . <a>configuration</a> (<a>AxisY</a> [ <a>GridColor</a> "blue" ])
--   
--   in <a>toVegaLite</a> [ cfg []
--                 , dcols []
--                 , enc []
--                 , <a>mark</a> <a>Circle</a> [ <a>MSize</a> 5000, <a>MOpacity</a> 1 ]
--                 ]
--   </pre>
--   
--   
--   <a>View the visualization in the Vega Editor</a>
type ZIndex = Natural

-- | Converts VegaLite to html Text. Uses Vega-Embed with the default
--   options. See <a>toHtmlWith</a> for more control.
toHtml :: VegaLite -> Text

-- | Converts VegaLite to an html file. Uses Vega-Embed with the default
--   options. See <a>toHtmlFileWith</a> for more control.
toHtmlFile :: FilePath -> VegaLite -> IO ()

-- | Converts VegaLite to html Text. Uses Vega-Embed and is for when some
--   control is needed over the output: <a>toHtml</a> is a simpler form
--   which just uses the default Vega-Embed options.
--   
--   The render you use to view the output file must support Javascript,
--   since it is needed to create the visualization from the Vega-Lite
--   specification. The Vega and Vega-Lite Javascript versions are pegged
--   to 5 and 4, but no limit is applied to the Vega-Embed library.
toHtmlWith :: Maybe Value -> VegaLite -> Text

-- | Converts VegaLite to an html file. Uses Vega-Embed and is for when
--   some control is needed over the output: <a>toHtmlFile</a> is a simpler
--   form which just uses the default Vega-Embed options.
toHtmlFileWith :: Maybe Value -> FilePath -> VegaLite -> IO ()

-- | Declare data source from a url. The url can be a local path on a web
--   server or an external http(s) url. Used to create a data ( property,
--   specification ) pair. An optional list of field formatting
--   instructions can be provided as the second parameter or an empty list
--   to use the default formatting. See the <a>Vega-Lite documentation</a>
--   for details.
--   
--   <pre>
--   <a>dataFromUrl</a> "data/weather.csv" [ <a>Parse</a> [ ( "date", <a>FoDate</a> "%Y-%m-%d %H:%M" ) ] ]
--   </pre>
dataFromUrl :: Text -> [Format] -> Data

-- | Declare a data source from a list of column values. Each column has a
--   specific type (e.g. <a>Number</a> or <a>String</a>), but different
--   columns can have different types.
--   
--   Note that the columns are truncated to match the length of the
--   shortest column.
--   
--   <pre>
--   <a>dataFromColumns</a> [ <a>Parse</a> [ ( "Year", <a>FoDate</a> "%Y" ) ] ]
--     . <a>dataColumn</a> "Animal" (<a>Strings</a> [ "Fish", "Dog", "Cat" ])
--     . <a>dataColumn</a> "Age" (<a>Numbers</a> [ 28, 12, 6 ])
--     . <a>dataColumn</a> "Year" (<a>Strings</a> [ "2010", "2014", "2015" ])
--   </pre>
dataFromColumns :: [Format] -> [DataColumn] -> Data

-- | Declare a data source from a provided list of row values. Each row
--   contains a list of tuples where the first value is a string
--   representing the column name, and the second the column value for that
--   row. Each column can have a value of a different type but <b>you must
--   ensure</b> that when subsequent rows are added, they match the types
--   of previous values with shared column names.
--   
--   Note though that generally if you are creating data inline (as opposed
--   to reading from a file), adding data by column is more efficient and
--   less error-prone.
--   
--   <pre>
--   dataFromRows [ <a>Parse</a> [ ( "Year", <a>FoDate</a> "%Y" ) ] ]
--     . <a>dataRow</a> [ ( "Animal", <a>Str</a> "Fish" ), ( "Age", <a>Number</a> 28 ), ( "Year", <a>Str</a> "2010" ) ]
--     . <a>dataRow</a> [ ( "Animal", <a>Str</a> "Dog" ), ( "Age", <a>Number</a> 12 ), ( "Year", <a>Str</a> "2014" ) ]
--     . <a>dataRow</a> [ ( "Animal", <a>Str</a> "Cat" ), ( "Age", <a>Number</a> 6 ), ( "Year", <a>Str</a> "2015" ) ]
--   </pre>
dataFromRows :: [Format] -> [DataRow] -> Data

-- | Declare a data source from a provided json specification. The most
--   likely use-case for specifying json inline is when creating
--   <a>geojson</a> objects, when <a>geometry</a>,
--   <a>geometryCollection</a>, and <a>geoFeatureCollection</a> functions
--   may be used. For more general cases of json creation, consider
--   <a>encode</a>.
--   
--   <pre>
--   let geojson =
--           <a>geometry</a> (<a>GeoPolygon</a> [ [ ( -3, 59 ), ( 4, 59 ), ( 4, 52 ), ( -3, 59 ) ] ]) []
--   in <a>toVegaLite</a>
--       [ <a>width</a> 200
--       , <a>height</a> 200
--       , <a>dataFromJson</a> geojson []
--       , <a>projection</a> [ <a>PrType</a> <a>Orthographic</a> ]
--       , <a>mark</a> <a>Geoshape</a> []
--       ]
--   </pre>
dataFromJson :: VLSpec -> [Format] -> Data

-- | Declare data from a named source. The source may be from named
--   <a>datasets</a> within a specification or a named data source created
--   via the <a>Vega View API</a>. An optional list of field formatting
--   instructions can be provided as the second parameter or an empty list
--   to use the default formatting. See the <a>Vega-Lite documentation</a>
--   for details.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>datasets</a> [ ( "myData", dvals [] ),  ( "myJson", <a>dataFromJson</a> json [] ) ]
--       , <a>dataFromSource</a> "myData" []
--       , <a>mark</a> <a>Bar</a> []
--       , ...
--       ]
--   </pre>
dataFromSource :: Text -> [Format] -> Data

-- | Name to give a data source. Useful when a specification needs to
--   reference a data source, such as one generated via an API call.
--   
--   <pre>
--   dvals = <a>dataName</a> "myName" (<a>dataFromUrl</a> "myData.json" [])
--   </pre>
dataName :: Text -> Data -> Data

-- | Create a dataset comprising a collection of named <a>Data</a> items.
--   Each data item can be created with normal data generating functions
--   such as <a>dataFromRows</a> or <a>dataFromJson</a>. These can be later
--   referred to using <a>dataFromSource</a>.
--   
--   <pre>
--   let toJS = Data.Aeson.toJSON
--       obj = Data.Aeson.object
--   
--       dvals = <a>dataFromRows</a> []
--               . <a>dataRow</a> [ ( "cat", <a>Str</a> "a" ), ( "val", <a>Number</a> 10 ) ]
--               . <a>dataRow</a> [ ( "cat", <a>Str</a> "b" ), ( "val", <a>Number</a> 18 ) ]
--       json = toJS
--               [ obj [ ( "cat", toJS "a" ), ( "val", toJS 120 ) ]
--               , obj [ ( "cat", toJS "b" ), ( "val", toJS 180 ) ]
--               ]
--   
--       enc = ...
--   
--   in <a>toVegaLite</a>
--       [ <a>datasets</a> [ ( "myData", dvals [] ),  ( "myJson", <a>dataFromJson</a> json [] ) ]
--       , <a>dataFromSource</a> "myData" []
--       , <a>mark</a> <a>Bar</a> []
--       , enc []
--       ]
--   </pre>
datasets :: [(Text, Data)] -> Data

-- | Create a column of data. A column has a name and a list of values. The
--   final parameter is the list of any other columns to which this is
--   added.
--   
--   This is expected to be used with <a>dataFromColumns</a>.
--   
--   <pre>
--   <a>dataColumn</a> "Animal" (<a>Strings</a> [ "Cat", "Dog", "Mouse"]) []
--   </pre>
dataColumn :: FieldName -> DataValues -> [DataColumn] -> [DataColumn]

-- | Create a row of data. A row comprises a list of (columnName, value)
--   pairs. The final parameter is the list of any other rows to which this
--   is added.
--   
--   This is expected to be used with <a>dataFromRows</a>.
--   
--   <pre>
--   <a>dataRow</a> [("Animal", <a>Str</a> "Fish"), ("Age", <a>Number</a> 28), ("Year", <a>Str</a> "2010")] []
--   </pre>
dataRow :: [(FieldName, DataValue)] -> [DataRow] -> [DataRow]

-- | This is for composed specifications, and it tells the visualization to
--   ignore the data from the parent.
noData :: Data

-- | Convenience type-annotation label for use with data generation
--   functions.
--   
--   <pre>
--   myRegion : [<a>DataColumn</a>] -&gt; <a>Data</a>
--   myRegion =
--       <a>dataFromColumns</a> []
--           . <a>dataColumn</a> "easting" (<a>Numbers</a> [ -3, 4, 4, -3, -3 ])
--           . <a>dataColumn</a> "northing" (<a>Numbers</a> [ 52, 52, 45, 45, 52 ])
--   </pre>
--   
--   It is the same as <a>PropertySpec</a> (which was added in
--   <tt>0.4.0.0</tt>), but kept separate to help better-document code.
type Data = (VLProperty, VLSpec)

-- | Represents a single column of data. Used when generating inline data
--   with <a>dataColumn</a> and <a>dataFromColumns</a>.
type DataColumn = [LabelledSpec]

-- | Represents a single row of data. Used when generating inline data with
--   <a>dataRow</a> and <a>dataFromRows</a>.
type DataRow = VLSpec

-- | Specifies a geometric object to be used in a geoShape specification.
--   The first parameter is the geometric type, the second an optional list
--   of properties to be associated with the object.
--   
--   <pre>
--   <a>geometry</a> (<a>GeoPolygon</a> [ [ ( -3, 59 ), ( 4, 59 ), ( 4, 52 ), ( -3, 59 ) ] ]) []
--   </pre>
geometry :: Geometry -> [(Text, DataValue)] -> VLSpec

-- | Specifies a list of geo features to be used in a geoShape
--   specification. Each feature object in this collection can be created
--   with the <a>geometry</a> function.
--   
--   <pre>
--   <a>geoFeatureCollection</a>
--       [ <a>geometry</a> (<a>GeoPolygon</a> [ [ ( -3, 59 ), ( -3, 52 ), ( 4, 52 ), ( -3, 59 ) ] ])
--           [ ( "myRegionName", <a>Str</a> "Northern region" ) ]
--       , <a>geometry</a> (<a>GeoPolygon</a> [ [ ( -3, 52 ), ( 4, 52 ), ( 4, 45 ), ( -3, 52 ) ] ])
--           [ ( "myRegionName", <a>Str</a> "Southern region" ) ]
--       ]
--   </pre>
geoFeatureCollection :: [VLSpec] -> VLSpec

-- | Specifies a list of geometry objects to be used in a geoShape
--   specification. Each geometry object in this collection can be created
--   with the <a>geometry</a> function.
--   
--   <pre>
--   <a>geometryCollection</a>
--       [ <a>geometry</a> (<a>GeoPolygon</a> [ [ ( -3, 59 ), ( 4, 59 ), ( 4, 52 ), ( -3, 59 ) ] ]) []
--       , <a>geometry</a> (<a>GeoPoint</a> -3.5 55.5) []
--       ]
--   </pre>
geometryCollection :: [VLSpec] -> VLSpec

-- | Specifies the type and content of geometry specifications for
--   programatically creating GeoShapes. These can be mapped to the
--   <a>GeoJson geometry object types</a> where the pluralised type names
--   refer to their <tt>Multi</tt> prefixed equivalent in the GeoJSON
--   specification.
data Geometry

-- | The GeoJson geometry <tt>point</tt> type.
GeoPoint :: Double -> Double -> Geometry

-- | The GeoJson geometry <tt>multi-point</tt> type.
GeoPoints :: [(Double, Double)] -> Geometry

-- | The GeoJson geometry <tt>line</tt> type.
GeoLine :: [(Double, Double)] -> Geometry

-- | The GeoJson geometry <tt>multi-line</tt> type.
GeoLines :: [[(Double, Double)]] -> Geometry

-- | The GeoJson geometry <tt>polygon</tt> type.
GeoPolygon :: [[(Double, Double)]] -> Geometry

-- | The GeoJson geometry <tt>multi-polygon</tt> type.
GeoPolygons :: [[[(Double, Double)]]] -> Geometry

-- | Generate a sequence of numbers as a data source. The resulting
--   sequence will have the name <tt>"data"</tt>. To give it an alternative
--   name use <a>dataSequenceAs</a>.
--   
--   <pre>
--   myData = <a>dataSequence</a> 0 6.28 0.1
--   </pre>
dataSequence :: Double -> Double -> Double -> Data

-- | Generate a sequence of numbers as a named data source. This extends
--   <a>dataSequence</a> by allowing you to name the data source.
--   
--   <pre>
--   myTheta = <a>dataSequenceAs</a> 0 6.28 0.1 "theta"
--   </pre>
dataSequenceAs :: Double -> Double -> Double -> FieldName -> Data

-- | Generate a data source that is a sphere for bounding global geographic
--   data. The sphere will be subject to whatever projection is specified
--   for the view.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>sphere</a>
--       , <a>projection</a> [ <a>PrType</a> <a>Orthographic</a> ]
--       , <a>mark</a> <a>Geoshape</a> [ <a>MFill</a> "aliceblue" ]
--       ]
--   </pre>
sphere :: Data

-- | Generate a grid of lines of longitude (meridians) and latitude
--   (parallels).
--   
--   <pre>
--   let proj = <a>projection</a> [ <a>PrType</a> <a>Orthographic</a> ]
--       sphereSpec = <a>asSpec</a> [ <a>sphere</a>
--                           , <a>mark</a> <a>Geoshape</a> [ <a>MFill</a> "aliceblue" ] ]
--       gratSpec =
--           <a>asSpec</a>
--               [ <a>graticule</a> [ <a>GrStep</a> (5, 5) ]
--               , <a>mark</a> <a>Geoshape</a> [ <a>MFilled</a> False, <a>MStrokeWidth</a> 0.3 ]
--               ]
--   in <a>toVegaLite</a> [ proj, <a>layer</a> [ sphereSpec, gratSpec ] ]
--   </pre>
graticule :: [GraticuleProperty] -> Data

-- | Determine the properties of graticules. See the <a>Vega-Lite
--   documentation</a> for details.
data GraticuleProperty

-- | Define the extent of both the major and minor graticules. The range is
--   given as longitude, latitude pairs of the minimum and then maximum
--   extent. The units are degrees.
GrExtent :: (Double, Double) -> (Double, Double) -> GraticuleProperty

-- | As <tt>GrExtent</tt> but for the major graticule lines only.
GrExtentMajor :: (Double, Double) -> (Double, Double) -> GraticuleProperty

-- | As <tt>GrExtent</tt> but for the minor graticule lines only.
GrExtentMinor :: (Double, Double) -> (Double, Double) -> GraticuleProperty

-- | The step angles for the graticule lines, given as a longitude,
--   latitude pair defining the EW and NS intervals respectively. The units
--   are degrees.
--   
--   By default major graticule lines extend to both poles but the minor
--   lines stop at ±80 degrees latitude.
GrStep :: (Double, Double) -> GraticuleProperty

-- | As <tt>GrStep</tt> but for the major graticule lines only.
--   
--   The default is <tt>(90, 360)</tt>.
GrStepMajor :: (Double, Double) -> GraticuleProperty

-- | As <tt>GrStep</tt> but for the minor graticule lines only.
--   
--   The default is <tt>(10, 10)</tt>.
GrStepMinor :: (Double, Double) -> GraticuleProperty

-- | The precision of the graticule. The units are degrees. A smaller value
--   reduces visual artifacts (steps) but takes longer to render.
--   
--   The default is <tt>2.5</tt>.
GrPrecision :: Double -> GraticuleProperty

-- | Specifies the type of format a data source uses. If the format is
--   indicated by the file name extension (<tt>".tsv"</tt>,
--   <tt>".csv"</tt>, <tt>".json"</tt>) there is no need to indicate the
--   format explicitly. However this can be useful if the filename
--   extension does not indicate type (e.g. <tt>".txt"</tt>) or you wish to
--   customise the parsing of a file. For example, when specifying the
--   <tt>JSON</tt> format, its parameter indicates the name of property
--   field containing the attribute data to extract. For details see the
--   <a>Vega-Lite documentation</a>.
data Format

-- | Property to be extracted from some JSON when it has some surrounding
--   structure. e.g., specifying the property <tt>values.features</tt> is
--   equivalent to retrieving <tt>json.values.features</tt> from a JSON
--   object with a custom delimiter.
JSON :: Text -> Format

-- | Comma-separated (CSV) data file format.
CSV :: Format

-- | Tab-separated (TSV) data file format
TSV :: Format

-- | The fields are separated by the given character (which must be a
--   single 16-bit code unit).
DSV :: Char -> Format

-- | A topoJSON feature format containing an object with the given name.
--   For example:
--   
--   <pre>
--   <a>dataFromUrl</a> "londonBoroughs.json" [<a>TopojsonFeature</a> "boroughs"]
--   </pre>
TopojsonFeature :: Text -> Format

-- | A topoJSON mesh format containing an object with the given name.
--   Unlike <a>TopojsonFeature</a>, the corresponding geo data are returned
--   as a single unified mesh, not as individual GeoJSON features.
TopojsonMesh :: Text -> Format

-- | Parsing rules when processing some data text, specified as a list of
--   tuples in the form <tt>(fieldname, datatype)</tt>. Useful when
--   automatic type inference needs to be overridden, for example when
--   converting integers representing years into dates and strings into
--   numbers:
--   
--   <pre>
--   <a>dataFromUrl</a> "myDataFile.csv"
--      [ <a>Parse</a> [ ( "year", <a>FoDate</a> "%Y" ), ( "y", <a>FoNumber</a> ) ] ]
--   </pre>
Parse :: [(FieldName, DataType)] -> Format

-- | Indicates the type of data to be parsed when reading input data. For
--   <tt>FoDate</tt> and <tt>FoUtc</tt>, the formatting specification can
--   be specified using <a>D3's formatting specifiers</a> or left as an
--   empty string if default date formatting is to be applied. Care should
--   be taken when assuming default parsing of dates because different
--   browsers can parse dates differently. Being explicit about the date
--   format is usually safer.
data DataType

-- | Indicate numeric data type to be parsed when reading input data.
FoNumber :: DataType

-- | Indicate Boolean data type to be parsed when reading input data.
FoBoolean :: DataType

-- | Date format for parsing input data using <a>D3's formatting
--   specifiers</a> or left as an empty string for default formatting.
FoDate :: Text -> DataType

-- | Similar to <a>FoDate</a> but for UTC format dates.
FoUtc :: Text -> DataType

-- | Create a single transform from a list of transformation
--   specifications. Note that the order of transformations can be
--   important, especially if labels created with <a>calculateAs</a>,
--   <a>timeUnitAs</a>, and <a>binAs</a> are used in other transformations.
--   Using the functional composition pipeline idiom (as example below)
--   allows you to provide the transformations in the order intended in a
--   clear manner.
--   
--   <pre>
--   <a>transform</a>
--       . <a>filter</a> (<a>FExpr</a> "datum.year == 2010")
--       . <a>calculateAs</a> "datum.sex == 2 ? 'Female' : 'Male'" "gender"
--   </pre>
--   
--   The supported transformations are: <a>aggregate</a>, <a>binAs</a>,
--   <a>calculateAs</a>, <a>density</a>, <a>filter</a>, <a>flatten</a>,
--   <a>flattenAs</a>, <a>fold</a>, <a>foldAs</a>, <a>impute</a>,
--   <a>joinAggregate</a>, <a>loess</a>, <a>lookup</a>, <a>lookupAs</a>,
--   <a>lookupSelection</a>, <a>pivot</a>, <a>quantile</a>,
--   <a>regression</a>, <a>sample</a>, <a>stack</a>, <a>timeUnitAs</a>, and
--   <a>window</a>.
transform :: [TransformSpec] -> PropertySpec

-- | Sets the cartographic projection used for geospatial coordinates. A
--   projection defines the mapping from <tt>(longitude,latitude)</tt> to
--   an <tt>(x,y)</tt> plane used for rendering. This is useful when using
--   the <a>Geoshape</a> mark. For further details see the <a>Vega-Lite
--   documentation</a>.
--   
--   <pre>
--   <a>projection</a> [ <a>PrType</a> <a>Orthographic</a>, <a>PrRotate</a> (-40) 0 0 ]
--   </pre>
projection :: [ProjectionProperty] -> PropertySpec

-- | Properties for customising a geospatial projection that converts
--   longitude,latitude pairs into planar <tt>(x,y)</tt> coordinate pairs
--   for rendering and query. For details see the <a>Vega-Lite
--   documentation</a>.
--   
--   This type has been changed in the <tt>0.4.0.0</tt> release so that all
--   constructors start with <tt>Pr</tt> rather than <tt>P</tt> (and so
--   provide some differentiation to the <a>PositionChannel</a>
--   constructors).
data ProjectionProperty

-- | The type of the map projection.
PrType :: Projection -> ProjectionProperty

-- | The clipping circle angle in degrees. A value of <tt>Nothing</tt> will
--   switch to antimeridian cutting rather than small-circle clipping.
PrClipAngle :: Maybe Double -> ProjectionProperty

-- | Projection’s viewport clip extent to the specified bounds in pixels.
PrClipExtent :: ClipRect -> ProjectionProperty

-- | Projection’s center as longitude and latitude in degrees.
PrCenter :: Double -> Double -> ProjectionProperty

-- | The projection's zoom scale, which if set, overrides automatic scaling
--   of a geo feature to fit within the viewing area.
PrScale :: Double -> ProjectionProperty

-- | A projection’s panning translation, which if set, overrides automatic
--   positioning of a geo feature to fit within the viewing area
--   
--   Note that the prefix is <tt>Pr</tt> and not <tt>P</tt>, to match the
--   Elm API.
PrTranslate :: Double -> Double -> ProjectionProperty

-- | A projection’s three-axis rotation angle. The order is <tt>lambda</tt>
--   <tt>phi</tt> <tt>gamma</tt>, and specifies the rotation angles in
--   degrees about each spherical axis.
PrRotate :: Double -> Double -> Double -> ProjectionProperty

-- | Threshold for the projection’s adaptive resampling in pixels, and
--   corresponds to the Douglas–Peucker distance. If precision is not
--   specified, the projection’s current resampling precision of 0.707 is
--   used.
--   
--   Version 3.3.0 of the Vega-Lite spec claims this should be output as a
--   string, but it is written out as a number since the <a>spec is in
--   error</a>.
PrPrecision :: Double -> ProjectionProperty

-- | Reflect the x-coordinates after performing an identity projection.
--   This creates a left-right mirror image of the geoshape marks when
--   subject to an identity projection with <a>Identity</a>.
PrReflectX :: Bool -> ProjectionProperty

-- | Reflect the y-coordinates after performing an identity projection.
--   This creates a left-right mirror image of the geoshape marks when
--   subject to an identity projection with <a>Identity</a>.
PrReflectY :: Bool -> ProjectionProperty

-- | The <tt>Hammer</tt> map projection coefficient.
PrCoefficient :: Double -> ProjectionProperty

-- | The <tt>Satellite</tt> map projection distance.
PrDistance :: Double -> ProjectionProperty

-- | The <tt>Bottomley</tt> map projection fraction.
PrFraction :: Double -> ProjectionProperty

-- | Number of lobes in lobed map projections such as the <tt>Berghaus
--   star</tt>.
PrLobes :: Int -> ProjectionProperty

-- | Parallel for map projections such as the <tt>Armadillo</tt>.
PrParallel :: Double -> ProjectionProperty

-- | Radius value for map projections such as the <tt>Gingery</tt>.
PrRadius :: Double -> ProjectionProperty

-- | Ratio value for map projections such as the <tt>Hill</tt>.
PrRatio :: Double -> ProjectionProperty

-- | Spacing value for map projections such as the <tt>Lagrange</tt>.
PrSpacing :: Double -> ProjectionProperty

-- | <tt>Satellite</tt> map projection tilt.
PrTilt :: Double -> ProjectionProperty

-- | Types of geographic map projection. These are based on a subset of
--   those provided by the <a>d3-geo library</a>. For details of available
--   projections see the <a>Vega-Lite documentation</a>.
data Projection

-- | An Albers equal-area conic map projection.
Albers :: Projection

-- | An Albers USA map projection that combines continental USA with Alaska
--   and Hawaii. Unlike other projection types, this remains unaffected by
--   <a>PrRotate</a>.
AlbersUsa :: Projection

-- | An azimuthal equal area map projection.
AzimuthalEqualArea :: Projection

-- | An azimuthal equidistant map projection.
AzimuthalEquidistant :: Projection

-- | A conformal conic map projection.
ConicConformal :: Projection

-- | An equal area conic map projection.
ConicEqualArea :: Projection

-- | An equidistant conic map projection.
ConicEquidistant :: Projection

-- | Specify the name of the custom D3 prohection to use. See the <a>Vega
--   API</a> for more information.
--   
--   An example: <tt>Custom "winkle3"</tt>
Custom :: Text -> Projection

-- | An <a>Equal Earth map projection</a> that provides a reasonable shape
--   approximation while retaining relative areas.
EqualEarth :: Projection

-- | An equirectangular map projection that maps longitude to x and
--   latitude to y. While showing less area distortion towards the poles
--   than the default <a>Mercator</a> projection, it is neither equal-area
--   nor conformal.
Equirectangular :: Projection

-- | A gnomonic map projection.
Gnomonic :: Projection

-- | The identiy projection. This can be combined with <a>PrReflectX</a>
--   and <a>PrReflectY</a> in the list of projection properties.
Identity :: Projection

-- | A Mercator map projection. This is the default projection of
--   longitude, latitude values if no projection is set explicitly. It
--   preserves shape (local angle) and lines of equal angular bearing
--   remain parallel straight lines. The area is <i>significantly</i>
--   enlarged towards the poles.
Mercator :: Projection

-- | The <a>Natural Earth projection</a> is neither conformal nor
--   equal-area, but is designed to be "appealing to the eye" for
--   small-scale maps of the whole world.
NaturalEarth1 :: Projection

-- | An orthographic map projection.
Orthographic :: Projection

-- | A stereographic map projection.
Stereographic :: Projection

-- | A transverse Mercator map projection.
TransverseMercator :: Projection

-- | Specifies a clipping rectangle for defining the clip extent of a map
--   projection.
data ClipRect

-- | No clipping it to be applied.
NoClip :: ClipRect

-- | The left, top, right, and bottom extents, in pixels, of a rectangular
--   clip.
LTRB :: Double -> Double -> Double -> Double -> ClipRect

-- | Defines a set of named aggregation transformations to be used when
--   encoding channels. This is useful when, for example, you wish to apply
--   the same transformation to a number of channels but do not want to
--   define it each time. For further details see the <a>Vega-Lite
--   documentation</a>.
--   
--   <pre>
--   <a>transform</a>
--       . <a>aggregate</a>
--           [ <a>opAs</a> <a>Min</a> "people" "lowerBound"
--           , <a>opAs</a> <a>Max</a> "people" "upperBound" ]
--           [ "age" ]
--   </pre>
--   
--   See also <a>joinAggregate</a>.
aggregate :: [VLSpec] -> [FieldName] -> BuildTransformSpecs

-- | Aggregation transformations to be used when encoding channels. Unlike
--   <a>aggregate</a>, this transformation joins the results to the input
--   data. Can be helpful for creating derived values that combine raw data
--   with some aggregate measure, such as percentages of group totals. The
--   first parameter is a list of the named aggregation operations to
--   apply. The second is a list of possible window aggregate field
--   properties, such as a field to group by when aggregating. The third
--   parameter is a list of transformations to which this is added.
--   
--   <pre>
--   <a>transform</a>
--       . <a>joinAggregate</a>
--           [ <a>opAs</a> <a>Mean</a> "rating" "avYearRating" ]
--           [ <a>WGroupBy</a> [ "year" ] ]
--       . <a>filter</a> (<a>FExpr</a> "(datum.rating - datum.avYearRating) &gt; 3"))
--   </pre>
--   
--   For details, see the <a>Vega-Lite join aggregate documentation</a>.
--   
--   See also <a>aggregate</a>.
joinAggregate :: [VLSpec] -> [WindowProperty] -> BuildTransformSpecs

-- | Create a named aggregation operation on a field that can be added to a
--   transformation. For further details see the <a>Vega-Lite
--   documentation</a>.
--   
--   <pre>
--   <a>transform</a>
--       . <a>aggregate</a>
--           [ <a>opAs</a> <a>Min</a> "people" "lowerBound"
--           , <a>opAs</a> <a>Max</a> "people" "upperBound"
--           ]
--           [ "age" ]
--   </pre>
opAs :: Operation -> FieldName -> FieldName -> VLSpec

-- | Creates a new data field based on the given temporal binning. Unlike
--   the direct encoding binning, this transformation is named and so can
--   be referred to in multiple encodings. Note though that usually it is
--   easer to apply the temporal binning directly as part of the encoding
--   as this will automatically format the temporal axis. See the
--   <a>Vega-Lite documentation</a> for further details.
--   
--   The following example takes a temporal dataset and encodes daily
--   totals from it grouping by month:
--   
--   <pre>
--   trans = <a>transform</a> . <a>timeUnitAs</a> (<a>TU</a> <a>Month</a>) "date" "monthly"
--   
--   enc = <a>encoding</a>
--           . <a>position</a> <a>X</a> [ <a>PName</a> "date", <a>PmType</a> <a>Temporal</a>, <a>PTimeUnit</a> (<a>TU</a> <a>Day</a>) ]
--           . <a>position</a> <a>Y</a> [ <a>PAggregate</a> <a>Sum</a>, <a>PmType</a> <a>Quantitative</a> ]
--           . <a>detail</a> [ <a>DName</a> "monthly", <a>DmType</a> <a>Temporal</a> ]
--   </pre>
timeUnitAs :: TimeUnit -> FieldName -> FieldName -> BuildTransformSpecs

-- | Type of aggregation operation. See the <a>Vega-Lite documentation</a>
--   for more details.
--   
--   The <tt>Average</tt> constructor was removed in version
--   <tt>0.4.0.0</tt>; use <a>Mean</a> instead.
data Operation

-- | An input data object containing the maximum field value to be used in
--   an aggregation operation.
--   
--   If supplied as part of an encoding aggregation, the parameter should
--   be <a>Just</a> the name of the field to maximise. When used as part of
--   a transform the parameter should be <a>Nothing</a> as the field is
--   specified in the <a>aggregate</a> call.
--   
--   Encoding example, to find the production budget for the maximum US
--   grossing film in each genre:
--   
--   <pre>
--   <a>encoding</a>
--     . <a>position</a> <a>X</a>
--                [ <a>PName</a> "Production_Budget"
--                , <a>PmType</a> <a>Quantitative</a>
--                , <a>PAggregate</a> (<a>ArgMax</a> (<a>Just</a> "US_Gross"))
--                ]
--     . <a>position</a> <a>Y</a> [<a>PName</a> "Major_Genre", <a>PmType</a> <a>Nominal</a>]
--   
--   </pre>
--   
--   An example of its use as part of an <a>aggregate</a> call:
--   
--   <pre>
--   <a>transform</a>
--     . <a>aggregate</a>
--         [ <a>opAs</a> (<a>ArgMax</a> <a>Nothing</a>) "US_Gross" "amUSGross"]
--         ["Major_Genre"]
--   
--   </pre>
--   
--   The optional field name was added in the <tt>0.4.0.0</tt> release.
ArgMax :: Maybe FieldName -> Operation

-- | An input data object containing the minimum field value to be used in
--   an aggregation operation. See <a>ArgMax</a> for a discussion of the
--   optional argument.
--   
--   The optional field name was added in the <tt>0.4.0.0</tt> release.
ArgMin :: Maybe FieldName -> Operation

-- | Lower 95% confidence interval to be used in an aggregation operation.
CI0 :: Operation

-- | Upper 95% confidence interval to be used in an aggregation operation.
CI1 :: Operation

-- | Total count of data objects to be used in an aggregation operation.
Count :: Operation

-- | Count of distinct data objects to be used in an aggregation operation.
Distinct :: Operation

-- | Maximum field value to be used in an aggregation operation.
Max :: Operation

-- | Mean field value to be used in an aggregation operation.
Mean :: Operation

-- | Median field value to be used in an aggregation operation.
Median :: Operation

-- | Minimum field value to be used in an aggregation operation.
Min :: Operation

-- | Count of <tt>null</tt> or <tt>undefined</tt> field value to be used in
--   an aggregation operation.
Missing :: Operation

-- | Product of field values to be used in an aggregate operation.
--   
--   This was added in Vega-Lite 4.6.0.
Product :: Operation

-- | Lower quartile boundary of field values to be used in an aggregation
--   operation.
Q1 :: Operation

-- | Upper quartile boundary of field values to be used in an aggregation
--   operation.
Q3 :: Operation

-- | Standard error of field values to be used in an aggregate operation.
Stderr :: Operation

-- | Sample standard deviation of field values to be used in an aggregate
--   operation.
Stdev :: Operation

-- | Population standard deviation of field values to be used in an
--   aggregate operation.
StdevP :: Operation

-- | Sum of field values to be used in an aggregate operation.
Sum :: Operation

-- | Count of values that are not <tt>null</tt>, <tt>undefined</tt>, or
--   <tt>NaN</tt> to be used in an aggregation operation.
Valid :: Operation

-- | Sample variance of field values to be used in an aggregate operation.
Variance :: Operation

-- | Population variance of field values to be used in an aggregate
--   operation.
VarianceP :: Operation

-- | Create a named binning transformation that may be referenced in other
--   Transformations or encodings. See the <a>Vega-Lite documentation</a>
--   for more details. Note that usually, direct binning within an encoding
--   is preferred over this form of bin transformation.
--   
--   <pre>
--   <a>transform</a>
--       . <a>binAs</a> [ <a>MaxBins</a> 3 ] "IMDB_Rating" "ratingGroup"
--   </pre>
binAs :: [BinProperty] -> FieldName -> FieldName -> BuildTransformSpecs

-- | Type of binning property to customise. See the <a>Vega-Lite
--   documentation</a> for more details.
--   
--   This is used with: <a>binAs</a>, <a>DBin</a>, <a>FBin</a>,
--   <a>HBin</a>, <a>MBin</a>, <a>OBin</a>, <a>PBin</a>, and <a>TBin</a>.
data BinProperty

-- | Should the input data be treated as already binned?
AlreadyBinned :: Bool -> BinProperty

-- | A value in the binned domain at which to anchor the bins, shifting the
--   bin boundaries if necessary to ensure that a boundary aligns with the
--   anchor value.
BinAnchor :: Double -> BinProperty

-- | The number base to use for automatic bin determination.
--   
--   Default is <tt>10</tt>.
Base :: Double -> BinProperty

-- | Scale factors indicating allowable subdivisions.
--   
--   Default is <tt>[5, 2]</tt>.
--   
--   Prior to <tt>0.4.0.0</tt> the <tt>Divide</tt> constructor took two
--   numbers.
Divide :: [Double] -> BinProperty

-- | The range (minimum, maximum) of the desired bin values.
Extent :: Double -> Double -> BinProperty

-- | The maxium number of bins.
--   
--   Default is <tt>6</tt> for <a>row</a>, <a>column</a>, and <a>shape</a>
--   channels, <tt>10</tt> otherwise.
MaxBins :: Int -> BinProperty

-- | A minimum allowable step size.
MinStep :: Double -> BinProperty

-- | If <tt>True</tt>, the bin boundaries are adjusted to use
--   human-friendly values, such as multiples of ten.
--   
--   Default is <tt>True</tt>.
Nice :: Bool -> BinProperty

-- | Set the range based on an interactive selection. The label must
--   reference an interval selection, but this constraint is <i>not
--   enforced</i> at compile or run time.
--   
--   <pre>
--   sel = <a>selection</a>
--         . <a>select</a> "brush" <a>Interval</a> [ <a>Encodings</a> [ <a>ChX</a> ] ]
--   enc = <a>encoding</a>
--         . <a>position</a> <a>X</a> [ <a>PName</a> "temperature"
--                      , <a>PmType</a> <a>Quantitative</a>
--                      , <a>PBin</a> [ <a>SelectionExtent</a> "brush" ]
--                      ]
--   
--   </pre>
SelectionExtent :: SelectionLabel -> BinProperty

-- | The step size to use between bins.
--   
--   If specified, <a>MaxBins</a> and other related options are ignored.
Step :: Double -> BinProperty

-- | Pick the step size from this list.
Steps :: [Double] -> BinProperty

-- | Apply a stack transform for positioning multiple values. This is an
--   alternative to specifying stacking directly when encoding position.
--   
--   <pre>
--   <a>transform</a>
--       . <a>aggregate</a> [ <a>opAs</a> <a>Count</a> "" "count_*" ] [ "Origin", "Cylinders" ]
--       . <a>stack</a> "count_*"
--           []
--           "stack_count_Origin1"
--           "stack_count_Origin2"
--           [ <a>StOffset</a> <a>StNormalize</a>, <a>StSort</a> [ <a>WAscending</a> "Origin" ] ]
--       . <a>window</a>
--           [ ( [ <a>WAggregateOp</a> <a>Min</a>, <a>WField</a> "stack_count_Origin1" ], "x" )
--           , ( [ <a>WAggregateOp</a> <a>Max</a>, <a>WField</a> "stack_count_Origin2" ], "x2" )
--           ]
--           [ <a>WFrame</a> Nothing Nothing, <a>WGroupBy</a> [ "Origin" ] ]
--       . <a>stack</a> "count_*"
--           [ "Origin" ]
--           "y"
--           "y2"
--           [ <a>StOffset</a> <a>StNormalize</a>, <a>StSort</a> [ <a>WAscending</a> "Cylinders" ] ]
--   </pre>
stack :: FieldName -> [FieldName] -> FieldName -> FieldName -> [StackProperty] -> BuildTransformSpecs

-- | How are stacks applied within a transform?
--   
--   Prior to version <tt>0.4.0.0</tt> the <tt>StackProperty</tt> type was
--   what is now <tt>StackOffset</tt>.
data StackProperty

-- | Stack offset.
StOffset :: StackOffset -> StackProperty

-- | Ordering within a stack.
StSort :: [SortField] -> StackProperty

-- | Describes the type of stacking to apply to a bar chart.
--   
--   In <tt>0.4.0.0</tt> this was renamed from <tt>StackProperty</tt> to
--   <tt>StackOffset</tt>, but the constructor names have not changed.
data StackOffset

-- | Offset a stacked layout using a baseline at the foot of the stack.
StZero :: StackOffset

-- | Rescale a stacked layout to use a common height while preserving the
--   relative size of stacked quantities.
StNormalize :: StackOffset

-- | Offset a stacked layout using a central stack baseline.
StCenter :: StackOffset

-- | Do not stack marks, but create a layered plot.
NoStack :: StackOffset

-- | Creates a new data field based on calculations from existing fields
--   and values.
--   
--   See the <a>Vega-Lite documentation</a> for further details.
--   
--   <pre>
--   <a>transform</a> . <a>calculateAs</a> "datum.sex == 2 ? 'F' : 'M'" "gender"
--   </pre>
calculateAs :: VegaExpr -> FieldName -> BuildTransformSpecs

-- | Adds the given filter operation a list of transformations that may be
--   applied to a channel or field.
--   
--   <pre>
--   <a>transform</a>
--       . <a>filter</a> (<a>FEqual</a> "Animal" (<a>Str</a> "Cat"))
--   </pre>
--   
--   Filter operations can combine selections and data predicates with
--   <a>BooleanOp</a> expressions (and as of <tt>0.4.0.0</tt>,
--   <a>FilterOp</a> and <a>FilterOpTrans</a> can be used to lift the
--   <a>Filter</a> type into boolean expressions):
--   
--   <pre>
--   <a>transform</a>
--       . <a>filter</a> (<a>FCompose</a> (<a>And</a> (<a>Expr</a> "datum.Weight_in_lbs &gt; 3000") (<a>Selection</a> "brush")))
--   </pre>
--   
--   The <a>Vega expression documentation</a> describes the supported
--   format (e.g. the requirement to precede column names with
--   <tt>"datum."</tt>).
filter :: Filter -> BuildTransformSpecs

-- | Type of filtering operation. See the <a>Vega-Lite documentation</a>
--   for details.
--   
--   These can also be included into a <a>BooleanOp</a> expression using
--   <a>FilterOp</a> and <a>FilterOpTrans</a> (as of version
--   <tt>0.4.0.0</tt>).
data Filter

-- | Filter a data stream so that only data in a given field equal to the
--   given value are used.
FEqual :: FieldName -> DataValue -> Filter

-- | Filter a data stream so that only data in a given field less than the
--   given value are used.
FLessThan :: FieldName -> DataValue -> Filter

-- | Filter a data stream so that only data in a given field less than, or
--   equal to, the given value are used.
FLessThanEq :: FieldName -> DataValue -> Filter

-- | Filter a data stream so that only data in a given field greater than
--   the given value are used.
FGreaterThan :: FieldName -> DataValue -> Filter

-- | Filter a data stream so that only data in a given field greater than,
--   or equal to, the given value are used.
FGreaterThanEq :: FieldName -> DataValue -> Filter

-- | Filter a data stream so that only data that satisfy the given
--   predicate expression are used.
FExpr :: VegaExpr -> Filter

-- | Build up a filtering predicate through logical composition such as
--   <a>And</a> and <a>Or</a>.
--   
--   The following fgragment will apply a filter to identify only those
--   items selected interactively and that represent ages over 65:
--   
--   <pre>
--   trans = <a>transform</a>
--             . <a>filter</a>
--                 (<a>FCompose</a>
--                   (<a>And</a> (<a>Selection</a> "brush") (<a>Expr</a> "datum.age &gt; 65"))
--                 )
--   
--   </pre>
FCompose :: BooleanOp -> Filter

-- | Filter a data stream so that only data in a given field that are
--   within the given interactive selection are used.
--   
--   <pre>
--   sel = <a>selection</a> . <a>select</a> "myBrush" <a>Interval</a> [<a>Encodings</a> [<a>ChX</a>]]
--   trans = <a>transform</a> . <a>filter</a> (<a>FSelection</a> "myBrush")
--   
--   </pre>
FSelection :: SelectionLabel -> Filter

-- | Filter a data stream so that only data in a given field contained in
--   the given list of values are used.
FOneOf :: FieldName -> DataValues -> Filter

-- | Filter a data stream so that only data in a given field that are
--   within the given range are used.
--   
--   For example:
--   
--   <pre>
--   <a>filter</a> (<a>FRange</a> "date" (<a>DateRange</a> [<a>DTYear</a> 2006] [<a>DTYear</a> 2016])
--   
--   </pre>
--   
--   See <a>FilterOpTrans</a> for more use cases.
FRange :: FieldName -> FilterRange -> Filter

-- | Filter a data stream so that only valid data (i.e. not null or NaN) in
--   a given field are used.
FValid :: FieldName -> Filter

-- | A pair of filter range data values, used with <a>FRange</a>.
data FilterRange

-- | Select between these two values (both limits are inclusive).
NumberRange :: Double -> Double -> FilterRange

-- | A lower limit (inclusive).
NumberRangeLL :: Double -> FilterRange

-- | An upper limit (inclusive).
NumberRangeUL :: Double -> FilterRange

-- | Select between these two dates (both limits are inclusive).
--   
--   If a limit is the empty list then the filter is treated as a limit
--   only on the other value, so <tt>DateRange [] [<a>DTYear</a> 2019]</tt>
--   acts as an upper-limit on the date range. One of the two limits
--   <b>should</b> be defined, but there is no enforcement of this.
DateRange :: [DateTime] -> [DateTime] -> FilterRange

-- | Map array-valued fields to a set of individual data objects, one per
--   array entry.
--   
--   See also <a>flattenAs</a>.
flatten :: [FieldName] -> BuildTransformSpecs

-- | Similar to <a>flatten</a> but allows the new output fields to be
--   named.
flattenAs :: [FieldName] -> [FieldName] -> BuildTransformSpecs

-- | Perform a <i>gather</i> operation to <i>tidy</i> a table. Collapse
--   multiple data fields into two new data fields: <tt>key</tt> containing
--   the original data field names and <tt>value</tt> containing the
--   corresponding data values.
--   
--   It is the inverse of <a>pivot</a>. See also <a>foldAs</a>.
--   
--   <pre>
--   dvals =
--       <a>dataFromColumns</a> []
--           . <a>dataColumn</a> "city" (<a>Strings</a> [ "Bristol", "Sheffield", "Glasgow" ])
--           . <a>dataColumn</a> "temp2017" (<a>Numbers</a> [ 12, 11, 7 ])
--           . <a>dataColumn</a> "temp2018" (<a>Numbers</a> [ 14, 13, 10 ])
--   
--   trans =
--       <a>transform</a>
--           . <a>fold</a> [ "temp2017", "temp2018" ]
--   
--   enc =
--       <a>encoding</a>
--           . <a>position</a> <a>X</a> [ <a>PName</a> "key", <a>PmType</a> <a>Nominal</a> ]
--           . <a>position</a> <a>Y</a> [ <a>PName</a> "city", <a>PmType</a> <a>Nominal</a> ]
--           . <a>size</a> [ <a>MName</a> "value", <a>MmType</a> <a>Quantitative</a> ]
--   </pre>
fold :: [FieldName] -> BuildTransformSpecs

-- | A <a>fold</a> where the <tt>key</tt> and <tt>value</tt> fields can be
--   renamed.
foldAs :: [FieldName] -> FieldName -> FieldName -> BuildTransformSpecs

-- | Perform a <i>pivot</i> operation on a table. Spreads a key-value pair
--   of fields across multiple fields according to the data in the
--   <i>key</i> field.
--   
--   It is the inverse of <a>fold</a>.
--   
--   <pre>
--   dvals =
--       <a>dataFromColumns</a> []
--           . <a>dataColumn</a> "city" (<a>Strings</a> [ "Bristol", "Bristol", "Sheffield", "Sheffield", "Glasgow", "Glasgow" ])
--           . <a>dataColumn</a> "temperature" (<a>Numbers</a> [ 12, 14, 11, 13, 7, 10 ])
--           . <a>dataColumn</a> "year" (<a>Numbers</a> [ 2017, 2018, 2017, 2018, 2017, 2018 ])
--   
--   trans =
--       <a>transform</a>
--           . <a>pivot</a> "year" "temperature" [ <a>PiGroupBy</a> [ "city" ] ]
--   
--   enc =
--       <a>encoding</a>
--           . <a>position</a> <a>X</a> [ <a>PName</a> "2017", <a>PmType</a> <a>Quantitative</a> ]
--           . <a>position</a> <a>Y</a> [ <a>PName</a> "city", <a>PmType</a> <a>Nominal</a> ]
--   </pre>
pivot :: FieldName -> FieldName -> [PivotProperty] -> BuildTransformSpecs

-- | Configure the <a>pivot</a> operation.
data PivotProperty

-- | The data fields to group by when pivoting. If unspecified then a
--   single group containing all the data objects will be used.
PiGroupBy :: [FieldName] -> PivotProperty

-- | The maximum number of fields to generate when pivoting. If 0 or
--   unspecified all fields are pivoted. The pivot names are sorted into
--   ascending order before the limit is applied.
PiLimit :: Natural -> PivotProperty

-- | The aggregation operation to apply to grouped fields.
PiOp :: Operation -> PivotProperty

-- | Perform a lookup of named fields between two data sources. This allows
--   you to find values in one data source based on the values in another
--   (like a relational join).
--   
--   Use <a>lookupSelection</a> for linking data with interactive
--   selections.
--   
--   See the <a>Vega-Lite documentation</a> for further details.
--   
--   The following would return the values in the <tt>age</tt> and
--   <tt>height</tt> fields from <tt>lookup_people.csv</tt> for all rows
--   where the value in the <tt>name</tt> column in that file matches the
--   value of <tt>person</tt> in the primary data source.
--   
--   <pre>
--   peopleData = <a>dataFromUrl</a> "data/lookup_people.csv" []
--   lfields = <a>LuFields</a> ["age", "height"]
--   trans = <a>transform</a>
--             . <a>lookup</a> "person" peopleData "name" lfields
--   </pre>
--   
--   Note that the interface has changed in version <tt>0.5.0.0</tt>: the
--   output field names argument now uses the new <a>LookupFields</a> type.
--   This provides greater flexibility in naming and default behaviour. The
--   conversion from version 0.4 is simple: change
--   
--   <pre>
--   lookup key1 dataSource key2 fields
--   </pre>
--   
--   to
--   
--   <pre>
--   lookup key1 dataSource key2 (LuFields fields)
--   </pre>
lookup :: FieldName -> Data -> FieldName -> LookupFields -> BuildTransformSpecs

-- | Attach the results of an interactive selection to a primary data
--   source. This is similar to <a>lookup</a> except that the data in a
--   selection are used in place of the secondary data source.
--   
--   See the <a>Vega Lite lookup selection</a> documentation.
--   
--   <pre>
--   sel = <a>selection</a>
--         . <a>select</a> "mySel" <a>Single</a> [ <a>On</a> "mouseover", <a>Encodings</a> [ <a>ChX</a> ] ]
--   
--   trans = <a>transform</a>
--           . <a>lookupSelection</a> "country" "mySel" "country"
--   </pre>
lookupSelection :: FieldName -> SelectionLabel -> FieldName -> BuildTransformSpecs

-- | Configure the field selection in <a>lookup</a>.
data LookupFields

-- | The name of the fields to return from the secondary data source.
LuFields :: [FieldName] -> LookupFields

-- | Select fields from the secondary data source (first argument) and
--   allow them to be referred to with a new name (second argument).
LuFieldAs :: [(FieldName, FieldName)] -> LookupFields

-- | Create a single name for all the fields in the secondary data source.
--   The individual fields use dot notation to combine the given name with
--   the field name.
--   
--   <pre>
--   dvals = <a>dataFromUrl</a> "data/flights.airport.csv" []
--   trans = <a>transform</a>
--           . <a>lookup</a> "origin" dvals "iata" (<a>LuAs</a> "o")
--   enc = <a>encoding</a>
--         . <a>position</a> <a>Longitude</a> [ <a>PName</a> "o.longitude", <a>PmType</a> <a>Quantitative</a> ]
--         . <a>position</a> <a>Lattude</a> [ <a>PName</a> "o.latitude", <a>PmType</a> <a>Quantitative</a> ]
--   
--   </pre>
LuAs :: FieldName -> LookupFields

-- | The name of the fields to return from the secondary data source, along
--   with the default value to use if the lookup fails.
LuFieldsWithDefault :: [FieldName] -> Text -> LookupFields

-- | Allow fields to be renamed and provide a default for when the lookup
--   fails.
LuFieldsAsWithDefault :: [(FieldName, FieldName)] -> Text -> LookupFields

-- | Create a single name for all the fields in the secondary data source,
--   but the second parameter gives the default value for when the lookup
--   fails.
LuAsWithDefault :: FieldName -> Text -> LookupFields

-- | This routine is deprecated (as of version <tt>0.5.0.0</tt>) in favor
--   of <a>lookup</a>, as
--   
--   <pre>
--   lookupAs "key1" dataSource "key2" "matchName"
--   </pre>
--   
--   can be written as
--   
--   <pre>
--   lookup "key1" dataSource "key2" (LuAs "matchName")
--   </pre>

-- | <i>Deprecated: Please change 'lookupAs ... alias' to 'lookup ... (LuAs
--   alias)'</i>
lookupAs :: FieldName -> Data -> FieldName -> FieldName -> BuildTransformSpecs

-- | Impute missing data values.
--   
--   The following example creates a value for <tt>b</tt>, set to the mean
--   of existing <tt>b</tt> values with <tt>c=1</tt>, for the "missing"
--   coordinate of (<tt>a=30</tt>, <tt>c=1</tt>):
--   
--   <pre>
--   let dvals = <a>dataFromColumns</a> []
--                 . <a>dataColumn</a> "a" (<a>Numbers</a> [0, 0, 10, 10, 20, 20, 30])
--                 . <a>dataColumn</a> "b" (<a>Numbers</a> [28, 91, 43, 55, 81, 53, 19])
--                 . <a>dataColumn</a> "c" (<a>Numbers</a> [0, 1, 0, 1, 0, 1, 0])
--   
--       trans = <a>transform</a>
--                 . <a>impute</a> "b" "a" [<a>ImMethod</a> <a>ImMean</a>, <a>ImGroupBy</a> ["c"]]
--   
--       enc = <a>encoding</a>
--               . <a>position</a> <a>X</a> [<a>PName</a> "a", <a>PmType</a> <a>Quantitative</a>]
--               . <a>position</a> <a>Y</a> [<a>PName</a> "b", <a>PmType</a> <a>Quantitative</a>]
--               . <a>color</a> [<a>MName</a> "c", <a>MmType</a> <a>Nominal</a>]
--   
--       in <a>toVegaLite</a> [dvals [], trans [], enc [], <a>mark</a> <a>Line</a> []]
--   </pre>
impute :: FieldName -> FieldName -> [ImputeProperty] -> BuildTransformSpecs

-- | This is used with <a>impute</a> and <a>PImpute</a>.
data ImputeProperty

-- | 1d window over which data imputation values are generated. The two
--   parameters should either be <tt>Just</tt> a number indicating the
--   offset from the current data object, or <tt>Nothing</tt> to indicate
--   unbounded rows preceding or following the current data object.
ImFrame :: Maybe Int -> Maybe Int -> ImputeProperty

-- | Key values to be considered for imputation.
ImKeyVals :: DataValues -> ImputeProperty

-- | Key values to be considered for imputation as a sequence of numbers
--   between a start (first parameter), to less than an end (second
--   parameter) in steps of the third parameter.
ImKeyValSequence :: Double -> Double -> Double -> ImputeProperty

-- | How is the imputed value constructed.
--   
--   When using <tt>ImMethod <a>ImValue</a></tt>, the replacement value is
--   set with <a>ImNewValue</a>.
ImMethod :: ImMethod -> ImputeProperty

-- | Allow imputing of missing values on a per-group basis. For use with
--   the impute transform only and not a channel encoding.
ImGroupBy :: [FieldName] -> ImputeProperty

-- | The replacement value (when using <tt>ImMethod <a>ImValue</a></tt>).
ImNewValue :: DataValue -> ImputeProperty

-- | Imputation method to use when replacing values.
data ImMethod

-- | Use the minimum value.
ImMin :: ImMethod

-- | Use the maximum value.
ImMax :: ImMethod

-- | Use the mean value.
ImMean :: ImMethod

-- | Use the median value.
ImMedian :: ImMethod

-- | Use a replacement value (set with <tt>ImNewValue</tt>).
ImValue :: ImMethod

-- | Randomly sample rows from a data source up to a given maximum.
--   
--   For example, the following randomly samples 50 values from a sine
--   curve:
--   
--   <pre>
--   dvals = <a>dataSequenceAs</a> 0 13 0.001 "x"
--   trans = <a>transform</a>
--             . <a>calculateAs</a> "sin(datum.x)" "y"
--             . <a>sample</a> 50
--   </pre>
sample :: Int -> BuildTransformSpecs

-- | Apply <i>Kernel Density Estimation</i> to a data stream to generate a
--   new stream of samples of the estimated density. This is useful for
--   representing probability distributions and generating continuous
--   distributions from discrete samples.
--   
--   The following example creates a faceted display of the smoothed length
--   and width distributions from the iris dataset.
--   
--   <pre>
--   dvals = <a>dataFromUrl</a> "https://vega.github.io/vega-lite/data/iris.json" []
--   
--   colNames = [ "petalWidth", "petalLength", "sepalWidth", "sepalLength" ]
--   trans = <a>transform</a>
--           . <a>foldAs</a> colNames "measurement" "value"
--           . <a>density</a> "value" [ <a>DnGroupBy</a> [ "measurement" ] ]
--   
--   enc = <a>encoding</a>
--         . <a>position</a> <a>X</a> [ <a>PName</a> "value", <a>PmType</a> <a>Quantitative</a> ]
--         . <a>position</a> <a>Y</a> [ <a>PName</a> "density", <a>PmType</a> <a>Quantitative</a> ]
--         . <a>row</a> [ <a>FName</a> "measurement", <a>FmType</a> <a>Nominal</a> ]
--   
--   layer = <a>asSpec</a> [ trans [], enc [], <a>mark</a> <a>Area</a> [ <a>MOpacity</a> 0.7 ] ]
--   </pre>
density :: FieldName -> [DensityProperty] -> BuildTransformSpecs

-- | Configure the kernel density estimation process. Used by
--   <a>density</a>.
data DensityProperty

-- | Name the outputs of a density transform. The first argument is the
--   name of the field containing the samples and the second the name for
--   the field containing the density estimates.
--   
--   The defaults are <tt>"value"</tt> and <tt>"density"</tt> respectively.
DnAs :: FieldName -> FieldName -> DensityProperty

-- | The bandwidth (standard deviation) of the Gaussian kernel to be used
--   in the KDE. If not given, or set to 0, then <a>Scott's method</a> is
--   used.
DnBandwidth :: Double -> DensityProperty

-- | If <tt><a>True</a></tt> then the KDE generates counts, if
--   <tt><a>False</a></tt> it generates probabilities.
--   
--   The default is probabilities.
DnCounts :: Bool -> DensityProperty

-- | Should the density estimates be cumulative?
--   
--   The default is <tt><a>False</a></tt>.
DnCumulative :: Bool -> DensityProperty

-- | The domain (minimum to maximum) from which to sample a distribution
--   for the density estimation.
--   
--   The default is to use the full extent of the input values.
DnExtent :: Double -> Double -> DensityProperty

-- | The data fields to group by.
--   
--   The default is to use a single group containing all the data objects.
DnGroupBy :: [FieldName] -> DensityProperty

-- | The maximum number of samples to take from the extent domain.
--   
--   The default is 200.
DnMaxSteps :: Natural -> DensityProperty

-- | The minimum number of samples to take from the extent domain.
--   
--   The default is 25.
DnMinSteps :: Natural -> DensityProperty

-- | This overrides the <a>DnMinSteps</a> and <a>DnMaxSteps</a> options and
--   specified an exact number of steps to take from the extent domain.
--   
--   It can be used with <a>DnExtent</a> to ensure a consistent set of
--   sample points for stacked densities.
DnSteps :: Natural -> DensityProperty

-- | Generate a <i>loess</i> (locally-estimated scatterplot smoothing)
--   trendline through a pair of data fields.
--   
--   See also <a>regression</a>.
--   
--   The following example overlays the trendline generated by <a>loess</a>
--   (the "xsm", "ysm" points) on the raw points (assuming the data source
--   has fields called "xraw" and "yraw" for the independent and dependent
--   fields, respectively).
--   
--   <pre>
--   transLS = <a>transform</a>
--             . <a>loess</a> "yraw" "xraw" [ <a>LsAs</a> "xsm" "ysm" ]
--   
--   encRaw = <a>encoding</a>
--            . <a>position</a> <a>X</a> [ <a>PName</a> "xraw", <a>PmType</a> <a>Quantitative</a> ]
--            . <a>position</a> <a>Y</a> [ <a>PName</a> "yraw", <a>PmType</a> <a>Quantitative</a> ]
--   
--   encLS = <a>encoding</a>
--           . <a>position</a> <a>X</a> [ <a>PName</a> "xsm", <a>PmType</a> <a>Quantitative</a> ]
--           . <a>position</a> <a>Y</a> [ <a>PName</a> "ysm", <a>PmType</a> <a>Quantitative</a> ]
--   
--   layers = <a>layer</a> [ <a>asSpec</a> [ encRaw [], <a>mark</a> <a>Point</a> [ <a>MOpacity</a> 0.5 ] ]
--                  , <a>asSpec</a> [ transLS [], encLS [], <a>mark</a> <a>Line</a> [ <a>MColor</a> "firebrick" ] ]
--                  ]
--   </pre>
loess :: FieldName -> FieldName -> [LoessProperty] -> BuildTransformSpecs

-- | Configure the trend fitting used by the <a>loess</a> encoding.
data LoessProperty

-- | Name the outputs of a loess transform. The first argument is the name
--   of the field containing the smoothed independent variable and the
--   second the name for the field containing the smoothed dependent
--   variable.
--   
--   If not specified the original field names will be used.
LsAs :: FieldName -> FieldName -> LoessProperty

-- | The amount of smoothing. The value should be in the range 0 to 1,
--   inclusive.
--   
--   The default is 0.3.
LsBandwidth :: Double -> LoessProperty

-- | The data fields to group by.
--   
--   The default is to use a single group containing all the data objects.
LsGroupBy :: [FieldName] -> LoessProperty

-- | Generate a 2d regression model for smoothing and predicting data.
--   
--   See also <a>loess</a>.
--   
--   The following example overlays the points generated by
--   <a>regression</a> (the "xrg", "yrg" points) on the raw points
--   (assuming the data source has fields called "xraw" and "yraw" for the
--   independent and dependent fields, respectively).
--   
--   <pre>
--   transLS = <a>transform</a>
--             . <a>regression</a> "yraw" "xraw" [ <a>RgAs</a> "xrg" "yrg" ]
--   
--   encRaw = <a>encoding</a>
--            . <a>position</a> <a>X</a> [ <a>PName</a> "xraw", <a>PmType</a> <a>Quantitative</a> ]
--            . <a>position</a> <a>Y</a> [ <a>PName</a> "yraw", <a>PmType</a> <a>Quantitative</a> ]
--   
--   encLS = <a>encoding</a>
--           . <a>position</a> <a>X</a> [ <a>PName</a> "xrg", <a>PmType</a> <a>Quantitative</a> ]
--           . <a>position</a> <a>Y</a> [ <a>PName</a> "yrg", <a>PmType</a> <a>Quantitative</a> ]
--   
--   layers = <a>layer</a> [ <a>asSpec</a> [ encRaw [], <a>mark</a> <a>Point</a> [ <a>MOpacity</a> 0.5 ] ]
--                  , <a>asSpec</a> [ transLS [], encLS [], <a>mark</a> <a>Line</a> [ <a>MColor</a> "firebrick" ] ]
--                  ]
--   </pre>
regression :: FieldName -> FieldName -> [RegressionProperty] -> BuildTransformSpecs

-- | Configure the regression process (used by <a>regression</a>).
data RegressionProperty

-- | Name the outputs of the regression analysis. The first argument is the
--   name of the field containing the independent variable, the second the
--   dependent variable.
--   
--   If not specified the original field names will be used.
RgAs :: FieldName -> FieldName -> RegressionProperty

-- | The domain (minimum to maximum) over which to estimate the dependent
--   variable in the regression.
--   
--   The default is to use the full extent of the input values.
RgExtent :: Double -> Double -> RegressionProperty

-- | The data fields to group by.
--   
--   The default is to use a single group containing all the data objects.
RgGroupBy :: [FieldName] -> RegressionProperty

-- | The type of regression model to use.
RgMethod :: RegressionMethod -> RegressionProperty

-- | The order of the polynomial model.
--   
--   This is only used if <tt><a>RgMethod</a> <a>RgPoly</a></tt> is set.
RgOrder :: Natural -> RegressionProperty

-- | Should the transform return the regression model parameters, one
--   object per group, rather than the trend line points.
--   
--   If set, the returned objects include a <tt>"coef"</tt> array of fitted
--   coefficient values, starting with the intercept term and then
--   including terms of increasing order, and a <tt>"rSquared"</tt> value,
--   indicating the total variance explained by the model.
--   
--   The default is <tt><a>False</a></tt>.
RgParams :: Bool -> RegressionProperty

-- | The functional form of the regression analysis. Used by
--   <a>RgMethod</a>.
data RegressionMethod

-- | Linear regression.
RgLinear :: RegressionMethod

-- | Logarithmic regression.
RgLog :: RegressionMethod

-- | Exponential regression.
RgExp :: RegressionMethod

-- | Power regression.
RgPow :: RegressionMethod

-- | Quadratic regression.
RgQuad :: RegressionMethod

-- | A polynomial. The order to use is given by the <a>RgOrder</a>
--   constructor, and defaults to 3.
RgPoly :: RegressionMethod

-- | Calculate quantile values from an input data stream. This can be
--   useful for examining distributional properties of a data stream, and
--   for creating <a>Q-Q plots</a>.
--   
--   As an example:
--   
--   <pre>
--   let dvals = <a>dataFromUrl</a> "data/normal-2d.json" []
--   
--       trans = <a>transform</a>
--               . <a>quantile</a> "u" [ <a>QtStep</a> 0.01, <a>QtAs</a> "p" "v" ]
--               . <a>calculateAs</a> "quantileUniform(datum.p)" "unif"
--               . <a>calculateAs</a> "quantileNormal(datum.p)" "norm"
--   
--       enc x y = <a>encoding</a>
--                 . <a>position</a> <a>X</a> [ <a>PName</a> x, <a>PmType</a> <a>Quantitative</a> ]
--                 . <a>position</a> <a>Y</a> [ <a>PName</a> y, <a>PmType</a> <a>Quantitative</a> ]
--   
--       leftSpec = <a>asSpec</a> [ <a>mark</a> <a>Point</a> [], enc "unif" "v" [] ]
--       rightSpec = <a>asSpec</a> [ <a>mark</a> <a>Point</a> [], enc "norm" "v" [] ]
--   
--   in <a>toVegaLite</a> [ dvals, trans [], <a>hConcat</a> [ leftSpec, rightSpec ] ]
--   </pre>
quantile :: FieldName -> [QuantileProperty] -> BuildTransformSpecs

-- | Configure the quantile analysis performed by <a>quantile</a>.
data QuantileProperty

-- | Name the fields used to store the calculated probability and
--   associated quantile values.
--   
--   The defaults are <tt>"prob"</tt> and <tt>"value"</tt>.
QtAs :: FieldName -> FieldName -> QuantileProperty

-- | The data fields to group by.
--   
--   The default is to use a single group containing all the data objects.
QtGroupBy :: [FieldName] -> QuantileProperty

-- | The probabilites (measured in the range 0-1) for which to compute
--   quantile values.
--   
--   The default is to use a step size of 0.01, or the <a>QtStep</a> value
--   if given.
QtProbs :: [Double] -> QuantileProperty

-- | The interval between probabilities when performing a quantile
--   transformation.
--   
--   All value from half the given step size to 1 will be sampled, and is
--   only used if <a>QtProbs</a> is not set.
QtStep :: Double -> QuantileProperty

-- | Window transform for performing calculations over sorted groups of
--   data objects such as ranking, lead/lag analysis, running sums and
--   averages.
--   
--   <pre>
--   <a>transform</a>
--       . <a>window</a> [ ( [ <a>WAggregateOp</a> <a>Sum</a>, <a>WField</a> "Time" ], "TotalTime" ) ]
--                [ <a>WFrame</a> Nothing Nothing ]
--   </pre>
window :: [([Window], FieldName)] -> [WindowProperty] -> BuildTransformSpecs

-- | Window transformations.
data Window

-- | An aggregrate operation to be used in a window transformation.
WAggregateOp :: Operation -> Window

-- | Window-specific operation to be used in a window transformation.
WOp :: WOperation -> Window

-- | Numeric parameter for window-only operations that can be parameterised
--   (<a>Ntile</a>, <a>Lag</a>, <a>Lead</a> and <a>NthValue</a>).
WParam :: Int -> Window

-- | Field for which to compute a window operation. Not needed for
--   operations that do not apply to fields such as <a>Count</a>,
--   <a>Rank</a>, and <a>DenseRank</a>.
WField :: FieldName -> Window

-- | Window-specific operation for transformations (for use with
--   <a>WOp</a>).
data WOperation

-- | Assign consecutive row number to values in a data object to be applied
--   in a window transform.
RowNumber :: WOperation

-- | Rank function to be applied in a window transform.
Rank :: WOperation

-- | Dense rank function to be applied in a window transform.
DenseRank :: WOperation

-- | Percentile of values in a sliding window to be applied in a window
--   transform.
PercentRank :: WOperation

-- | Cumulative distribution function to be applied in a window transform.
CumeDist :: WOperation

-- | Value preceding the current object in a sliding window to be applied
--   in a window transform.
Ntile :: WOperation

-- | Value preceding the current object in a sliding window to be applied
--   in a window transform.
Lag :: WOperation

-- | Value following the current object in a sliding window to be applied
--   in a window transform.
Lead :: WOperation

-- | First value in a sliding window to be applied in a window transform.
FirstValue :: WOperation

-- | Last value in a sliding window to be applied in a window transform.
LastValue :: WOperation

-- | Nth value in a sliding window to be applied in a window transform.
NthValue :: WOperation

-- | Properties for a window transform.
data WindowProperty

-- | Moving window for use by a window transform. When a number is given,
--   via <tt>Just</tt>, then it indicates the offset from the current data
--   object. A <tt>Nothing</tt> indicates an un-bounded number of rows
--   preceding or following the current data object.
WFrame :: Maybe Int -> Maybe Int -> WindowProperty

-- | Should the sliding window in a window transform ignore peer values
--   (those considered identical by the sort criteria).
WIgnorePeers :: Bool -> WindowProperty

-- | The fields for partitioning data objects in a window transform into
--   separate windows. If not specified, all points will be in a single
--   group.
WGroupBy :: [FieldName] -> WindowProperty

-- | Comparator for sorting data objects within a window transform.
WSort :: [SortField] -> WindowProperty

-- | Create a mark specification. All marks must have a type (first
--   parameter) and can optionally be customised with a list of mark
--   properties such as interpolation style for lines. To keep the default
--   style for the mark, just provide an empty list for the second
--   parameter.
--   
--   <pre>
--   <a>mark</a> <a>Circle</a> []
--   <a>mark</a> <a>Line</a> [<a>MInterpolate</a> <a>StepAfter</a>]
--   </pre>
--   
--   <pre>
--   let dvals = <a>dataFromUrl</a> "city.json" [<a>TopojsonFeature</a> "boroughs"] []
--       markOpts = <a>mark</a> <a>Geoshape</a> [<a>MFill</a> "lightgrey", <a>MStroke</a> "white"]
--   in <a>toVegaLite</a> [dvals, markOpts]
--   </pre>
mark :: Mark -> [MarkProperty] -> PropertySpec

-- | Type of visual mark used to represent data in the visualization.
--   
--   The properties of the mark can be changed with the <a>MarkProperty</a>
--   constructors - such as <a>MHeight</a> and <a>MWidth</a> - although not
--   all properties apply to all marks.
data Mark

-- | An arc mark.
Arc :: Mark

-- | An <a>area mark</a> for representing a series of data elements, such
--   as in a stacked area chart or streamgraph.
Area :: Mark

-- | <a>Bar mark</a> for histograms, bar charts etc.
Bar :: Mark

-- | <a>Boxplot composite mark</a> for showing summaries of statistical
--   distributions.
--   
--   Tick marks can be added using <a>MTicks</a> and outliers turned off
--   with <a>MNoOutliers</a> or configured with <a>MOutliers</a>. For
--   example:
--   
--   <pre>
--   <a>mark</a> Boxplot
--       [ <a>MTicks</a> [ <a>MColor</a> "black", <a>MSize</a> 8 ]
--       , <a>MBox</a> [ <a>MFill</a> "grey" ]
--       , <a>MOutliers</a> [ <a>MColor</a> "firebrick" ]
--   ]
--   
--   </pre>
--   
--   The range of the box plot is controlled with <a>MExtent</a> with the
--   <a>IqrScale</a> or <a>ExRange</a> options (the default is <tt>IqrScale
--   1.5</tt>).
Boxplot :: Mark

-- | <a>Circle mark</a> for representing points.
Circle :: Mark

-- | <a>Errorbar composite mark</a> for showing summaries of variation
--   along a signal. By default no ticks are drawn. To add ticks with
--   default properties use <tt><a>MTicks</a> []</tt>, otherwise supply a
--   list of configuration options:
--   
--   <pre>
--   <a>mark</a> ErrorBar [ <a>MTicks</a> [ <a>MColor</a> "black", <a>MSize</a> 8 ] ]
--   
--   </pre>
ErrorBar :: Mark

-- | <a>Errorband composite mark</a> for showing summaries of variation
--   along a signal. By default no border is drawn. To add a border with
--   default properties use <tt><a>MBorders</a> []</tt>, otherwise supply a
--   list of configuration options:
--   
--   <pre>
--   <a>mark</a> ErrorBand [ <a>MBorders</a> [ <a>MColor</a> "black", <a>MStrokeWidth</a> 0.5 ] ]
--   
--   </pre>
ErrorBand :: Mark

-- | <a>Geoshape</a> determined by geographically referenced coordinates.
Geoshape :: Mark

-- | <a>Vega Lite image mark</a>, where the image to display is given via
--   the <a>url</a> channel, and the width and height defined by the
--   <a>MWidth</a> and <a>MHeight</a> properties.
Image :: Mark

-- | <a>Line mark</a> for symbolising a sequence of values.
Line :: Mark

-- | <a>Point mark</a> for symbolising a data point with a symbol.
Point :: Mark

-- | <a>Rectangle mark</a>.
Rect :: Mark

-- | <a>Rule line</a> connecting two vertices.
Rule :: Mark

-- | <a>Square mark</a> for symbolising points.
Square :: Mark

-- | <a>Text mark</a> to be displayed at some point location.
Text :: Mark

-- | Short line - <a>tick</a> - mark for symbolising point locations.
Tick :: Mark

-- | <a>Trail mark</a> (line with variable width along its length).
Trail :: Mark

-- | Properties for customising the appearance of a mark. For details see
--   the <a>Vega-Lite documentation</a>.
--   
--   Not all properties are valid for each mark type.
--   
--   Some properties which take a list - such as <a>MBox</a> - will create
--   a <tt>true</tt> value if the list is empty, and <tt>false</tt> if the
--   <tt>"No"</tt> variant of the constructor is used (e.g. <a>MNoBox</a>).
--   
--   In <tt>version 0.5.0.0</tt> the <a>MRemoveInvalid</a> constructor was
--   added, which replaces the <tt>RemoveInvalid</tt> constructor of
--   <tt>ConfigurationProperty</tt>, and the <tt>MShortTimeLabels</tt>
--   constuctor was removed.
data MarkProperty

-- | Horizontal alignment of a text mark.
MAlign :: HAlign -> MarkProperty

-- | Rotation angle of a text, point, or square marks.
MAngle :: Angle -> MarkProperty

-- | Should <a>ARIA attributes</a> be included (SVG output only).
--   
--   If False, the "aria-hidden" attribute will be set on the output SVG
--   element, removing the mark item from the ARIA accessibility tree.
MAria :: Bool -> MarkProperty

-- | A text description of the mark item for <a>ARIA accessibility</a> (SVG
--   output only).
--   
--   If specified, this property determines the <a>"aria-label"
--   attribute</a>.
MAriaDescription :: Text -> MarkProperty

-- | Sets the type of user interface element of the mark item for <a>ARIA
--   accessibility</a> (SVG output only).
--   
--   If specified, this property determines the "role" attribute.
--   
--   Warning: this property is experimental and may be changed in the
--   future.
MAriaRole :: Text -> MarkProperty

-- | A human-readable, author-localized description for the role of the
--   mark item for <a>ARIA accessibility</a> (SVG output only).
--   
--   If specified, this property determines the "aria-roledescription"
--   attribute.
--   
--   Warning: this property is experimental and may be changed in the
--   future.
MAriaRoleDescription :: Text -> MarkProperty

-- | Should the aspect ratio of an <a>Image</a> mark be preserved?
MAspect :: Bool -> MarkProperty

-- | Band size of a bar mark.
MBandSize :: Double -> MarkProperty

-- | Vertical alignment of a text mark.
MBaseline :: VAlign -> MarkProperty

-- | Offset between bars for a binned field using a bar mark.
--   
--   The ideal value for this is either <tt>0</tt> (preferred by
--   statisticians) or <tt>1</tt> (the Vega-Lite default value, D3 example
--   style).
MBinSpacing :: Double -> MarkProperty

-- | How should the item be blended with its background?
--   
--   Added in Vega-Lite 4.6.0.
MBlend :: BlendMode -> MarkProperty

-- | Border properties for an <a>ErrorBand</a> mark. See also
--   <a>MNoBorders</a>.
MBorders :: [MarkProperty] -> MarkProperty

-- | Do not draw a border for an <a>ErrorBand</a> mark.
MNoBorders :: MarkProperty

-- | Box-symbol properties for a <a>Boxplot</a> mark. See also
--   <a>MNoBox</a>.
MBox :: [MarkProperty] -> MarkProperty

-- | Do not draw outliers with the <a>Boxplot</a> mark.
MNoBox :: MarkProperty

-- | Should a mark be clipped to the enclosing group's dimensions.
MClip :: Bool -> MarkProperty

-- | Default color of a mark. Note that <a>MFill</a> and <a>MStroke</a>
--   have higher precedence and will override this if specified.
MColor :: Color -> MarkProperty

-- | The color gradient to apply to a mark. The first argument determines
--   its type, the second is the list of color interpolation points, and
--   the third allows for customization.
--   
--   <pre>
--   <a>MColorGradient</a>
--       <a>GrRadial</a>
--       [ ( 0, "red" ), ( 1, "blue" ) ]
--       [ ]
--   
--   </pre>
MColorGradient :: ColorGradient -> GradientStops -> [GradientProperty] -> MarkProperty

-- | Corner radius of all corners of a rectangular mark, in pixels.
--   
--   The default is 0. This value is over-ridden by any of
--   <a>MCornerRadiusTL</a>, <a>MCornerRadiusTR</a>,
--   <a>MCornerRadiusBL</a>, or <a>MCornerRadiusBR</a>.
MCornerRadius :: Double -> MarkProperty

-- | The radius used for bars, in pixels. For vertical bars it defines the
--   top-left and top-right radius, and for horizontal bars it is the
--   top-right and bottom-right.
--   
--   For an example, see the <a>Vega-Lite documentation</a>.
MCornerRadiusEnd :: Double -> MarkProperty

-- | Top-left corner radius of a rectangular mark, in pixels.
--   
--   The default is 0.
MCornerRadiusTL :: Double -> MarkProperty

-- | Top-right corner radius of a rectangular mark, in pixels.
--   
--   The default is 0.
MCornerRadiusTR :: Double -> MarkProperty

-- | Bottom-left corner radius of a rectangular mark, in pixels.
--   
--   The default is 0.
MCornerRadiusBL :: Double -> MarkProperty

-- | Bottom-right corner radius of a rectangular mark, in pixels.
--   
--   The default is 0.
MCornerRadiusBR :: Double -> MarkProperty

-- | Cursor to be associated with a hyperlink mark.
MCursor :: Cursor -> MarkProperty

-- | Direction of the text. This property determines which side of the
--   label is truncated by the <a>MLimit</a> parameter. See also
--   <a>MEllipsis</a>.
--   
--   The default is <a>LTR</a>.
MDir :: TextDirection -> MarkProperty

-- | Continuous band size of a bar mark.
MContinuousBandSize :: Double -> MarkProperty

-- | Discrete band size of a bar mark.
MDiscreteBandSize :: Double -> MarkProperty

-- | Horizontal offset between a text mark and its anchor.
MdX :: Double -> MarkProperty

-- | Vertical offset between a text mark and its anchor.
MdY :: Double -> MarkProperty

-- | The ellipsis string for text truncated in response to <a>MLimit</a>.
--   See also <a>MDir</a>.
--   
--   The default is <tt>"…"</tt>.
MEllipsis :: Text -> MarkProperty

-- | Extent of whiskers used with <a>Boxplot</a>, <a>ErrorBar</a>, and
--   <a>ErrorBand</a> marks.
MExtent :: MarkErrorExtent -> MarkProperty

-- | Default fill color of a mark.
--   
--   This was changed to use the <tt>Color</tt> type alias in version
--   <tt>0.5.0.0</tt>.
MFill :: Color -> MarkProperty

-- | Should a mark's color should be used as the fill color instead of
--   stroke color.
MFilled :: Bool -> MarkProperty

-- | The color gradient to apply to the interior of a mark. The first
--   argument determines its type, the second is the list of color
--   interpolation points, and the third allows for customization.
--   
--   <pre>
--   <a>MFillGradient</a>
--       <a>GrLinear</a>
--       [ ( 0, "orange" ), ( 1, "green" ) ]
--       [ ]
--   
--   </pre>
MFillGradient :: ColorGradient -> GradientStops -> [GradientProperty] -> MarkProperty

-- | Fill opacity of a mark.
MFillOpacity :: Opacity -> MarkProperty

-- | Font of a text mark. Can be any font name made accessible via a css
--   file (or a generic font like "serif", "monospace" etc.).
MFont :: Text -> MarkProperty

-- | Font size, in pixels, used by a text mark.
MFontSize :: Double -> MarkProperty

-- | Font style (e.g. "italic") used by a text mark.
MFontStyle :: Text -> MarkProperty

-- | Font weight used by a text mark.
MFontWeight :: FontWeight -> MarkProperty

-- | Explicitly set the height of a mark. See also <a>MWidth</a>.
MHeight :: Double -> MarkProperty

-- | Hyperlink to be associated with a mark making it a clickable
--   hyperlink.
MHRef :: Text -> MarkProperty

-- | The inner radius, in pixels, of arc marks. It is an alias for
--   <a>MRadius2</a>.
MInnerRadius :: Double -> MarkProperty

-- | Interpolation method used by line and area marks.
MInterpolate :: MarkInterpolation -> MarkProperty

-- | The maximum length of the text mark in pixels. If the text is larger
--   then it will be truncated, with the truncation controlled by
--   <a>MEllipsis</a> and <a>MDir</a>.
--   
--   The default value is <tt>0</tt>, which indicates no truncation.
MLimit :: Double -> MarkProperty

-- | How should the vertices of an area mark be joined?
MLine :: LineMarker -> MarkProperty

-- | A delimeter, such as a newline character, upon which to break text
--   strings into multiple lines.
--   
--   Note that <tt>hvega</tt> automatically breaks text on the <tt>\n</tt>
--   character, which will over-ride this setting. Therefore setting this
--   only makes sense if the text does not contain <tt>n</tt> characters.
MLineBreak :: Text -> MarkProperty

-- | The height, in pixels, of each line of text in a multi-line text mark.
MLineHeight :: Double -> MarkProperty

-- | Median-line properties for the <a>Boxplot</a> mark. See also
--   <a>MNoMedian</a>.
MMedian :: [MarkProperty] -> MarkProperty

-- | Do not draw the median of the <a>Boxplot</a> mark.
MNoMedian :: MarkProperty

-- | Overall opacity of a mark in the range 0 to 1.
MOpacity :: Opacity -> MarkProperty

-- | Ordering of vertices in a line or area mark. If <tt>True</tt> (the
--   default), the order is determined by measurement type or order
--   channel. If <tt>False</tt>, the original data order is used.
MOrder :: Bool -> MarkProperty

-- | Orientation of a non-stacked bar, tick, area or line mark.
MOrient :: Orientation -> MarkProperty

-- | The outer radius, in pixels, of arc marks. It is an alias for
--   <a>MRadius</a>.
MOuterRadius :: Double -> MarkProperty

-- | Outlier symbol properties for the <a>Boxplot</a> mark. See also
--   <a>MNoOutliers</a>.
MOutliers :: [MarkProperty] -> MarkProperty

-- | Do not draw outliers with the <a>Boxplot</a> mark.
MNoOutliers :: MarkProperty

-- | The angular padding apploed to sides of the arc, in radians.
MPadAngle :: Double -> MarkProperty

-- | Appearance of a point marker joining the vertices of a line or area
--   mark.
MPoint :: PointMarker -> MarkProperty

-- | Polar coordinate radial offset of a text mark, in pixels, from its
--   origin. For an arc mark this defines the outer radius, in pixels.
MRadius :: Double -> MarkProperty

-- | The inner radius, in pixels, of an arc mark.
MRadius2 :: Double -> MarkProperty

-- | The offset for <a>MRadius</a>.
MRadiusOffset :: Double -> MarkProperty

-- | The offset for <a>MRadius2</a>.
MRadius2Offset :: Double -> MarkProperty

-- | The default handling of invalid (<tt>null</tt> and <tt>NaN</tt>)
--   values. If <tt>True</tt>, invalid values are skipped or filtered out
--   when represented as marks, otherwise they are taken to be <tt>0</tt>.
--   
--   This replaces <tt>RemoveInvalid</tt> from <a>ConfigurationProperty</a>
--   in version 0.4 of <tt>hvega</tt>.
MRemoveInvalid :: Bool -> MarkProperty

-- | Rule (main line) properties for the <a>ErrorBar</a> and <a>Boxplot</a>
--   marks. See also <a>MNoRule</a>.
MRule :: [MarkProperty] -> MarkProperty

-- | Do not draw the rule for <a>ErrorBar</a> and <a>Boxplot</a> marks.
MNoRule :: MarkProperty

-- | Shape of a point mark.
MShape :: Symbol -> MarkProperty

-- | Size of a mark.
MSize :: Double -> MarkProperty

-- | Default stroke color of a mark.
--   
--   This was changed to use the <tt>Color</tt> type alias in version
--   <tt>0.5.0.0</tt>.
MStroke :: Color -> MarkProperty

-- | Cap style of a mark's stroke.
MStrokeCap :: StrokeCap -> MarkProperty

-- | The stroke dash pattern used by a mark.
MStrokeDash :: DashStyle -> MarkProperty

-- | The offset for the dash pattern.
MStrokeDashOffset :: DashOffset -> MarkProperty

-- | The color gradient to apply to the boundary of a mark. The first
--   argument determines its type, the second is the list of color
--   interpolation points, and the third allows for customization.
--   
--   <pre>
--   <a>MStrokeGradient</a>
--       <a>GrLinear</a>
--       [ ( 0, "pink" ), ( 1, "violet" ) ]
--       [ ]
--   
--   </pre>
MStrokeGradient :: ColorGradient -> GradientStops -> [GradientProperty] -> MarkProperty

-- | Line segment join style of a mark's stroke.
MStrokeJoin :: StrokeJoin -> MarkProperty

-- | Mitre limit at which to bevel a join between line segments of a mark's
--   stroke.
MStrokeMiterLimit :: Double -> MarkProperty

-- | Stroke opacity of a mark in the range 0 to 1.
MStrokeOpacity :: Opacity -> MarkProperty

-- | Stroke width of a mark in pixels.
MStrokeWidth :: Double -> MarkProperty

-- | Names of custom styles to apply to a mark. Each should refer to a
--   named style defined in a separate style configuration (using
--   <a>MarkNamedStyles</a>).
MStyle :: [StyleLabel] -> MarkProperty

-- | Interpolation tension used when interpolating line and area marks.
MTension :: Double -> MarkProperty

-- | Placeholder text for a text mark for when a text channel is not
--   specified.
--   
--   See <a>MTexts</a> for supplying an array of text values.
MText :: Text -> MarkProperty

-- | Placeholder text for a text mark for when a text channel is not
--   specified.
--   
--   See <a>MText</a> for supplying a single text value.
MTexts :: [Text] -> MarkProperty

-- | Polar coordinate angle (clockwise from north in radians) of a text
--   mark from the origin (determined by its x and y properties). For arc
--   marks, the arc length in radians if theta2 is not specified, otherwise
--   the start arc angle, where a value of 0 refers to "up" or "north", and
--   increases clockwise).
MTheta :: Double -> MarkProperty

-- | The end angle of arc marks, in radians. A value of 0 indicated "up" or
--   "north", and increases clockwise.
MTheta2 :: Double -> MarkProperty

-- | Offset for <a>MTheta</a>.
MThetaOffset :: Double -> MarkProperty

-- | Offset for <a>MTheta2</a>.
MTheta2Offset :: Double -> MarkProperty

-- | Thickness of a tick mark.
MThickness :: Double -> MarkProperty

-- | Tick properties for the <a>ErrorBar</a> or <a>Boxplot</a> mark. See
--   also <a>MNoTicks</a>.
MTicks :: [MarkProperty] -> MarkProperty

-- | Do not draw ticks for <a>ErrorBar</a> or <a>Boxplot</a> marks.
--   
--   The default behavior for ticks is for them to not be drawn, so
--   <tt>MNoTicks</tt> is only needed if the visualization contains
--   something like:
--   
--   <pre>
--   <a>configure</a> (<a>configuration</a> (<a>BoxplotStyle</a> [<a>MTicks</a> []] []))
--   </pre>
MNoTicks :: MarkProperty

-- | The default relative band size for a time unit.
--   
--   If set to 1 the bandwidth of the marks will be equal to the time unit
--   band step, and if set to 0.5 they will be half that.
MTimeUnitBand :: Double -> MarkProperty

-- | The default relative band position for a time unit.
--   
--   If set to 0 the marks will be positioned at the start of the band, and
--   if set to 0.5 they will be in the middle.
MTimeUnitBandPosition :: Double -> MarkProperty

-- | The tooltip content for a mark.
MTooltip :: TooltipContent -> MarkProperty

-- | Explicitly set the width of a mark (e.g. the bar width). See also
--   <a>MHeight</a>.
MWidth :: Double -> MarkProperty

-- | X position of a mark. See also <a>MXWidth</a>.
MX :: Double -> MarkProperty

-- | X2 position of a mark. This is the secondary position for lines and
--   area marks). See also <a>MX2Width</a>.
MX2 :: Double -> MarkProperty

-- | X position offset of a mark.
MXOffset :: Double -> MarkProperty

-- | X2 position offset of a mark.
MX2Offset :: Double -> MarkProperty

-- | Y position of a mark. See also <a>MYHeight</a>.
MY :: Double -> MarkProperty

-- | Y2 position of a mark. This is the secondary position for lines and
--   area marks). See also <a>MY2Height</a>.
MY2 :: Double -> MarkProperty

-- | Y position offset of a mark.
MYOffset :: Double -> MarkProperty

-- | Y2 position offset of a mark.
MY2Offset :: Double -> MarkProperty

-- | Specify the X coordinate as the "width" of the plot.
MXWidth :: MarkProperty

-- | Specify the X2 coordinate as the "width" of the plot.
MX2Width :: MarkProperty

-- | Specify the Y coordinate as the "height" of the plot.
MYHeight :: MarkProperty

-- | Specify the Y2 coordinate as the "height" of the plot.
MY2Height :: MarkProperty

-- | How are strokes capped? This is used with <a>MStrokeCap</a>,
--   <a>VBStrokeCap</a>, and <a>ViewStrokeCap</a>.
data StrokeCap

-- | Butt stroke cap.
CButt :: StrokeCap

-- | Rounded stroke cap.
CRound :: StrokeCap

-- | Square stroke cap.
CSquare :: StrokeCap

-- | How are strokes joined? This is used with <a>MStrokeJoin</a>,
--   <a>VBStrokeJoin</a>, and <a>ViewStrokeJoin</a>.
data StrokeJoin

-- | Mitred stroke join.
JMiter :: StrokeJoin

-- | Rounded stroke join.
JRound :: StrokeJoin

-- | Bevelled stroke join.
JBevel :: StrokeJoin

-- | The orientation of an item. This is used with: <a>BLeLDirection</a>,
--   <a>LDirection</a>, <a>LeDirection</a>, <a>LeGradientDirection</a>,
--   <a>LeLDirection</a>, <a>LeSymbolDirection</a>, and <a>MOrient</a>.
--   
--   In <tt>0.4.0.0</tt> this was renamed from <tt>MarkOrientation</tt> to
--   <a>Orientation</a>.
data Orientation

-- | Display horizontally.
Horizontal :: Orientation

-- | Display vertically.
Vertical :: Orientation

-- | Indicates the mark interpolation style. See the <a>Vega-Lite
--   documentation</a> for details.
data MarkInterpolation

-- | A B-spline interpolation between points anchored at the first and last
--   points.
Basis :: MarkInterpolation

-- | Closed B-spline interpolation between points forming a polygon.
BasisClosed :: MarkInterpolation

-- | Open B-spline interpolation between points, which may not intersect
--   the first and last points.
BasisOpen :: MarkInterpolation

-- | Bundle curve interpolation between points. This is equivalent to
--   <a>Basis</a> except that the tension parameter is used to straighten
--   the spline.
Bundle :: MarkInterpolation

-- | Cardinal spline interpolation between points anchored at the first and
--   last points.
Cardinal :: MarkInterpolation

-- | Closed Cardinal spline interpolation between points forming a polygon.
CardinalClosed :: MarkInterpolation

-- | Open Cardinal spline interpolation between points, which may not
--   intersect the first and last points.
CardinalOpen :: MarkInterpolation

-- | Linear interpolation between points.
Linear :: MarkInterpolation

-- | Closed linear interpolaiton between points forming a polygon.
LinearClosed :: MarkInterpolation

-- | Cubic spline interpolation that preserves monotonicity between points.
Monotone :: MarkInterpolation

-- | Piecewise (stepped) constant interpolation function after each point
--   in a sequence.
StepAfter :: MarkInterpolation

-- | Piecewise (stepped) constant interpolation function before each point
--   in a sequence.
StepBefore :: MarkInterpolation

-- | Piecewise (stepped) constant interpolation function centred on each
--   point in a sequence.
Stepwise :: MarkInterpolation

-- | Identifies the type of symbol used with the <a>Point</a> mark type. It
--   is used with <a>MShape</a>, <a>LeSymbolType</a>, and
--   <a>LSymbolType</a>.
--   
--   In version <tt>0.4.0.0</tt> all constructors were changed to start
--   with <tt>Sym</tt>.
data Symbol

-- | Specify a circular symbol for a shape mark.
SymCircle :: Symbol

-- | Specify a square symbol for a shape mark.
SymSquare :: Symbol

-- | Specify a cross symbol for a shape mark.
SymCross :: Symbol

-- | Specify a diamond symbol for a shape mark.
SymDiamond :: Symbol

-- | Specify an upward-triangular symbol for a shape mark.
SymTriangleUp :: Symbol

-- | Specify a downward-triangular symbol for a shape mark.
SymTriangleDown :: Symbol

-- | Specify an right-facing triangular symbol for a shape mark.
SymTriangleRight :: Symbol

-- | Specify an left-facing triangular symbol for a shape mark.
SymTriangleLeft :: Symbol

-- | The line symbol.
SymStroke :: Symbol

-- | Centered directional shape.
SymArrow :: Symbol

-- | Centered directional shape. It is not clear what difference this is to
--   <a>SymTriangleUp</a>.
SymTriangle :: Symbol

-- | Centered directional shape.
SymWedge :: Symbol

-- | A custom symbol shape as an <a>SVG path description</a>.
--   
--   For correct sizing, the path should be defined within a square
--   bounding box, defined on an axis of -1 to 1 for both dimensions.
SymPath :: Text -> Symbol

-- | The properties of a point marker on a line or area mark. For use with
--   <a>MPoint</a>.
data PointMarker

-- | A transparent marker is used, which can be useful for interactive
--   selections.
PMTransparent :: PointMarker

-- | No marker to be shown.
PMNone :: PointMarker

-- | The properties of the marks to be shown at the points.
--   
--   Use an empty list to use a filled point with default properties.
PMMarker :: [MarkProperty] -> PointMarker

-- | Appearance of a line marker that is overlaid on an area mark. For use
--   with <a>MLine</a>.
data LineMarker

-- | No line marker.
LMNone :: LineMarker

-- | The properties of a line marker overlain on an area mark.
--   
--   Use an empty list to use a filled point with default properties.
LMMarker :: [MarkProperty] -> LineMarker

-- | Indicates the extent of the rule used for the error bar. See
--   <a>Vega-Lite documentation</a> for details.
--   
--   Note that not all options are valid for all mark types.
--   
--   This is called <tt>SummaryExtent</tt> in Elm and the constructors also
--   have different names.
data MarkErrorExtent

-- | Band extent between the 95% confidence intervals of a distribution.
ConfidenceInterval :: MarkErrorExtent

-- | Band extent as the standard error about the mean of a distribution.
StdErr :: MarkErrorExtent

-- | Band extent as the standard deviation of a distribution.
StdDev :: MarkErrorExtent

-- | Band extent between the lower and upper quartiles of a distribution
--   (the inter-quartile range, q1 to q3).
Iqr :: MarkErrorExtent

-- | Band extent between the minimum and maximum values in a distribution.
ExRange :: MarkErrorExtent

-- | A scaling of the interquartile range to be used as whiskers in a
--   <a>Boxplot</a>. For example <tt>IqrScale 1.5</tt> would extend
--   whiskers to ±1.5x the IQR from the mean.
IqrScale :: Double -> MarkErrorExtent

-- | This is used with <a>MTooltip</a> and can be used with <a>mark</a> or
--   <a>MarkStyle</a>.
data TooltipContent

-- | When enabled, tooltips are generated by the encoding (this is the
--   default).
--   
--   For example:
--   
--   <pre>
--   <a>mark</a> <a>Circle</a> [<a>MTooltip</a> <a>TTEncoding</a>]
--   </pre>
TTEncoding :: TooltipContent

-- | Tooltips are generated by all fields in the underlying data.
--   
--   For example:
--   
--   <pre>
--   <a>mark</a> <a>Circle</a> [<a>MTooltip</a> <a>TTData</a>]
--   </pre>
TTData :: TooltipContent

-- | Disable tooltips. This is the default behavior in Vega-Lite 4, and can
--   also be achieved by adding an encoding of <tt><a>tooltip</a> []</tt>.
--   
--   For example:
--   
--   <pre>
--   <a>mark</a> <a>Circle</a> [<a>MTooltip</a> <a>TTNone</a>]
--   </pre>
TTNone :: TooltipContent

-- | Define the form of the <a>color gradient</a> (for use with
--   <a>MColorGradient</a> and <a>MFillGradient</a>).
data ColorGradient

-- | A linear gradient.
GrLinear :: ColorGradient

-- | A radial gradient.
GrRadial :: ColorGradient

-- | Control the appearance of the gradient. Used by <a>MColorGradient</a>,
--   <a>MFillGradient</a>, and <a>MStrokeGradient</a>.
data GradientProperty

-- | The start of the color gradient (X axis); for radial gradients it
--   represents the center of the inner circle.
--   
--   The default for linear gradients is 0, and for radial gradients it is
--   0.5.
GrX1 :: GradientCoord -> GradientProperty

-- | The start of the color gradient (Y axis); for radial gradients it
--   represents the center of the inner circle.
--   
--   The default for linear gradients is 0, and for radial gradients it is
--   0.5.
GrY1 :: GradientCoord -> GradientProperty

-- | The end of the color gradient (X axis); for radial gradients it
--   represents the center of the outer circle.
--   
--   The default for linear gradients is 1, and for radial gradients it is
--   0.5.
GrX2 :: GradientCoord -> GradientProperty

-- | The end of the color gradient (Y axis); for radial gradients it
--   represents the center of the outer circle.
--   
--   The default for linear gradients is 1, and for radial gradients it is
--   0.5.
GrY2 :: GradientCoord -> GradientProperty

-- | The radius of the inner circle (radial color gradients only). The
--   default is 0.
GrR1 :: GradientCoord -> GradientProperty

-- | The radius of the outer circle (radial color gradients only). The
--   default is 0.5.
GrR2 :: GradientCoord -> GradientProperty

-- | Determine the direction to draw the text.
--   
--   Used by <a>MDir</a>.
data TextDirection

-- | Left to right.
LTR :: TextDirection

-- | Right to left.
RTL :: TextDirection

-- | The blend mode for drawing an item on its background. This is used
--   with <a>MBlend</a>.
--   
--   This is based on CSS <a>mix-blend-mode</a> and the default is
--   <a>BMNormal</a>.
--   
--   Added in Vega-Lite 4.6.0.
data BlendMode

-- | The default behavior for Vega-Lite, which is the <tt>"normal"</tt> CSS
--   mix-blend-mode for SVG output and <tt>"source-over"</tt> for Canvas
--   output (this constructor creates a <tt>null</tt> value in the JON
--   output).
BMNormal :: BlendMode

-- | <tt>multiply</tt> mode.
BMMultiply :: BlendMode

-- | <tt>screen</tt> mode.
BMScreen :: BlendMode

-- | <tt>overlay</tt> mode.
BMOverlay :: BlendMode

-- | <tt>darken</tt> mode.
BMDarken :: BlendMode

-- | <tt>lighten</tt> mode.
BMLighten :: BlendMode

-- | <tt>color-dodge</tt> mode.
BMColorDodge :: BlendMode

-- | <tt>color-burn</tt> mode.
BMColorBurn :: BlendMode

-- | <tt>hard-light</tt> mode.
BMHardLight :: BlendMode

-- | <tt>soft-light</tt> mode.
BMSoftLight :: BlendMode

-- | <tt>difference</tt> mode.
BMDifference :: BlendMode

-- | <tt>exclusion</tt> mode.
BMExclusion :: BlendMode

-- | <tt>hue</tt> mode.
BMHue :: BlendMode

-- | <tt>saturation</tt> mode.
BMSaturation :: BlendMode

-- | <tt>color</tt> mode.
BMColor :: BlendMode

-- | <tt>luminosity</tt> mode.
BMLuminosity :: BlendMode

-- | Represents the type of cursor to display. For an explanation of each
--   type, see the <a>CSS documentation</a>.
data Cursor
CAuto :: Cursor
CDefault :: Cursor
CNone :: Cursor
CContextMenu :: Cursor
CHelp :: Cursor
CPointer :: Cursor
CProgress :: Cursor
CWait :: Cursor
CCell :: Cursor
CCrosshair :: Cursor
CText :: Cursor
CVerticalText :: Cursor
CAlias :: Cursor
CCopy :: Cursor
CMove :: Cursor
CNoDrop :: Cursor
CNotAllowed :: Cursor
CAllScroll :: Cursor
CColResize :: Cursor
CRowResize :: Cursor
CNResize :: Cursor
CEResize :: Cursor
CSResize :: Cursor
CWResize :: Cursor
CNEResize :: Cursor
CNWResize :: Cursor
CSEResize :: Cursor
CSWResize :: Cursor
CEWResize :: Cursor
CNSResize :: Cursor
CNESWResize :: Cursor
CNWSEResize :: Cursor
CZoomIn :: Cursor
CZoomOut :: Cursor
CGrab :: Cursor
CGrabbing :: Cursor

-- | Create an encoding specification from a list of channel encodings.
--   
--   <pre>
--   enc = <a>encoding</a>
--           . <a>position</a> <a>X</a> [ <a>PName</a> "Animal", <a>PmType</a> <a>Ordinal</a> ]
--           . <a>position</a> <a>Y</a> [ <a>PName</a> "Age", <a>PmType</a> <a>Quantitative</a> ]
--           . <a>shape</a> [ <a>MName</a> "Species", <a>MmType</a> <a>Nominal</a> ]
--           . <a>size</a> [ <a>MName</a> "Population", <a>MmType</a> <a>Quantitative</a> ]
--   </pre>
--   
--   The type of <tt>enc</tt> in this example is <tt>[EncodingSpec] -&gt;
--   PropertySpec</tt>, so it can either be used to add further encoding
--   specifications or as <tt>enc []</tt> to create a specification.
--   
--   The supported encodings are: <a>ariaDescription</a>, <a>angle</a>,
--   <a>color</a>, <a>column</a>, <a>detail</a>, <a>fill</a>,
--   <a>fillOpacity</a>, <a>hyperlink</a>, <a>opacity</a>, <a>order</a>,
--   <a>position</a>, <a>row</a>, <a>shape</a>, <a>size</a>, <a>stroke</a>,
--   <a>strokeDash</a>, <a>strokeOpacity</a>, <a>strokeWidth</a>,
--   <a>text</a>, <a>tooltip</a>, <a>tooltips</a>, and <a>url</a>.
--   
--   There is currently no support for encoding by <a>key</a>.
encoding :: [EncodingSpec] -> PropertySpec

-- | Type of measurement to be associated with some channel.
data Measurement

-- | Data are categories identified by name alone and which have no
--   intrinsic order.
Nominal :: Measurement

-- | Data are also categories, but ones which have some natural order.
Ordinal :: Measurement

-- | Data are numeric measurements typically on a continuous scale.
Quantitative :: Measurement

-- | Data represents time in some manner.
Temporal :: Measurement

-- | Geospatial position encoding (<a>Longitude</a> and <a>Latitude</a>)
--   should specify the <a>PmType</a> as <tt>Quantitative</tt>.
--   Geographically referenced features encoded as <a>shape</a> marks
--   should specify <a>MmType</a> as <tt>GeoFeature</tt> (Vega-Lite
--   currently refers to this type as <tt><a>geojson</a></tt>.
GeoFeature :: Measurement

-- | Encode a position channel.
--   
--   <pre>
--   enc =
--       <a>encoding</a>
--         . <a>position</a> <a>X</a> [ <a>PName</a> "Animal", <a>PmType</a> <a>Ordinal</a> ]
--   </pre>
--   
--   Encoding by position will generate an axis by default. To prevent the
--   axis from appearing, simply provide an empty list of axis properties
--   to <a>PAxis</a>:
--   
--   <pre>
--   enc =
--       <a>encoding</a>
--         . <a>position</a> <a>X</a> [ <a>PName</a> "Animal", <a>PmType</a> <a>Ordinal</a>, <a>PAxis</a> [] ]
--   </pre>
position :: Position -> [PositionChannel] -> BuildEncodingSpecs

-- | Type of position channel, <tt>X</tt> and <tt>Y</tt> represent
--   horizontal and vertical axis dimensions on a plane and <tt>X2</tt> and
--   <tt>Y2</tt> represent secondary axis dimensions where two scales are
--   overlaid in the same space. Geographic positions represented by
--   longitude and latiutude values are identified with <tt>Longitude</tt>,
--   <tt>Latitude</tt> and their respective secondary equivalents. Such
--   geographic position channels are subject to a map projection (set
--   using <a>projection</a>) before being placed graphically.
data Position
X :: Position
Y :: Position

-- | The secondary coordinate for ranged <a>Area</a>, <a>Bar</a>,
--   <a>Rect</a>, and <a>Rule</a> marks.
X2 :: Position

-- | The secondary coordinate for ranged <a>Area</a>, <a>Bar</a>,
--   <a>Rect</a>, and <a>Rule</a> marks.
Y2 :: Position

-- | The start angle of an arc.
Theta :: Position

-- | The end angle of an arc.
Theta2 :: Position

-- | The outer radius of an arc.
R :: Position

-- | The inner radius of an arc.
R2 :: Position

-- | Indicates that the <a>X</a> channel represents the mid-point and the
--   <a>XError</a> channel gives the offset. If <a>XError2</a> is not
--   defined then this channel value is applied symmetrically.
XError :: Position

-- | Used to support asymmetric error ranges defined as <a>XError</a> and
--   <a>XError2</a>. One of <a>XError</a> or <a>XError2</a> channels must
--   contain positive values and the other negative values.
XError2 :: Position

-- | Indicates that the <a>Y</a> channel represents the mid-point and the
--   <a>YError</a> channel gives the offset. If <a>YError2</a> is not
--   defined then this channel value is applied symmetrically.
YError :: Position

-- | Used to support asymmetric error ranges defined as <a>YError</a> and
--   <a>YError2</a>. One of <a>YError</a> or <a>YError2</a> channels must
--   contain positive values and the other negative values.
YError2 :: Position

-- | The longitude value for projections.
Longitude :: Position

-- | The latitude value for projections.
Latitude :: Position

-- | A second longitude coordinate.
Longitude2 :: Position

-- | A second longitude coordinate.
Latitude2 :: Position

-- | Position channel properties used for creating a position channel
--   encoding.
data PositionChannel

-- | Name of the field used for encoding with a position channel.
PName :: FieldName -> PositionChannel

-- | Set the position to the height of the enclosing data space. Useful for
--   placing a mark relative to the bottom edge of a view.
PHeight :: PositionChannel

-- | Set the position to the width of the enclosing data space. Useful for
--   justifying a mark to the right hand edge of a view. e.g. to position a
--   mark at the right of the data rectangle:
--   
--   <pre>
--   enc =
--     <a>encoding</a>
--        . <a>position</a> <a>X</a> [ PWidth ]
--   </pre>
PWidth :: PositionChannel

-- | Set a position to an arbitrary data value. Useful for placing items at
--   a specific point in the data space. To place in data screen space use
--   <a>PNumber</a>.
PDatum :: DataValue -> PositionChannel

-- | Set a position to an arbitrary value. Useful for placing items at the
--   top of a plot area (<tt>PNumber 0</tt>) or a fixed number of pixels
--   from the top. See also <a>PHeight</a> and <a>PWidth</a>.
--   
--   Use <a>PDatum</a> to place an item using a data coordinate.
PNumber :: Double -> PositionChannel

-- | Reference in a position channel to a field name generated by
--   <a>repeatFlow</a> or <a>repeat</a>. The parameter identifies whether
--   reference is being made to fields that are to be arranged in columns,
--   in rows, or a with a flow layout.
--   
--   For example:
--   
--   <pre>
--   enc =
--     <a>encoding</a>
--        . <a>position</a> <a>X</a> [ PRepeat <a>Flow</a>, <a>PmType</a> <a>Quantitative</a> ]
--   
--   spec =
--      <a>asSpec</a> [ dataVals [], <a>mark</a> <a>Tick</a> [], enc [] ]
--   
--   <a>toVegaLite</a>
--      [ <a>repeatFlow</a> [ "Horsepower", "Miles_per_Gallon", "Acceleration"]
--      , <a>specification</a> spec
--      ]
--   </pre>
PRepeat :: Arrangement -> PositionChannel

-- | Reference in a position channel to a datum value generated by
--   <a>repeatFlow</a> or <a>repeat</a>. The parameter identifies whether
--   reference is being made to a datum that is to be encoded in layers, or
--   in columns or rows in a flow layout.
PRepeatDatum :: Arrangement -> PositionChannel

-- | Level of measurement when encoding with a position channel.
PmType :: Measurement -> PositionChannel

-- | Discretize numeric values into bins when encoding with a position
--   channel.
--   
--   For example, to encode a frequency histogram with bins every 5 units:
--   
--   <pre>
--   enc = <a>encoding</a>
--           . <a>position</a> <a>X</a> [ <a>PName</a> "x"
--                        , <a>PmType</a> <a>Ordinal</a>
--                        , <a>PBin</a> [<a>Step</a> 5]
--                        ]
--           . <a>position</a> <a>Y</a> [ <a>PmType</a> <a>Quantitative</a>
--                        , <a>PAggregate</a> <a>Count</a>
--                        ]
--   
--   </pre>
PBin :: [BinProperty] -> PositionChannel

-- | Indicate that the data encoded with position is already binned.
PBinned :: PositionChannel

-- | Form of time unit aggregation of field values when encoding with a
--   position channel.
PTimeUnit :: TimeUnit -> PositionChannel

-- | Title of a field when encoding with a position channel.
PTitle :: Text -> PositionChannel

-- | Draw no title.
PNoTitle :: PositionChannel

-- | Compute some aggregate summary statistics for a field to be encoded
--   with a position channel.
--   
--   <pre>
--   enc = <a>encoding</a>
--           . <a>position</a> <a>X</a> [ <a>PName</a> "role", <a>PmType</a> <a>Ordinal</a> ]
--           . <a>position</a> <a>Y</a> [ <a>PName</a> "salary"
--                        , <a>PmType</a> <a>Quantitative</a>
--                        , <a>PAggregate</a> <a>Mean</a>
--                        ]
--   
--   </pre>
PAggregate :: Operation -> PositionChannel

-- | Scaling applied to a field when encoding with a position channel. The
--   scale will transform a field's value into a position along one axis.
--   
--   For example, the following will scale the bars positioned along a
--   horizontal axis to have an inner spacing of 50% (0.5) of the total
--   space allocated to each bar:
--   
--   <pre>
--   enc = <a>encoding</a>
--           . <a>position</a> <a>X</a> [ <a>PName</a> "ageGroup"
--                        , <a>PmType</a> <a>Nominal</a>
--                        , <a>PScale</a> [<a>SPaddingInner</a> 0.5]
--                        ]
--   
--   </pre>
PScale :: [ScaleProperty] -> PositionChannel

-- | Axis properties used when encoding with a position channel. For no
--   axis, provide an empty list.
PAxis :: [AxisProperty] -> PositionChannel

-- | Sort order for field when encoding with a position channel.
PSort :: [SortProperty] -> PositionChannel

-- | Type of stacking offset for the field when encoding with a position
--   channel.
--   
--   For example, stacking areas away from a centreline can be used to
--   create a <a>streamgraph</a>:
--   
--   <pre>
--   enc = <a>encoding</a>
--           . <a>position</a> <a>X</a> [<a>PName</a> "week", <a>PmType</a> <a>Ordinal</a>]
--           . <a>position</a> <a>Y</a> [ <a>PName</a> "takings"
--                        , <a>PmType</a> <a>Quantitative</a>
--                        , <a>PStack</a> <a>StCenter</a>
--                        ]
--           . <a>color</a> [<a>MName</a> "shop", <a>MmType</a> <a>Nominal</a>]
--   
--   </pre>
--   
--   Changed from <tt>StackProperty</tt> in version <tt>0.4.0.0</tt>.
PStack :: StackOffset -> PositionChannel

-- | Set the imputation rules for a position channel. See the <a>Vega-Lite
--   impute documentation</a>.
PImpute :: [ImputeProperty] -> PositionChannel

-- | Specify the mark position or size relative to the band size. The value
--   is in the range 0 to 1, inclusive.
--   
--   For rectangular-based marks (<a>Rect</a>, <a>Bar</a>, and
--   <a>Image</a>), the value is the scale factor relative to the band
--   width (or height), or the time unit interval.
--   
--   For non-rectangular marks, the relative position on a band of a
--   stacked, binned, time unit, or band scale is used. A value of 0
--   positions the band at the beginning of the band, and 1 at the end.
PBand :: Double -> PositionChannel

-- | Allow type of sorting to be customised. For details see the
--   <a>Vega-Lite documentation</a>.
--   
--   The constructors have been changed in version <tt>0.4.0.0</tt>, with
--   <tt>Op</tt>, <tt>ByField</tt>, and <tt>ByRepeat</tt> removed, and
--   their functionality replaced with <a>ByRepeatOp</a>, <a>ByFieldOp</a>,
--   and <a>ByChannel</a>.
data SortProperty

-- | Sorting is from low to high.
Ascending :: SortProperty

-- | Sorting is from high to low.
Descending :: SortProperty

-- | Custom sort order listing data values explicitly.
CustomSort :: DataValues -> SortProperty

-- | Sort by the aggregated summaries of the given fields (referenced by a
--   repeat iterator) using an aggregation operation.
ByRepeatOp :: Arrangement -> Operation -> SortProperty

-- | Sort by the aggregated summary of a field using an aggregation
--   operation. The following example sorts the categorical data field
--   <tt>variety</tt> by the mean age of the data in each variety category:
--   
--   <pre>
--   <a>position</a> <a>Y</a>
--     [ <a>PName</a> "variety"
--     , <a>PmType</a> <a>Ordinal</a>
--     , <a>PSort</a> [ ByFieldOp "age" <a>Mean</a>, <a>Descending</a> ]
--     ]
--   </pre>
ByFieldOp :: FieldName -> Operation -> SortProperty

-- | Sort by another channel.
--   
--   <pre>
--   <a>position</a> <a>Y</a>
--    [ <a>PName</a> "age"
--    , <a>PmType</a> <a>Ordinal</a>
--    , <a>PSort</a> [ ByChannel <a>ChX</a> ]
--    ]
--   </pre>
ByChannel :: Channel -> SortProperty

-- | How should the field be sorted when performing a window transform.
data SortField

-- | Sort the field into ascending order.
WAscending :: FieldName -> SortField

-- | Sort the field into descending order.
WDescending :: FieldName -> SortField

-- | Axis customisation properties. These are used for customising
--   individual axes. To configure all axes, use <a>AxisConfig</a> with a
--   <a>configuration</a> instead. See the <a>Vega-Lite documentation</a>
--   for more details.
--   
--   The <tt>AxTitleMaxLength</tt> constructor was removed in release
--   <tt>0.4.0.0</tt>. The <a>AxTitleLimit</a> constructor should be used
--   instead.
data AxisProperty

-- | A boolean flag indicating if <a>ARIA attributes</a> should be included
--   (SVG output only).
--   
--   If False, the "aria-hidden" attribute will be set on the output SVG
--   group, removing the axis from the ARIA accessibility tree.
--   
--   <b>Default value:</b> True
AxAria :: Bool -> AxisProperty

-- | A text description of this axis for <a>ARIA accessibility</a> (SVG
--   output only).
--   
--   If the <a>AxAria</a> property is True, for SVG output the
--   <a>"aria-label" attribute</a> will be set to this description.
--   
--   If the description is unspecified it will be automatically generated.
AxAriaDescription :: Text -> AxisProperty

-- | An interpolation fraction indicating where, for <tt>band</tt> scales,
--   axis ticks should be position. A value of <tt>0</tt> places ticks at
--   the left-edge of the band, <tt>0.5</tt> in the middle, and <tt>1</tt>
--   at the right edge.
AxBandPosition :: Double -> AxisProperty

-- | Set conditions on an axis property. The first argument is the test to
--   apply, and the second is the pair of properties to set if the
--   condition holds or not.
--   
--   The test parameter has access to the axis <tt>value</tt> and
--   <tt>label</tt> properties: that is
--   
--   <pre>
--   <a>PAxis</a> [ <a>AxDataCondition</a>
--             (<a>Expr</a> "datum.value &lt;= 2")
--             (<a>CAxTickColor</a> "red" "blue")
--         , <a>AxDataCondition</a>
--             (<a>Expr</a> "datum.label == '4.0'")
--             (<a>CAxTickWidth</a> 5 2)
--         ]
--   
--   </pre>
--   
--   Inline aggregation can be performed (before the test) using
--   <a>FilterOpTrans</a>, which can be particularly useful for filtering
--   temporal data. The following example will use solid grid lines for the
--   first day in January, and dashes for all other dates (using
--   <a>&amp;</a>):
--   
--   <pre>
--   <a>PAxis</a> [ <a>AxDataCondition</a>
--             (<a>FEqual</a> "value" (<a>DateTime</a> [<a>DTMonth</a> <a>Jan</a>, <a>DTDate</a> 1])
--             &amp; <a>FilterOpTrans</a> (<a>MTimeUnit</a> (<a>TU</a> <a>MonthDate</a>)))
--             (<a>CAxGridDash</a> [] [2, 2])
--         ]
--   
--   </pre>
AxDataCondition :: BooleanOp -> ConditionalAxisProperty -> AxisProperty

-- | Should the axis domain (the baseline) be displayed?
AxDomain :: Bool -> AxisProperty

-- | The stroke cap for the domain lines' ending style.
AxDomainCap :: StrokeCap -> AxisProperty

-- | The axis domain color.
AxDomainColor :: Color -> AxisProperty

-- | The dash pattern of the domain.
AxDomainDash :: DashStyle -> AxisProperty

-- | The offset for the dash pattern.
AxDomainDashOffset :: DashOffset -> AxisProperty

-- | The axis domain opacity.
AxDomainOpacity :: Opacity -> AxisProperty

-- | The width of the axis domain.
AxDomainWidth :: Double -> AxisProperty

-- | <a>Formatting pattern</a> for axis values. To distinguish between
--   formatting as numeric values and data/time values, additionally use
--   <a>AxFormatAsNum</a>, <a>AxFormatAsTemporal</a>, or
--   <a>AxFormatAsCustom</a>.
--   
--   When used with a <a>custom formatType</a>, this value will be passed
--   as "format" alongside "datum.value" to the registered function.
AxFormat :: Text -> AxisProperty

-- | Facet headers should be formatted as numbers. Use a <a>d3 numeric
--   format string</a> with <a>AxFormat</a>.
AxFormatAsNum :: AxisProperty

-- | Facet headers should be formatted as dates or times. Use a <a>d3
--   date/time format string</a> with <a>AxFormat</a>.
AxFormatAsTemporal :: AxisProperty

-- | The <a>custom format type</a> for use with with <a>AxFormat</a>.
AxFormatAsCustom :: Text -> AxisProperty

-- | Should an axis grid be displayed?
AxGrid :: Bool -> AxisProperty

-- | The stroke cap for the grid lines' ending style.
AxGridCap :: StrokeCap -> AxisProperty

-- | The color for the grid.
AxGridColor :: Color -> AxisProperty

-- | The dash pattern of the grid.
AxGridDash :: DashStyle -> AxisProperty

-- | The offset for the dash pattern.
AxGridDashOffset :: DashOffset -> AxisProperty

-- | The opacity of the grid.
AxGridOpacity :: Opacity -> AxisProperty

-- | The width of the grid lines.
AxGridWidth :: Double -> AxisProperty

-- | Should labels be added to an axis?
AxLabels :: Bool -> AxisProperty

-- | The horizontal alignment for labels.
AxLabelAlign :: HAlign -> AxisProperty

-- | The angle at which to draw labels.
AxLabelAngle :: Angle -> AxisProperty

-- | The vertical alignment for labels.
AxLabelBaseline :: VAlign -> AxisProperty

-- | No boundary overlap check is applied to labels. This is the default
--   behavior.
--   
--   See also <a>AxLabelBound</a> and <a>AxLabelBoundValue</a>.
AxLabelNoBound :: AxisProperty

-- | Labels are hidden if they exceed the axis range by more than 1 pixel.
--   
--   See also <a>AxLabelNoBound</a> and <a>AxLabelBoundValue</a>.
AxLabelBound :: AxisProperty

-- | Labels are hidden if they exceed the axis range by more than the given
--   number of pixels.
--   
--   See also <a>AxLabelNoBound</a> and <a>AxLabelBound</a>.
AxLabelBoundValue :: Double -> AxisProperty

-- | The label color.
AxLabelColor :: Color -> AxisProperty

-- | Provide the expression used to generate axis labels.
--   
--   The expression can use <tt>datum.value</tt> and <tt>datum.label</tt>
--   to access the data value and default label text respectively.
--   
--   The following example uses four digit years for decades and two-digit
--   years for other years:
--   
--   <pre>
--   AxLabelExpr "if(year(datum.value) % 10 == 0, utcFormat(datum.value,'%Y'), utcFormat(datum.value,'%y'))"
--   
--   </pre>
AxLabelExpr :: VegaExpr -> AxisProperty

-- | The labels are not aligned flush to the scale. This is the default for
--   non-continuous X scales.
--   
--   See also <a>AxLabelFlush</a> and <a>AxLabelFlushValue</a>.
AxLabelNoFlush :: AxisProperty

-- | The first and last axis labels are aligned flush to the scale range.
--   
--   See also <a>AxLabelNoFlush</a> and <a>AxLabelFlushValue</a>.
AxLabelFlush :: AxisProperty

-- | The labels are aligned flush, and the parameter determines the extra
--   offset, in pixels, to apply to the first and last labels. This can
--   help the labels better group (visually) with the corresponding axis
--   ticks.
--   
--   See also <a>AxLabelNoFlush</a> and <a>AxLabelFlush</a>.
AxLabelFlushValue :: Double -> AxisProperty

-- | The number of pixels to offset flush-adjusted labels.
AxLabelFlushOffset :: Double -> AxisProperty

-- | The font for the label.
AxLabelFont :: Text -> AxisProperty

-- | The font size of the label.
AxLabelFontSize :: Double -> AxisProperty

-- | The font style of the label.
AxLabelFontStyle :: Text -> AxisProperty

-- | The font weight of the label.
AxLabelFontWeight :: FontWeight -> AxisProperty

-- | The maximum width of a label, in pixels.
AxLabelLimit :: Double -> AxisProperty

-- | The line height, in pixels, for multi-line label text.
--   
--   Added in Vega-Lite 4.6.0.
AxLabelLineHeight :: Double -> AxisProperty

-- | The pixel offset for labels, in addition to <a>AxTickOffset</a>.
AxLabelOffset :: Double -> AxisProperty

-- | The opacity of the label.
AxLabelOpacity :: Opacity -> AxisProperty

-- | How should overlapping labels be displayed?
AxLabelOverlap :: OverlapStrategy -> AxisProperty

-- | The padding, in pixels, between the label and the axis.
AxLabelPadding :: Double -> AxisProperty

-- | The minimum separation, in pixels, between label bounding boxes for
--   them to be considered non-overlapping. This is ignored if the
--   <a>AxLabelOverlap</a> strategy is <a>ONone</a>.
AxLabelSeparation :: Double -> AxisProperty

-- | The maximum extent, in pixels, that axis ticks and labels should use.
--   This determines a maxmium offset value for axis titles.
AxMaxExtent :: Double -> AxisProperty

-- | The minimum extent, in pixels, that axis ticks and labels should use.
--   This determines a minmium offset value for axis titles.
AxMinExtent :: Double -> AxisProperty

-- | The offset, in pixels, between the axis and the edge of the enclosing
--   group or data rectangle.
AxOffset :: Double -> AxisProperty

-- | The orientation of the axis.
AxOrient :: Side -> AxisProperty

-- | The anchor position of the axis in pixels.
AxPosition :: Double -> AxisProperty

-- | The named styles - generated with <a>AxisNamedStyles</a> - to apply to
--   the axis.
AxStyle :: [StyleLabel] -> AxisProperty

-- | Should tick marks be drawn on an axis?
AxTicks :: Bool -> AxisProperty

-- | For band scales, indicates if ticks and grid lines should be placed at
--   the center of a band (the default) or at the band extents to indicate
--   intervals.
AxTickBand :: BandAlign -> AxisProperty

-- | The stroke cap for the grid lines' ending style.
AxTickCap :: StrokeCap -> AxisProperty

-- | The color of the ticks.
AxTickColor :: Color -> AxisProperty

-- | The desired number of ticks for axes visualizing quantitative scales.
--   This is a hint to the system, and the actual number used will be
--   adjusted to be "nice" (multiples of 2, 5, or 10) and lie within the
--   underlying scale's range.
--   
--   The <a>AxTickCountTime</a> option can instead be used for "time" or
--   "utc" scales.
AxTickCount :: Int -> AxisProperty

-- | A specialised version of <a>AxTickCount</a> for "time" and "utc" time
--   scales.
--   
--   The <a>IsNice</a> and <a>NTickCount</a> options should not be used as
--   they generate invalid VegaLite.
AxTickCountTime :: ScaleNice -> AxisProperty

-- | The dash pattern of the ticks.
AxTickDash :: DashStyle -> AxisProperty

-- | The offset for the dash pattern.
AxTickDashOffset :: DashOffset -> AxisProperty

-- | Should an extra axis tick mark be added for the initial position of
--   the axis?
AxTickExtra :: Bool -> AxisProperty

-- | The minimum desired step between axis ticks, in terms of the scale
--   domain values.
AxTickMinStep :: Double -> AxisProperty

-- | The position offset, in pixels, to apply to ticks, labels, and grid
--   lines.
--   
--   See also <a>AxLabelOffset</a>.
AxTickOffset :: Double -> AxisProperty

-- | The opacity of the ticks.
AxTickOpacity :: Opacity -> AxisProperty

-- | Should pixel position values be rounded to the nearest integer?
AxTickRound :: Bool -> AxisProperty

-- | The size of the tick marks in pixels.
AxTickSize :: Double -> AxisProperty

-- | The width of the tick marks in pixels.
AxTickWidth :: Double -> AxisProperty

-- | The axis title.
AxTitle :: Text -> AxisProperty

-- | Draw no title for the axis.
AxNoTitle :: AxisProperty

-- | The horizontal alignment of the axis title.
AxTitleAlign :: HAlign -> AxisProperty

-- | The text anchor position for placing axis titles.
AxTitleAnchor :: APosition -> AxisProperty

-- | The angle of the axis title.
AxTitleAngle :: Angle -> AxisProperty

-- | The vertical alignment of the axis title.
AxTitleBaseline :: VAlign -> AxisProperty

-- | The color of the axis title.
AxTitleColor :: Color -> AxisProperty

-- | The font for the axis title.
AxTitleFont :: Text -> AxisProperty

-- | The font size of the axis title.
AxTitleFontSize :: Double -> AxisProperty

-- | The font style of the axis title.
AxTitleFontStyle :: Text -> AxisProperty

-- | The font weight of the axis title.
AxTitleFontWeight :: FontWeight -> AxisProperty

-- | The maximum allowed width of the axis title, in pixels.
AxTitleLimit :: Double -> AxisProperty

-- | Line height, in pixels, for multi-line title text.
AxTitleLineHeight :: Double -> AxisProperty

-- | The opacity of the axis title.
AxTitleOpacity :: Opacity -> AxisProperty

-- | The padding, in pixels, between title and axis.
AxTitlePadding :: Double -> AxisProperty

-- | The X coordinate of the axis title, relative to the axis group.
AxTitleX :: Double -> AxisProperty

-- | The Y coordinate of the axis title, relative to the axis group.
AxTitleY :: Double -> AxisProperty

-- | The translation offset in pixels applied to the axis group mark x and
--   y. If specified it overrides the default value of a 0.5 offset to
--   pixel-align stroked lines.
AxTranslateOffset :: Double -> AxisProperty

-- | Set the explicit tick, grid, and label values along an axis.
--   
--   The following three examples are for an axis displaying a
--   quantitative, categorical, and temporal field respectively.
--   
--   <pre>
--   <a>PAxis</a> [<a>AxValues</a> (<a>Numbers</a> [2, 3, 5, 7, 11, 13, 17])]
--   <a>PAxis</a> [<a>AxValues</a> (<a>Strings</a> ["cats", "dogs", "elephants"])]
--   <a>PAxis</a> [<a>AxValues</a> (<a>DateTimes</a> [ [<a>DTYear</a> 2019, <a>DTMonth</a> <a>Mar</a>, <a>DTDate</a> 31]
--                              , [<a>DTYear</a> 2019, <a>DTMonth</a> <a>Jun</a>, <a>DTDate</a> 30]
--                              , [<a>DTYear</a> 2019, <a>DTMonth</a> <a>Sep</a>, <a>DTDate</a> 30]
--                              ])]
--   
--   </pre>
--   
--   Changed in <tt>0.4.0.0</tt> to take <a>DataValues</a> rather than
--   <tt>[Double]</tt>.
AxValues :: DataValues -> AxisProperty

-- | The dates or times to appear along the axis.
--   
--   As of version <tt>0.4.0.0</tt>, this is deprecated. The
--   <a>AxValues</a> constructor should be used instead.

-- | <i>Deprecated: Please change AxDates to AxValues</i>
AxDates :: [[DateTime]] -> AxisProperty

-- | The z-index of the axis, relative to the chart marks.
AxZIndex :: ZIndex -> AxisProperty

-- | For use with <a>AxDataCondition</a>, and defines those axis properties
--   which can be conditioned on their position (or label).
--   
--   The constuctor determines the axis property (a label, tick, or grid
--   element), and the two arguments are the value to set if the condition
--   is <a>True</a> (first), and for when it is <a>False</a> (second).
data ConditionalAxisProperty

-- | The color for the axis grid.
CAxGridColor :: Color -> Color -> ConditionalAxisProperty

-- | The dash pattern for the axis grid.
CAxGridDash :: DashStyle -> DashStyle -> ConditionalAxisProperty

-- | The offset for the dash pattern.
CAxGridDashOffset :: DashOffset -> DashOffset -> ConditionalAxisProperty

-- | The opacity of the axis grid.
CAxGridOpacity :: Opacity -> Opacity -> ConditionalAxisProperty

-- | The width of the axis grid.
CAxGridWidth :: Double -> Double -> ConditionalAxisProperty

-- | Axis label horizontal alignment.
CAxLabelAlign :: HAlign -> HAlign -> ConditionalAxisProperty

-- | Axis label vertical alignment.
CAxLabelBaseline :: VAlign -> VAlign -> ConditionalAxisProperty

-- | Axis label color.
CAxLabelColor :: Color -> Color -> ConditionalAxisProperty

-- | Axis label font.
CAxLabelFont :: Text -> Text -> ConditionalAxisProperty

-- | Axis label font.
CAxLabelFontSize :: Double -> Double -> ConditionalAxisProperty

-- | Axis label font style.
CAxLabelFontStyle :: Text -> Text -> ConditionalAxisProperty

-- | Axis label font weight.
CAxLabelFontWeight :: FontWeight -> FontWeight -> ConditionalAxisProperty

-- | Axis label offset.
CAxLabelOffset :: Double -> Double -> ConditionalAxisProperty

-- | Axis label opacity.
CAxLabelOpacity :: Opacity -> Opacity -> ConditionalAxisProperty

-- | Axis label padding.
CAxLabelPadding :: Double -> Double -> ConditionalAxisProperty

-- | Tick color for the axis.
CAxTickColor :: Text -> Text -> ConditionalAxisProperty

-- | The dash pattern for the axis ticks.
CAxTickDash :: DashStyle -> DashStyle -> ConditionalAxisProperty

-- | The offset for the dash pattern.
CAxTickDashOffset :: DashOffset -> DashOffset -> ConditionalAxisProperty

-- | Opacity of the axis tick marks.
CAxTickOpacity :: Opacity -> Opacity -> ConditionalAxisProperty

-- | Size, in pixels, of the axis tick marks.
CAxTickSize :: Double -> Double -> ConditionalAxisProperty

-- | Width, in pixels, of the axis tick marks.
CAxTickWidth :: Double -> Double -> ConditionalAxisProperty

-- | Indicates the horizontal alignment of text such as on an axis or
--   legend.
data HAlign
AlignCenter :: HAlign
AlignLeft :: HAlign
AlignRight :: HAlign

-- | Indicates the vertical alignment of text that may be attached to a
--   mark.
data VAlign

-- | The position refers to the top of the text, calculated relative to the
--   font size. Also see <a>AlignLineTop</a>.
AlignTop :: VAlign

-- | The middle of the text.
AlignMiddle :: VAlign

-- | The position refers to the bottom of the text, including descenders,
--   like g. This is calculated relative to the font size. Also see
--   <a>AlignLineBottom</a>.
AlignBottom :: VAlign

-- | The position refers to the baseline of the text (so it does not
--   include descenders). This maps to the Vega-Lite <tt>"alphabetic"</tt>
--   value.
AlignBaseline :: VAlign

-- | Similar to <a>AlignTop</a>, but relative to the line height, not font
--   size.
--   
--   This was added in Vega-Lite 4.6.0.
AlignLineTop :: VAlign

-- | Similar to <a>AlignBottom</a>, but relative to the line height, not
--   font size.
--   
--   This was added in Vega-Lite 4.6.0.
AlignLineBottom :: VAlign

-- | Where should tick marks and grid lines be placed. This is used with
--   <a>AxTickBand</a> and <a>TickBand</a>.
data BandAlign

-- | Use the center of the band.
BCenter :: BandAlign

-- | Use the band extents.
BExtent :: BandAlign

-- | Type of overlap strategy to be applied when there is not space to show
--   all items on an axis, and is used by <a>AxLabelOverlap</a>,
--   <a>LabelOverlap</a>, <a>LLabelOverlap</a>, and <a>LeLabelOverlap</a>.
--   See the <a>Vega-Lite documentation</a> for more details.
data OverlapStrategy

-- | No overlap strategy to be applied when there is not space to show all
--   items on an axis.
ONone :: OverlapStrategy

-- | Give all items equal weight in overlap strategy to be applied when
--   there is not space to show them all on an axis.
OParity :: OverlapStrategy

-- | Greedy overlap strategy to be applied when there is not space to show
--   all items on an axis.
OGreedy :: OverlapStrategy

-- | Represents one side of a rectangular space.
--   
--   Used by <a>AxOrient</a>, <a>HLabelOrient</a>, <a>HTitleOrient</a>,
--   <a>LTitleOrient</a>, <a>LeTitleOrient</a>, <a>Orient</a>, and
--   <a>TOrient</a>.
data Side
STop :: Side
SBottom :: Side
SLeft :: Side
SRight :: Side

-- | Encode an angle (orientation) channel, which allows for data-driven
--   rotation of text, point, and square marks.
angle :: [MarkChannel] -> BuildEncodingSpecs

-- | Encode a color channel.
--   
--   <pre>
--   <a>color</a> [ <a>MName</a> "Species", <a>MmType</a> <a>Nominal</a> ] []
--   </pre>
--   
--   Encoding a color channel will generate a legend by default. To stop
--   the legend appearing, just supply an empty list of legend properties
--   to <a>MLegend</a>:
--   
--   <pre>
--   <a>color</a> [ <a>MName</a> "Species", <a>MmType</a> <a>Nominal</a>, <a>MLegend</a> [] ] []
--   </pre>
color :: [MarkChannel] -> BuildEncodingSpecs

-- | Encode a fill channel. This acts in a similar way to encoding by
--   <a>color</a> but only affects the interior of closed shapes.
--   
--   <pre>
--   <a>fill</a> [ <a>MName</a> "Species", <a>MmType</a> <a>Nominal</a> ] []
--   </pre>
--   
--   Note that if both <tt>fill</tt> and <a>color</a> encodings are
--   specified, <tt>fill</tt> takes precedence.
fill :: [MarkChannel] -> BuildEncodingSpecs

-- | Encode a fill opacity channel. This acts in a similar way to encoding
--   by <a>opacity</a> but only affects the interior of closed shapes. If
--   both <tt>fillOpacity</tt> and <a>opacity</a> encodings are specified,
--   <tt>fillOpacity</tt> takes precedence.
--   
--   See also <a>fill</a>.
fillOpacity :: [MarkChannel] -> BuildEncodingSpecs

-- | Encode an opacity channel. The first parameter is a list of mark
--   channel properties that characterise the way a data field is encoded
--   by opacity. The second parameter is a list of any previous channels to
--   which this opacity channel should be added.
--   
--   <pre>
--   <a>opacity</a> [ <a>MName</a> "Age", <a>MmType</a> <a>Quantitative</a> ] []
--   </pre>
--   
--   See also <a>fillOpacity</a>.
opacity :: [MarkChannel] -> BuildEncodingSpecs

-- | Encode a shape channel.
--   
--   <pre>
--   <a>shape</a> [ <a>MName</a> "Species", <a>MmType</a> <a>Nominal</a> ] []
--   </pre>
shape :: [MarkChannel] -> BuildEncodingSpecs

-- | Encode a size channel.
--   
--   <pre>
--   <a>size</a> [ <a>MName</a> "Age", <a>MmType</a> <a>Quantitative</a> ] []
--   </pre>
size :: [MarkChannel] -> BuildEncodingSpecs

-- | Encode a stroke channel. This acts in a similar way to encoding by
--   <a>color</a> but only affects the exterior boundary of marks.
--   
--   <pre>
--   <a>stroke</a> [ <a>MName</a> "Species", <a>MmType</a> <a>Nominal</a> ] []
--   </pre>
--   
--   Note that if both <tt>stroke</tt> and <a>color</a> encodings are
--   specified, <tt>stroke</tt> takes precedence.
stroke :: [MarkChannel] -> BuildEncodingSpecs

-- | Encode a stroke-dash channel.
--   
--   The following will use a different dash style for each value in the
--   "symbol" field (a multi-series line chart):
--   
--   <pre>
--   <a>toVegaLite</a> [ <a>dataFromUrl</a> "data/stocks.csv" []
--              , <a>mark</a> <a>Line</a> []
--              , <a>encoding</a>
--                . <a>position</a> <a>X</a> [ <a>PName</a> "date", <a>PmType</a> <a>Temporal</a> ]
--                . <a>position</a> <a>Y</a> [ <a>PName</a> "price", <a>PmType</a> <a>Quantitative</a> ]
--                . strokeDash [ <a>MName</a> "symbol", <a>MmType</a> <a>Nominal</a> ]
--                $ []
--              ]
--   </pre>
--   
--   It can also be used to change the line style for connected points
--   (e.g. to indicate where the data changes its "predicted" value, noting
--   that there are two points at <tt>"a"</tt> equal to <tt>"E"</tt>):
--   
--   <pre>
--   <a>toVegaLite</a> [ <a>dataFromColumns</a> []
--                . <a>dataColumn</a> "a" (<a>Strings</a> [ "A", "B", "D", "E", "E", "G", "H"])
--                . <a>dataColumn</a> "b" (<a>Numbers</a> [ 28, 55, 91, 81, 81, 19, 87 ])
--                . <a>dataColumn</a> "predicted" (<a>Booleans</a> [False, False, False, False, True, True, True])
--                $ []
--              , <a>mark</a> <a>Line</a> []
--              , <a>encoding</a>
--                . <a>position</a> <a>X</a> [ <a>PName</a> "a", <a>PmType</a> <a>Ordinal</a> ]
--                . <a>position</a> <a>Y</a> [ <a>PName</a> "b", <a>PmType</a> <a>Quantitative</a> ]
--                . strokeDash [ <a>MName</a> "predicted", <a>MmType</a> <a>Nominal</a> ]
--                $ []
--              ]
--   </pre>
strokeDash :: [MarkChannel] -> BuildEncodingSpecs

-- | Encode a stroke opacity channel. This acts in a similar way to
--   encoding by <a>opacity</a> but only affects the exterior boundary of
--   marks. If both <a>opacity</a> and <tt>strokeOpacity</tt> are
--   specified, <tt>strokeOpacity</tt> takes precedence for stroke
--   encoding.
strokeOpacity :: [MarkChannel] -> BuildEncodingSpecs

-- | Encode a stroke width channel.
strokeWidth :: [MarkChannel] -> BuildEncodingSpecs

-- | Mark channel properties used for creating a mark channel encoding.
data MarkChannel

-- | Field used for encoding with a mark property channel.
MName :: FieldName -> MarkChannel

-- | Reference in a mark channel to a field name generated by
--   <a>repeatFlow</a> or <a>repeat</a>. The parameter identifies whether
--   reference is being made to fields that are to be arranged in columns,
--   in rows, or a with a flow layout.
MRepeat :: Arrangement -> MarkChannel

-- | Reference in a mark channel to a datum value generated by
--   <a>repeatFlow</a> or <a>repeat</a>. The parameter identifies whether
--   reference is being made to a datum that is to be encoded in layers, or
--   in columns or rows in a flow layout.
MRepeatDatum :: Arrangement -> MarkChannel

-- | Level of measurement when encoding with a mark property channel.
MmType :: Measurement -> MarkChannel

-- | Scaling applied to a field when encoding with a mark property channel.
--   The scale will transform a field's value into a color, shape, size
--   etc.
--   
--   Use an empty list to remove the scale.
MScale :: [ScaleProperty] -> MarkChannel

-- | Discretize numeric values into bins when encoding with a mark property
--   channel.
MBin :: [BinProperty] -> MarkChannel

-- | Indicate that data encoding with a mark are already binned.
MBinned :: MarkChannel

-- | Sort order.
MSort :: [SortProperty] -> MarkChannel

-- | Time unit aggregation of field values when encoding with a mark
--   property channel.
MTimeUnit :: TimeUnit -> MarkChannel

-- | Title of a field when encoding with a mark property channel.
MTitle :: Text -> MarkChannel

-- | Draw no title.
MNoTitle :: MarkChannel

-- | Compute aggregate summary statistics for a field to be encoded with a
--   mark property channel.
MAggregate :: Operation -> MarkChannel

-- | Properties of a legend that describes a mark's encoding.
--   
--   For no legend, provide an empty list.
MLegend :: [LegendProperty] -> MarkChannel

-- | Make a mark channel conditional on interactive selection. The first
--   parameter is a selection condition to evaluate; the second the
--   encoding to apply if that selection is true; the third parameter is
--   the encoding if the selection is false.
--   
--   <pre>
--   <a>color</a>
--     [ MSelectionCondition (<a>SelectionName</a> "myBrush")
--        [ <a>MName</a> "myField", <a>MmType</a> <a>Ordinal</a> ]
--        [ <a>MString</a> "grey" ]
--     ]
--   </pre>
MSelectionCondition :: BooleanOp -> [MarkChannel] -> [MarkChannel] -> MarkChannel

-- | Make a text channel conditional on one or more predicate expressions.
--   The first parameter is a list of tuples each pairing an expression to
--   evaluate with the encoding if that expression is <tt>True</tt>. The
--   second is the encoding if none of the expressions evaluate as
--   <tt>True</tt>.
--   
--   <pre>
--   <a>color</a>
--     [ MDataCondition [ ( <a>Expr</a> "datum.myField === null", [ <a>MString</a> "grey" ] ) ]
--        [ MString "black" ]
--     ]
--   </pre>
--   
--   The arguments to this constructor have changed in <tt>0.4.0.0</tt> to
--   support multiple expressions.
MDataCondition :: [(BooleanOp, [MarkChannel])] -> [MarkChannel] -> MarkChannel

-- | SVG path string used when encoding with a mark property channel.
--   Useful for providing custom shapes.
MPath :: Text -> MarkChannel

-- | Name of a literal data item used for encoding with a mark property
--   channel. Unlike <a>MNumber</a>, <a>MString</a>, and <a>MBoolean</a>,
--   datum literals represent values in data space.
MDatum :: DataValue -> MarkChannel

-- | Literal numeric value when encoding with a mark property channel.
MNumber :: Double -> MarkChannel

-- | Literal string value when encoding with a mark property channel.
MString :: Text -> MarkChannel

-- | Boolean value when encoding with a mark property channel.
MBoolean :: Bool -> MarkChannel

-- | A null value.
MNullValue :: MarkChannel

-- | A symbol literal. This can be useful when making a symbol dependent on
--   some data or selection condition (e.g. <a>MDataCondition</a> or
--   <a>MSelectionCondition</a>).
--   
--   For example:
--   
--   <pre>
--   <a>encoding</a>
--     . <a>position</a> <a>X</a> [ <a>PName</a> "to", <a>PmType</a> <a>Quantitative</a>, <a>PAxis</a> [] ]
--     . <a>shape</a> [<a>MDataCondition</a>
--               [(<a>Expr</a> "datum.to &gt; 100", [MSymbol <a>SymTriangleRight</a>])]
--               [MSymbol <a>SymTriangleLeft</a>]
--   
--   </pre>
MSymbol :: Symbol -> MarkChannel

-- | Indicates the type of legend to create. It is used with <a>LType</a>.
--   
--   Prior to version <tt>0.4.0.0.0</tt> this was called <tt>Legend</tt>
--   and the constructors did not end in <tt>Legend</tt>.
data LegendType

-- | Typically used for continuous quantitative data.
GradientLegend :: LegendType

-- | Typically used for categorical data.
SymbolLegend :: LegendType

-- | Legend properties, set with <a>MLegend</a>. For more detail see the
--   <a>Vega-Lite documentation</a>.
--   
--   The <tt>LEntryPadding</tt> constructor was removed in
--   <tt>0.4.0.0</tt>.
data LegendProperty

-- | A boolean flag indicating if <a>ARIA attributes</a> should be included
--   (SVG output only).
--   
--   If False, the "aria-hidden" attribute will be set on the output SVG
--   group, removing the legend from the ARIA accessibility tree.
--   
--   <b>Default value:</b> True
LAria :: Bool -> LegendProperty

-- | A text description of this legend for <a>ARIA accessibility</a> (SVG
--   output only).
--   
--   If the <a>LAria</a> property is true, for SVG output the
--   <a>"aria-label" attribute</a> will be set to this description.
--   
--   If the description is unspecified it will be automatically generated.
LAriaDescription :: Text -> LegendProperty

-- | The height, in pixels, to clip symbol legend entries.
LClipHeight :: Double -> LegendProperty

-- | The horizontal padding, in pixels, between symbol legend entries.
LColumnPadding :: Double -> LegendProperty

-- | The number of columns in which to arrange symbol legend entries. A
--   value of <tt>0</tt> or lower indicates a single row with one column
--   per entry.
LColumns :: Int -> LegendProperty

-- | The corner radius for the full legend.
LCornerRadius :: Double -> LegendProperty

-- | The direction of the legend.
LDirection :: Orientation -> LegendProperty

-- | The background fill color for the full legend.
LFillColor :: Color -> LegendProperty

-- | <a>Formatting pattern</a> for legend values. To distinguish between
--   formatting as numeric values and data/time values, additionally use
--   <a>LFormatAsNum</a>, <a>LFormatAsTemporal</a>, or
--   <a>LFormatAsCustom</a>.
LFormat :: Text -> LegendProperty

-- | Legends should be formatted as numbers. Use a <a>d3 numeric format
--   string</a> with <a>LFormat</a>.
LFormatAsNum :: LegendProperty

-- | Legends should be formatted as dates or times. Use a <a>d3 date/time
--   format string</a> with <a>LFormat</a>.
LFormatAsTemporal :: LegendProperty

-- | The <a>custom format type</a> for use with with <a>LFormat</a>.
LFormatAsCustom :: Text -> LegendProperty

-- | The length in pixels of the primary axis of the color gradient.
LGradientLength :: Double -> LegendProperty

-- | The opacity of the color gradient.
LGradientOpacity :: Opacity -> LegendProperty

-- | The color of the gradient stroke.
LGradientStrokeColor :: Color -> LegendProperty

-- | The width, in pixels, of the gradient stroke.
LGradientStrokeWidth :: Double -> LegendProperty

-- | The thickness, in pixels, of the color gradient.
LGradientThickness :: Double -> LegendProperty

-- | The <a>grid layout</a> for the symbol legends.
LGridAlign :: CompositionAlignment -> LegendProperty

LLabelAlign :: HAlign -> LegendProperty

LLabelBaseline :: VAlign -> LegendProperty

-- | The color of the legend label.
LLabelColor :: Color -> LegendProperty

-- | Customize the legend label. The default text and value can be accessed
--   with the <tt>datum.label</tt> and <tt>datum.value</tt> expressions.
--   
--   <pre>
--   LLabelExpr "'&lt;' + datum.label + '&gt;'"
--   </pre>
LLabelExpr :: VegaExpr -> LegendProperty

LLabelFont :: Text -> LegendProperty

LLabelFontSize :: Double -> LegendProperty

LLabelFontStyle :: Text -> LegendProperty

LLabelFontWeight :: FontWeight -> LegendProperty

LLabelLimit :: Double -> LegendProperty

LLabelOffset :: Double -> LegendProperty

LLabelOpacity :: Opacity -> LegendProperty

LLabelOverlap :: OverlapStrategy -> LegendProperty

LLabelPadding :: Double -> LegendProperty

LLabelSeparation :: Double -> LegendProperty

-- | The offset in pixels by which to displace the legend from the data
--   rectangle and axes.
LOffset :: Double -> LegendProperty

-- | The legend orientation.
LOrient :: LegendOrientation -> LegendProperty

-- | The padding, in pixels, between the border and content of the legend
--   group.
LPadding :: Double -> LegendProperty

-- | The vertical padding, in pixels, between symbol legend entries.
LRowPadding :: Double -> LegendProperty

-- | The border stroke color for the full legend.
LStrokeColor :: Color -> LegendProperty

-- | The dash pattern for symbols.
LSymbolDash :: DashStyle -> LegendProperty

-- | The offset for the dash pattern.
LSymbolDashOffset :: DashOffset -> LegendProperty

-- | The fill color of the legend symbol.
LSymbolFillColor :: Color -> LegendProperty

-- | The maximum numbed of entries to show in the legend. Additional
--   entries are dropped.
LSymbolLimit :: Int -> LegendProperty

-- | The horizontal pixel offset for legend symbols.
LSymbolOffset :: Double -> LegendProperty

-- | The opacity of the legend symbols.
LSymbolOpacity :: Opacity -> LegendProperty

-- | The size of the legend symbol, in pixels.
LSymbolSize :: Double -> LegendProperty

-- | The edge color of the legend symbol.
LSymbolStrokeColor :: Color -> LegendProperty

-- | The width of the sumbol's stroke.
LSymbolStrokeWidth :: Double -> LegendProperty

LSymbolType :: Symbol -> LegendProperty

-- | The desired number of tick values for quantitative legends.
--   
--   The <a>LTickCountTime</a> option can instead be used for "time" or
--   "utc" scales.
LTickCount :: Double -> LegendProperty

-- | A specialised version of <a>LTickCount</a> for "time" and "utc" time
--   scales.
--   
--   The <a>IsNice</a> and <a>NTickCount</a> options should not be used as
--   they generate invalid VegaLite.
LTickCountTime :: ScaleNice -> LegendProperty

-- | The minimum desired step between legend ticks, in terms of the scale
--   domain values.
LTickMinStep :: Double -> LegendProperty
LTitle :: Text -> LegendProperty

-- | Draw no title.
LNoTitle :: LegendProperty

LTitleAlign :: HAlign -> LegendProperty

LTitleAnchor :: APosition -> LegendProperty

LTitleBaseline :: VAlign -> LegendProperty

LTitleColor :: Color -> LegendProperty

LTitleFont :: Text -> LegendProperty

LTitleFontSize :: Double -> LegendProperty

LTitleFontStyle :: Text -> LegendProperty

LTitleFontWeight :: FontWeight -> LegendProperty

-- | The maximum allowed pixel width of the legend title.
LTitleLimit :: Double -> LegendProperty

-- | The line height, in pixels, for multi-line title text.
LTitleLineHeight :: Double -> LegendProperty

-- | Opacity of the legend title.
LTitleOpacity :: Opacity -> LegendProperty

-- | Orientation of the legend title.
LTitleOrient :: Side -> LegendProperty

-- | The padding, in pixels, between title and legend.
LTitlePadding :: Double -> LegendProperty

-- | The type of the legend.
LType :: LegendType -> LegendProperty

-- | Explicitly set the visible legend values.
LValues :: LegendValues -> LegendProperty

-- | Custom x position, in pixels, for the legend when <a>LOrient</a> is
--   set to <a>LONone</a>.
LeX :: Double -> LegendProperty

-- | Custom y position, in pixels, for the legend when <a>LOrient</a> is
--   set to <a>LONone</a>.
LeY :: Double -> LegendProperty

-- | The z-index at which to draw the legend.
LZIndex :: ZIndex -> LegendProperty

-- | Indicates the legend orientation. See the <a>Vega-Lite
--   documentation</a> for more details.
data LegendOrientation
LONone :: LegendOrientation
LOLeft :: LegendOrientation
LORight :: LegendOrientation

LOTop :: LegendOrientation

LOBottom :: LegendOrientation
LOTopLeft :: LegendOrientation
LOTopRight :: LegendOrientation
LOBottomLeft :: LegendOrientation
LOBottomRight :: LegendOrientation

-- | A list of data values suitable for setting legend values, used with
--   <a>LValues</a>.
data LegendValues
LDateTimes :: [[DateTime]] -> LegendValues
LNumbers :: [Double] -> LegendValues
LStrings :: [Text] -> LegendValues

-- | Encode a text channel. See the <a>Vega-Lite documentation</a> for
--   further details on the text and tooltip channels and <a>Vega-Lite
--   formatting documentation</a> for formatting the appearance of the
--   text.
--   
--   <pre>
--   <a>encoding</a>
--       . <a>position</a> <a>X</a> [ <a>PName</a> "miles", <a>PmType</a> <a>Quantitative</a> ]
--       . <a>position</a> <a>Y</a> [ <a>PName</a> "gas", <a>PmType</a> <a>Quantitative</a> ]
--       . <a>text</a> [ <a>TName</a> "miles", <a>TmType</a> <a>Quantitative</a> ]
--   </pre>
text :: [TextChannel] -> BuildEncodingSpecs

-- | Encode a tooltip channel. See the <a>Vega-Lite documentation</a> for
--   further details on the text and tooltip channels and <a>Vega-Lite
--   formatting documentation</a> for formatting the appearance of the
--   text.
--   
--   <pre>
--   enc = <a>encoding</a>
--           . <a>position</a> <a>X</a> [ <a>PName</a> "Horsepower", <a>PmType</a> <a>Quantitative</a> ]
--           . <a>position</a> <a>Y</a> [ <a>PName</a> "Miles_per_Gallon", <a>PmType</a> <a>Quantitative</a> ]
--           . <a>tooltip</a> [ <a>TName</a> "Year", <a>TmType</a> <a>Temporal</a>, <a>TFormat</a> "%Y" ]
--   </pre>
--   
--   To encode multiple tooltip values with a mark, use <a>tooltips</a>.
tooltip :: [TextChannel] -> BuildEncodingSpecs

-- | Encode a tooltip channel using multiple data fields.
--   
--   <pre>
--   <a>encoding</a>
--       . <a>position</a> <a>X</a> [ <a>PName</a> "Horsepower", <a>PmType</a> <a>Quantitative</a> ]
--       . <a>position</a> <a>Y</a> [ <a>PName</a> "Miles_per_Gallon", <a>PmType</a> <a>Quantitative</a> ]
--       . <a>tooltips</a> [ [ <a>TName</a> "Year",  <a>TmType</a> <a>Temporal</a>, <a>TFormat</a> "%Y" ]
--                  , [ <a>TName</a> "Month", <a>TmType</a> <a>Temporal</a>, <a>TFormat</a> "%Y" ] ]
--   </pre>
tooltips :: [[TextChannel]] -> BuildEncodingSpecs

-- | Types of text channel property used for displaying text as part of the
--   visualization.
data TextChannel

-- | Name of the field used for encoding with a text channel.
TName :: FieldName -> TextChannel

-- | Reference in a text channel to a field name generated by
--   <a>repeatFlow</a> or <a>repeat</a>. The parameter identifies whether
--   reference is being made to fields that are to be arranged in columns,
--   in rows, or a with a flow layout.
TRepeat :: Arrangement -> TextChannel

-- | Reference in a text channel to a datum value generated by
--   <a>repeatFlow</a> or <a>repeat</a>. The parameter identifies whether
--   reference is being made to a datum that is to be encoded in layers, or
--   in columns or rows in a flow layout.
TRepeatDatum :: Arrangement -> TextChannel

-- | Level of measurement when encoding with a text channel.
TmType :: Measurement -> TextChannel

-- | Compute some aggregate summary statistics for a field to be encoded
--   with a text channel. The type of aggregation is determined by the
--   given operation parameter.
TAggregate :: Operation -> TextChannel

-- | Specify the mark position or size relative to the band size. The value
--   is in the range 0 to 1, inclusive.
TBand :: Double -> TextChannel

-- | Discretize numeric values into bins when encoding with a text channel.
TBin :: [BinProperty] -> TextChannel

-- | Indicate that data encoded with a text channel are already binned.
TBinned :: TextChannel

-- | Make a text channel conditional on one or more predicate expressions.
--   The first parameter is a list of tuples each pairing an expression to
--   evaluate with the encoding if that expression is <tt>True</tt>. The
--   second is the encoding if none of the expressions evaluate as
--   <tt>True</tt>.
--   
--   The arguments to this constructor have changed in <tt>0.4.0.0</tt> to
--   support multiple expressions.
TDataCondition :: [(BooleanOp, [TextChannel])] -> [TextChannel] -> TextChannel

-- | Make a text channel conditional on interactive selection. The first
--   parameter is a selection condition to evaluate; the second the
--   encoding to apply if that selection is true; the third parameter is
--   the encoding if the selection is false.
TSelectionCondition :: BooleanOp -> [TextChannel] -> [TextChannel] -> TextChannel

-- | A constant value in the data domain.
TDatum :: DataValue -> TextChannel

-- | <a>Formatting pattern</a> for text marks. To distinguish between
--   formatting as numeric values and data/time values, additionally use
--   <a>TFormatAsNum</a>, <a>TFormatAsTemporal</a>, and
--   <a>TFormatAsCustom</a>.
TFormat :: Text -> TextChannel

-- | The text marks should be formatted as numbers. Use a <a>d3 numeric
--   format string</a> with <a>TFormat</a>.
TFormatAsNum :: TextChannel

-- | The text marks should be formatted as dates or times. Use a <a>d3
--   date/time format string</a> with <a>TFormat</a>.
TFormatAsTemporal :: TextChannel

-- | The <a>custom format type</a> for use with with <a>TFormat</a>.
TFormatAsCustom :: Text -> TextChannel

-- | Provide the expression used to generate labels.
TLabelExpr :: VegaExpr -> TextChannel

-- | A literal value for encoding a text property channel. See also
--   <a>TStrings</a>.
--   
--   This can be useful for a text annotation, such as:
--   
--   <pre>
--   <a>encoding</a>
--      . <a>position</a> <a>X</a> [ <a>PNumber</a> 300 ]
--      . <a>position</a> <a>Y</a> [ <a>PNumber</a> 1234 ]
--      . <a>text</a> [ <a>TString</a> "Upper limit" ]
--   
--   </pre>
TString :: Text -> TextChannel

-- | A multi-line value. See also <a>TString</a>.
TStrings :: [Text] -> TextChannel

-- | Time unit aggregation of field values when encoding with a text
--   channel.
TTimeUnit :: TimeUnit -> TextChannel

-- | Title of a field when encoding with a text or tooltip channel.
TTitle :: Text -> TextChannel

-- | Display no title.
TNoTitle :: TextChannel

-- | Indicates the weight options for a font.
data FontWeight
Bold :: FontWeight
Bolder :: FontWeight
Lighter :: FontWeight
Normal :: FontWeight
W100 :: FontWeight
W200 :: FontWeight
W300 :: FontWeight
W400 :: FontWeight
W500 :: FontWeight
W600 :: FontWeight
W700 :: FontWeight
W800 :: FontWeight
W900 :: FontWeight

-- | Encode a hyperlink channel.
--   
--   <pre>
--   <a>encoding</a>
--     . <a>hyperlink</a> [ <a>HName</a> "Species", <a>HmType</a> <a>Nominal</a> ]
--   </pre>
--   
--   <pre>
--   <a>encoding</a>
--     . <a>hyperlink</a> [ <a>HString</a> "http://www.imdb.com" ]
--   </pre>
--   
--   For further details see the <a>Vega-Lite documentation</a>.
hyperlink :: [HyperlinkChannel] -> BuildEncodingSpecs

-- | Types of hyperlink channel property used for linking marks or text to
--   URLs.
--   
--   Unfortunately there is a split between <tt>H</tt> and <tt>Hy</tt> as
--   the prefix.
data HyperlinkChannel

-- | Field used for encoding with a hyperlink channel.
HName :: FieldName -> HyperlinkChannel

-- | Reference in a hyperlink channel to a field name generated by
--   <a>repeatFlow</a> or <a>repeat</a>. The parameter identifies whether
--   reference is being made to fields that are to be arranged in columns,
--   in rows, or a with a flow layout.
HRepeat :: Arrangement -> HyperlinkChannel

-- | Level of measurement when encoding with a hyperlink channel.
HmType :: Measurement -> HyperlinkChannel

-- | Compute aggregate summary statistics for a field to be encoded with a
--   hyperlink channel.
HAggregate :: Operation -> HyperlinkChannel

-- | Specify the mark position or size relative to the band size. The value
--   is in the range 0 to 1, inclusive.
HyBand :: Double -> HyperlinkChannel

-- | Discretize numeric values into bins when encoding with a hyperlink
--   channel.
HBin :: [BinProperty] -> HyperlinkChannel

-- | Indicate that data encoded with a hyperlink channel are already
--   binned.
HBinned :: HyperlinkChannel

-- | Make a hyperlink channel conditional on interactive selection. The
--   first parameter provides the selection to evaluate, the second the
--   encoding to apply if the hyperlink has been selected, the third the
--   encoding if it is not selected.
HSelectionCondition :: BooleanOp -> [HyperlinkChannel] -> [HyperlinkChannel] -> HyperlinkChannel

-- | Make a hyperlink channel conditional on one or more predicate
--   expressions. The first parameter is a list of tuples each pairing an
--   expression to evaluate with the encoding if that expression is
--   <tt>True</tt>. The second is the encoding if none of the expressions
--   evaluate as <tt>True</tt>.
--   
--   The arguments to this constructor have changed in <tt>0.4.0.0</tt> to
--   support multiple expressions.
HDataCondition :: [(BooleanOp, [HyperlinkChannel])] -> [HyperlinkChannel] -> HyperlinkChannel

-- | <a>Formatting pattern</a> for hyperlink properties. To distinguish
--   between formatting as numeric values and data/time values,
--   additionally use <a>HyFormatAsNum</a>, <a>HyFormatAsTemporal</a>, and
--   <a>HyFormatAsCustom</a>.
HyFormat :: Text -> HyperlinkChannel

-- | The marks should be formatted as numbers. Use a <a>d3 numeric format
--   string</a> with <a>HyFormat</a>.
HyFormatAsNum :: HyperlinkChannel

-- | The marks should be formatted as dates or times. Use a <a>d3 date/time
--   format string</a> with <a>HyFormat</a>.
HyFormatAsTemporal :: HyperlinkChannel

-- | The <a>custom format type</a> for use with with <a>HyFormat</a>.
HyFormatAsCustom :: Text -> HyperlinkChannel

-- | Provide the expression used to generate labels.
HyLabelExpr :: VegaExpr -> HyperlinkChannel

-- | Literal string value when encoding with a hyperlink channel.
HString :: Text -> HyperlinkChannel

-- | Time unit aggregation of field values when encoding with a hyperlink
--   channel.
HTimeUnit :: TimeUnit -> HyperlinkChannel

-- | Title of a field when encoding with a hyperlink channel.
HyTitle :: Text -> HyperlinkChannel

-- | Display no title.
HyNoTitle :: HyperlinkChannel

-- | Encode a URL for use with the <a>Image</a> mark type.
--   
--   The URL can be encoded directly:
--   
--   <pre>
--   let axVals = <a>Numbers</a> [ 0.5, 1.5, 2.5 ]
--   
--       dvals = <a>dataFromColumns</a> []
--               . <a>dataColumn</a> "x" axVals
--               . <a>dataColumn</a> "y" axVals
--   
--       enc = <a>encoding</a>
--             . <a>position</a> <a>X</a> [ <a>PName</a> "x", <a>PmType</a> <a>Quantitative</a> ]
--             . <a>position</a> <a>Y</a> [ <a>PName</a> "y", <a>PmType</a> <a>Quantitative</a> ]
--             . <a>url</a> [ <a>HString</a> "wonderful-image.png" ]
--   
--       imMark = <a>mark</a> <a>Image</a> [ <a>MWidth</a> 50, <a>MHeight</a> 25 ]
--   
--   in <a>toVegaLite</a> [ dvals [], enc [], imMark ]
--   </pre>
--   
--   or by referencing a data field containing the URL values:
--   
--   <pre>
--   ... <a>dataColumn</a> "img" (<a>Strings</a> [ "i1.png", "i2.png", "i4.png" ])
--   
--   ... <a>url</a> [ <a>HName</a> "img", <a>HmType</a> <a>Nominal</a> ]
--   </pre>
url :: [HyperlinkChannel] -> BuildEncodingSpecs

-- | Encode an order channel.
--   
--   <pre>
--   <a>encoding</a>
--       . <a>position</a> <a>X</a> [ <a>PName</a> "miles", <a>PmType</a> <a>Quantitative</a> ]
--       . <a>position</a> <a>Y</a> [ <a>PName</a> "gas", <a>PmType</a> <a>Quantitative</a> ]
--       . <a>order</a> [ <a>OName</a> "year", <a>OmType</a> <a>Temporal</a>, <a>OSort</a> [<a>Descending</a>] ]
--   </pre>
--   
--   <a>Conditional values</a> can be set with <a>OSelectionCondition</a>,
--   such as
--   
--   <pre>
--   <a>order</a> [ <a>OSelectionCondition</a> ('SelectionName "highlight")
--             [<a>ONumber</a> 1] [<a>ONumber</a> 0]
--   </pre>
order :: [OrderChannel] -> BuildEncodingSpecs

-- | Properties of an ordering channel used for sorting data fields.
data OrderChannel

-- | The name of the field used for encoding with an order channel.
OName :: FieldName -> OrderChannel

-- | Reference in an order channel to a field name generated by
--   <a>repeatFlow</a> or <a>repeat</a>. The parameter identifies whether
--   reference is being made to fields that are to be arranged in columns,
--   in rows, or a with a flow layout.
ORepeat :: Arrangement -> OrderChannel

-- | Compute some aggregate summary statistics for a field to be encoded
--   with an order channel.
OAggregate :: Operation -> OrderChannel

-- | For rect-based marks, define the mark size relative to the bandwidth
--   of band scales, bins, or time units: a value of 1 uses the range and
--   0.5 half the range. For other marks it defines the relative position
--   in a band of a stacked, binned, time unit, or band scale: if 0 the
--   marks will be positioned at the beginning of the band and 0.5 gives
--   the middle of the band.
--   
--   The argument must be in the range 0 to 1, inclusive, but there is no
--   check on this.
OBand :: Double -> OrderChannel

-- | Discretize numeric values into bins when encoding with an order
--   channel.
OBin :: [BinProperty] -> OrderChannel

-- | Sort order for field when encoding with an order channel.
OSort :: [SortProperty] -> OrderChannel

-- | Form of time unit aggregation of field values when encoding with an
--   order channel.
OTimeUnit :: TimeUnit -> OrderChannel

-- | The title for the field.
--   
--   Note that if both the field and axis, header, or legend titles are
--   defined than the latter (axis, header, or legend) will be used.
OTitle :: Text -> OrderChannel

-- | Remove the title.
ONoTitle :: OrderChannel

-- | The level of measurement when encoding with an order channel.
OmType :: Measurement -> OrderChannel

-- | Make an order channel conditional on one or more predicate
--   expressions. The first parameter is a list of tuples each pairing an
--   expression to evaluate with the encoding if that expression is
--   <tt>True</tt>. The second is the encoding if none of the expressions
--   evaluate as <tt>True</tt>.
ODataCondition :: [(BooleanOp, [OrderChannel])] -> [OrderChannel] -> OrderChannel

-- | Make an order channel conditional on interactive selection. The first
--   parameter is a selection condition to evaluate; the second the
--   encoding to apply if that selection is true; the third parameter is
--   the encoding if the selection is false.
--   
--   An example:
--   
--   <pre>
--   <a>order</a> [<a>OSelectionCondition</a> (<a>SelectionName</a> "highlight")
--              [<a>ONumber</a> 1] [<a>ONumber</a> 0]]
--   </pre>
OSelectionCondition :: BooleanOp -> [OrderChannel] -> [OrderChannel] -> OrderChannel

-- | Create a value with this number. For use with
--   <a>OSelectionCondition</a> and <a>ODataCondition</a>.
ONumber :: Double -> OrderChannel

-- | Encode a new facet to be arranged in rows.
--   
--   See the <a>Vega-Lite row documentation</a>.
--   
--   Note that when faceting, dimensions specified with <a>width</a> and
--   <a>height</a> refer to the individual faceted plots, not the whole
--   visualization.
--   
--   <pre>
--   let dvals = <a>dataFromUrl</a> "crimeData.csv"
--       enc = <a>encoding</a>
--               . <a>position</a> <a>X</a> [<a>PName</a> "month", <a>PmType</a> <a>Temporal</a>]
--               . <a>position</a> <a>Y</a> [<a>PName</a> "reportedCrimes"
--                            , <a>PmType</a> <a>Quantitative</a>
--                            , <a>PAggregate</a> <a>Sum</a>
--                            , <a>PAxis</a> [<a>AxNoTitle</a>]
--                            ]
--               . <a>row</a> [<a>FName</a> "crimeType", <a>FmType</a> <a>Nominal</a>]
--   
--   in <a>toVegaLite</a> [<a>height</a> 80, dvals [], <a>mark</a> <a>Bar</a> [], enc []]
--   </pre>
row :: [FacetChannel] -> BuildEncodingSpecs

-- | Encodes a new facet to be arranged in columns. See the <a>Vega-Lite
--   column documentation</a>.
--   
--   Note that when faceting, dimensions specified with <a>width</a> and
--   <a>height</a> refer to the individual faceted plots, not the overall
--   visualization.
--   
--   <pre>
--   let dvals = <a>dataFromUrl</a> "crimeData.csv"
--       enc = <a>encoding</a>
--               . <a>position</a> <a>X</a> [<a>PName</a> "month", <a>PmType</a> <a>Temporal</a>]
--               . <a>position</a> <a>Y</a> [<a>PName</a> "reportedCrimes", <a>PmType</a> <a>Quantitative</a>
--                            , <a>PAggregate</a> <a>Sum</a>]
--               . <a>column</a> [<a>FName</a> "crimeType", <a>FmType</a> <a>Nominal</a>]
--   
--       in <a>toVegaLite</a> [<a>width</a> 100, dvals [], <a>mark</a> <a>Bar</a> [], enc [] ]
--   </pre>
column :: [FacetChannel] -> BuildEncodingSpecs

-- | Encode a "level of detail" channel. This provides a way of grouping by
--   a field but unlike, say <a>color</a>, all groups have the same visual
--   properties.
--   
--   See the <a>Vega-Lite documentation</a> for details.
--   
--   <pre>
--   <a>detail</a> [<a>DName</a> "Species", <a>DmType</a> <a>Nominal</a>] []
--   </pre>
detail :: [DetailChannel] -> BuildEncodingSpecs

-- | Level of detail channel properties used for creating a grouped channel
--   encoding.
data DetailChannel

-- | The name of the field.
DName :: FieldName -> DetailChannel

-- | The measurement type of the field.
DmType :: Measurement -> DetailChannel

-- | How to convert discrete numeric values into bins.
DBin :: [BinProperty] -> DetailChannel

-- | The form of time unit aggregation.
DTimeUnit :: TimeUnit -> DetailChannel

-- | How should the detail field be aggregated?
DAggregate :: Operation -> DetailChannel

-- | Encode an Aria description.
ariaDescription :: [AriaDescriptionChannel] -> BuildEncodingSpecs

-- | A text description of this mark for ARIA accessibility.
data AriaDescriptionChannel

-- | Field used for encoding with an Aria description.
ADName :: FieldName -> AriaDescriptionChannel

-- | Reference in an Aria description channel to a field name generated by
--   <a>repeatFlow</a> or <a>repeat</a>. The parameter identifies whether
--   reference is being made to fields that are to be arranged in columns,
--   in rows, or a with a flow layout.
ADRepeat :: Arrangement -> AriaDescriptionChannel

-- | Level of measurement.
ADmType :: Measurement -> AriaDescriptionChannel

-- | Compute aggregate summary statistics for a field to be encoded.
ADAggregate :: Operation -> AriaDescriptionChannel

-- | Specify the mark position or size relative to the band size. The value
--   is in the range 0 to 1, inclusive.
ADBand :: Double -> AriaDescriptionChannel

-- | Discretize numeric values into bins.
ADBin :: [BinProperty] -> AriaDescriptionChannel

-- | Indicate that data encoded are already binned.
ADBinned :: AriaDescriptionChannel

-- | Make the channel conditional on interactive selection. The first
--   parameter provides the selection to evaluate, the second the encoding
--   to apply if the description has been selected, the third the encoding
--   if it is not selected.
ADSelectionCondition :: BooleanOp -> [AriaDescriptionChannel] -> [AriaDescriptionChannel] -> AriaDescriptionChannel

-- | Make the channel conditional on one or more predicate expressions. The
--   first parameter is a list of tuples each pairing an expression to
--   evaluate with the encoding if that expression is <tt>True</tt>. The
--   second is the encoding if none of the expressions evaluate as
--   <tt>True</tt>.
ADDataCondition :: [(BooleanOp, [AriaDescriptionChannel])] -> [AriaDescriptionChannel] -> AriaDescriptionChannel

-- | <a>Formatting pattern</a> for descriptions. To distinguish between
--   formatting as numeric values and data/time values, additionally use
--   <a>ADFormatAsNum</a>, <a>ADFormatAsTemporal</a>, and
--   <a>ADFormatAsCustom</a>.
ADFormat :: Text -> AriaDescriptionChannel

-- | The marks should be formatted as numbers. Use a <a>d3 numeric format
--   string</a> with <a>ADFormat</a>.
ADFormatAsNum :: AriaDescriptionChannel

-- | The marks should be formatted as dates or times. Use a <a>d3 date/time
--   format string</a> with <a>ADFormat</a>.
ADFormatAsTemporal :: AriaDescriptionChannel

-- | The <a>custom format type</a> for use with with <a>ADFormat</a>.
ADFormatAsCustom :: Text -> AriaDescriptionChannel

-- | Provide the expression used to generate labels.
ADLabelExpr :: VegaExpr -> AriaDescriptionChannel

-- | Literal string value.
ADString :: Text -> AriaDescriptionChannel

-- | Time unit aggregation of field values when encoding with an Aria
--   description channel.
ADTimeUnit :: TimeUnit -> AriaDescriptionChannel

-- | Title of a field when encoding with an Aria description channel.
ADTitle :: Text -> AriaDescriptionChannel

-- | Display no title.
ADNoTitle :: AriaDescriptionChannel

-- | Individual scale property. These are used to customise an individual
--   scale transformation. To customise all scales use <a>configure</a> and
--   supply relevant <a>ScaleConfig</a> values. For more details see the
--   <a>Vega-Lite documentation</a>.
--   
--   There are two utility routines for constructing a list of scale
--   properties: <a>categoricalDomainMap</a> and <a>domainRangeMap</a>.
--   
--   The <tt>SRangeStep</tt> constructor was removed in version
--   <tt>0.5.0.0</tt>. Users should use the <a>heightStep</a> and
--   <a>widthStep</a> functions instead.
--   
--   The <tt>SReverse</tt> constructor was removed in version
--   <tt>0.4.0.0</tt>, as it represented a Vega, rather than Vega-Lite,
--   property. The order of a scale can be changed with the <a>PSort</a>
--   constructor.
data ScaleProperty

-- | Type of scaling to apply.
SType :: Scale -> ScaleProperty

-- | Alignment of the steps within the scale range. A value of <tt>0</tt>
--   shifts the bands to an axis, <tt>1</tt> away from the axis, and
--   <tt>0.5</tt> is centered within the range.
--   
--   The input is clamped so that values less than 0 are mapped to 0 and
--   greater than 1 to 1.
SAlign :: Double -> ScaleProperty

-- | The base to use for log scaling (<a>ScLog</a>).
--   
--   Default is <tt>10</tt>.
SBase :: Double -> ScaleProperty

-- | An array of bin boundaries over the scale domain. If give, axes and
--   legends will use these boundaries to inform the choice of tick marks
--   and text labels.
SBins :: [Double] -> ScaleProperty

-- | Should values outside the data domain be clamped (to the minimum or
--   maximum value)?
SClamp :: Bool -> ScaleProperty

-- | The desired slope of the <a>ScSymLog</a> function at zero.
--   
--   The default is <tt>1</tt>.
SConstant :: Double -> ScaleProperty

-- | Custom scaling domain. See also <a>SDomainOpt</a>.
--   
--   In verson <tt>0.11.0.0</tt> some functionality was moved to
--   <a>SDomainOpt</a>.
SDomain :: DomainLimits -> ScaleProperty

-- | Set the mid-point of a continuous diverging domain.
--   
--   This is deprecated as of 0.11.0.0 and <tt><a>SDomainOpt</a>
--   (<a>DMid</a> x)</tt> should be used instead.
SDomainMid :: Double -> ScaleProperty

-- | Custom scaling domain. See also <a>SDomain</a>.
SDomainOpt :: ScaleDomain -> ScaleProperty

-- | The exponent to use for power scaling (<a>ScPow</a>).
SExponent :: Double -> ScaleProperty

-- | Interpolation method for scaling range values.
SInterpolate :: CInterpolate -> ScaleProperty

-- | "Nice" minimum and maximum values in a scaling (e.g. multiples of 10).
SNice :: ScaleNice -> ScaleProperty

-- | Padding in pixels to apply to a scaling.
SPadding :: Double -> ScaleProperty

-- | Inner padding to apply to a band scaling.
SPaddingInner :: Double -> ScaleProperty

-- | Outer padding to apply to a band scaling.
SPaddingOuter :: Double -> ScaleProperty

-- | Range of a scaling. The type of range depends on the encoding channel.
SRange :: ScaleRange -> ScaleProperty

-- | Should the order of the scale range be reversed?
SReverse :: Bool -> ScaleProperty

-- | Are numeric values in a scaling rounded to integers?
--   
--   The default is <tt>False</tt>.
SRound :: Bool -> ScaleProperty

-- | Color scheme used by a color scaling. The first parameter is the name
--   of the scheme (e.g. "viridis") and the second an optional
--   specification, which can contain 1, 2, or 3 numbers:
--   
--   <ul>
--   <li>the number of colors to use (list of one number);</li>
--   <li>the extent of the color range to use (list of two numbers between
--   0 and 1);</li>
--   <li>the number of colors and extent (three numbers, first is the
--   number of colors).</li>
--   </ul>
--   
--   For the full list of supported schemes, please refer to the <a>Vega
--   Scheme</a> reference.
--   
--   The number of colors was broken prior to <tt>0.4.0.0</tt> and the
--   option to define both the count and extent was added in
--   <tt>0.4.0.0</tt>.
SScheme :: Text -> [Double] -> ScaleProperty

-- | Should a numeric scaling be forced to include a zero value?
--   
--   Not all scales support <tt>SZero</tt> and the default depends on the
--   type of channel.
SZero :: Bool -> ScaleProperty

-- | Used to indicate the type of scale transformation to apply. The
--   <a>Vega-Lite scale documentation</a> defines which of these are for
--   continuous or discrete distributions, and what the defaults are for
--   the combination of data type and encoding channel.
--   
--   The <a>Scale</a> type is used with the <a>SType</a> constructor to set
--   up the scaling properties of an encoding. Examples:
--   
--   <pre>
--   <a>PScale</a> [ <a>SType</a> ScTime ]
--   <a>color</a> [ <a>MName</a> "Acceleration"
--         , <a>MmType</a> <a>Quantitative</a>
--         , <a>MScale</a> [ <a>SType</a> ScLog, <a>SRange</a> (<a>RStrings</a> ["yellow", "red"]) ]
--         ]
--   </pre>
--   
--   The <tt>ScBinLinear</tt> constructor was removed in <tt>0.8.0.0</tt>
--   because it was not used by Vega-Lite.
--   
--   The <tt>0.4.0.0</tt> release removed the <tt>ScSequential</tt>
--   constructor, as <a>ScLinear</a> should be used instead.
data Scale

-- | A linear scale.
ScLinear :: Scale

-- | A log scale. Defaults to log of base 10, but can be customised with
--   <a>SBase</a>.
ScLog :: Scale

-- | A power scale. The exponent to use for scaling is specified with
--   <a>SExponent</a>.
ScPow :: Scale

-- | A square-root scale.
ScSqrt :: Scale

-- | A <a>symmetrical log (PDF link)</a> scale. Similar to a log scale but
--   supports zero and negative values. The slope of the function at zero
--   can be set with <a>SConstant</a>.
--   
--   | ScIdentity added in Vega-Lite 4.4, no documentation | ScSequential
--   added in Vega-Lite 4.4, no documentation, not clear if any different
--   from linear
ScSymLog :: Scale

-- | A temporal scale.
ScTime :: Scale

-- | A temporal scale, in UTC.
ScUtc :: Scale

-- | A quantile scale.
ScQuantile :: Scale

-- | A quantizing scale.
ScQuantize :: Scale

-- | A threshold scale.
ScThreshold :: Scale

-- | An ordinal band scale.
ScBinOrdinal :: Scale

-- | An ordinal scale.
ScOrdinal :: Scale

-- | A point scale.
ScPoint :: Scale

-- | A band scale.
ScBand :: Scale

-- | Create a set of discrete domain to color mappings suitable for
--   customising categorical scales. The first item in each tuple should be
--   a domain value and the second the color value with which it should be
--   associated. It is a convenience function equivalent to specifying
--   separate <a>SDomain</a> and <a>SRange</a> lists and is safer as it
--   guarantees a one-to-one correspondence between domain and range
--   values.
--   
--   <pre>
--   <a>color</a>
--       [ <a>MName</a> "weather"
--       , <a>MmType</a> Nominal
--       , <a>MScale</a> (
--           categoricalDomainMap
--               [ ( "sun", "yellow" )
--               , ( "rain", "blue" )
--               , ( "fog", "grey" )
--               ]
--           )
--       ]
--   </pre>
categoricalDomainMap :: [(Text, Color)] -> [ScaleProperty]

-- | Create a pair of continuous domain to color mappings suitable for
--   customising ordered scales. The first parameter is a tuple
--   representing the mapping of the lowest numeric value in the domain to
--   its equivalent color; the second tuple the mapping of the highest
--   numeric value to color. If the domain contains any values between
--   these lower and upper bounds they are interpolated according to the
--   scale's interpolation function. This is a convenience function
--   equivalent to specifying separate <a>SDomain</a> and <a>SRange</a>
--   lists and is safer as it guarantees a one-to-one correspondence
--   between domain and range values.
--   
--   <pre>
--   <a>color</a>
--       [ <a>MName</a> "year"
--       , <a>MmType</a> <a>Ordinal</a>
--       , <a>MScale</a> (domainRangeMap (1955, "rgb(230,149,156)") (2000, "rgb(145,26,36)"))
--       ]
--   </pre>
domainRangeMap :: (Double, Color) -> (Double, Color) -> [ScaleProperty]

-- | Describes the scale domain (type of data in scale). For full details
--   see the <a>Vega-Lite documentation</a>.
--   
--   In <tt>0.11.0.0</tt> the functionality has been split into
--   <a>ScaleDomain</a> and <a>DomainLimits</a>.
data ScaleDomain

-- | Sets the maximum value in the scale domain. It is only intended for
--   scales with a continuous domain.
--   
--   It is supported in Vega-Lite 4.14 and later.
DMax :: Double -> ScaleDomain

-- | <a>DMax</a> for dates.
--   
--   It is supported in Vega-Lite 4.14 and later.
DMaxTime :: [DateTime] -> ScaleDomain

-- | Sets the mid-point of a continuous diverging domain.
--   
--   It replaces <a>SDomainMid</a>.
DMid :: Double -> ScaleDomain

-- | Sets the minimum value in the scale domain. It is only intended for
--   scales with a continuous domain.
--   
--   It is supported in Vega-Lite 4.14 and later.
DMin :: Double -> ScaleDomain

-- | <a>DMin</a> for dates.
--   
--   It is supported in Vega-Lite 4.14 and later.
DMinTime :: [DateTime] -> ScaleDomain

-- | Scale domain based on a named interactive selection. See also
--   <a>DSelectionField</a> and <a>DSelectionChannel</a>, which should be
--   used when a selection is <a>projected</a> over multiple fields or
--   encodings.
--   
--   In <tt>0.7.0.0</tt> the argument type was changed to
--   <tt>SelectionLabel</tt> (which is a type synonym for <tt>Text</tt>).
DSelection :: SelectionLabel -> ScaleDomain

-- | Use the given selection <i>and</i> associated field, when the
--   selection is projected over multiple fields or encodings.
DSelectionField :: SelectionLabel -> FieldName -> ScaleDomain

-- | Use the given selection <i>and</i> associated encoding, when the
--   selection is projected over multiple fields or encodings.
DSelectionChannel :: SelectionLabel -> Channel -> ScaleDomain

-- | Combine the domain of the data with the provided domain.
--   
--   The following example will use a range of at least 0 to 100, but this
--   will be increased if the data (either initially or via any updates to
--   the Vege-Lite visualization) exceeds this:
--   
--   <pre>
--   <a>PScale</a> [<a>SDomainOpt</a> (DUnionWith (<a>DNumbers</a> [0, 100]))]
--   </pre>
DUnionWith :: DomainLimits -> ScaleDomain

-- | Indicate that a domain of aggregated data should be scaled to the
--   domain of the data prior to aggregation.
Unaggregated :: ScaleDomain

-- | Represent the range of the domain, which is used by <a>SDomain</a> and
--   <a>DUnionWith</a>.
--   
--   Prior to <tt>0.11.0.0</tt> this was part of <a>ScaleDomain</a>.
data DomainLimits

-- | Numeric values that define a scale domain.
--   
--   It is expected that this contains two values (minimum and maximum),
--   but more can be given for <a>piecewise quantitative scales</a>.
DNumbers :: [Double] -> DomainLimits

-- | String values that define a scale domain
DStrings :: [Text] -> DomainLimits

-- | Date-time values that define a scale domain.
DDateTimes :: [[DateTime]] -> DomainLimits

-- | Describes a scale range of scale output values. For full details see
--   the <a>Vega-Lite documentation</a>.
--   
--   For color scales you can also specify a color <a>scheme</a> instead of
--   range.
--   
--   Any directly specified range for <tt>x</tt> and <tt>y</tt> channels
--   will be ignored. Range can be customized via the view's corresponding
--   <a>size</a> (<a>width</a> and <a>height</a>) or via range steps and
--   paddings properties (e.g. <a>SCRangeStep</a>) for band and point
--   scales.
data ScaleRange

-- | For <a>discrete</a> and <a>discretizing</a> scales, the name if the
--   field to use.
--   
--   For example. if the field "color" contains CSS color names, we can say
--   <tt>RField "color"</tt>.
--   
--   It is supported in Vega-Lite 4.14 and later.
RField :: FieldName -> ScaleRange

-- | Sets the maximum value in the scale range. It is only intended for
--   scales with a continuous range.
--   
--   It is supported in Vega-Lite 4.14 and later.
RMax :: Double -> ScaleRange

-- | Sets the minimum value in the scale range. It is only intended for
--   scales with a continuous range.
--   
--   It is supported in Vega-Lite 4.14 and later.
RMin :: Double -> ScaleRange

-- | The minimum and maximum values.
RPair :: Double -> Double -> ScaleRange

-- | Specify the width as a number and height as the string
--   <tt>"height"</tt>.
RHeight :: Double -> ScaleRange

-- | Specify the height as a number and width as the string
--   <tt>"width"</tt>.
RWidth :: Double -> ScaleRange

-- | For <a>continuous scales</a>, a two-element array indicating minimum
--   and maximum values, or an array with more than two entries for
--   specifying a <a>piecewise scale</a>.
--   
--   Support for the two-element version may be removed (ie this left only
--   for piecewise scales).
RNumbers :: [Double] -> ScaleRange

-- | A scale range comprising of numeric lists, such as custom dash styles
--   for the <a>strokeDash</a> channel encoding.
RNumberLists :: [[Double]] -> ScaleRange

-- | Text scale range for discrete scales.
RStrings :: [Text] -> ScaleRange

-- | Name of a <a>pre-defined named scale range</a> (e.g. "symbol" or
--   "diverging").
RName :: Text -> ScaleRange

-- | Describes the way a scale can be rounded to "nice" numbers. For full
--   details see the <a>Vega-Lite documentation</a>.
--   
--   Prior to version <tt>0.10.0.0</tt> the time units were included in the
--   constructors for <tt>ScaleNice</tt>.
data ScaleNice

-- | Time range.
NTU :: NTimeUnit -> ScaleNice

-- | "Nice" temporal interval values when scaling.
NInterval :: NTimeUnit -> Int -> ScaleNice

-- | Enable or disable nice scaling.
IsNice :: Bool -> ScaleNice

-- | Desired number of tick marks in a "nice" scaling.
NTickCount :: Int -> ScaleNice

-- | The time intervals that can be rounded to "nice" numbers.
--   
--   Prior to <tt>0.10.0.0</tt> these were part of <a>ScaleNice</a>.
data NTimeUnit

-- | Nice time intervals that try to align with rounded milliseconds.
NMillisecond :: NTimeUnit

-- | Nice time intervals that try to align with whole or rounded seconds.
NSecond :: NTimeUnit

-- | Nice time intervals that try to align with whole or rounded minutes.
NMinute :: NTimeUnit

-- | Nice time intervals that try to align with whole or rounded hours.
NHour :: NTimeUnit

-- | Nice time intervals that try to align with whole or rounded days.
NDay :: NTimeUnit

-- | Nice time intervals that try to align with whole or rounded weeks.
NWeek :: NTimeUnit

-- | Nice time intervals that try to align with whole or rounded months.
NMonth :: NTimeUnit

-- | Nice time intervals that try to align with whole or rounded years.
NYear :: NTimeUnit

-- | Indicates the type of color interpolation to apply, when mapping a
--   data field onto a color scale.
--   
--   For details see the <a>Vega-Lite documentation</a>.
data CInterpolate

-- | Cube helix color interpolation for continuous color scales using the
--   given gamma value (anchored at 1).
CubeHelix :: Double -> CInterpolate

-- | Long-path cube helix color interpolation for continuous color scales
--   using the given gamma value (anchored at 1).
CubeHelixLong :: Double -> CInterpolate

-- | HCL color interpolation for continuous color scales.
Hcl :: CInterpolate

-- | HCL color interpolation in polar coordinate space for continuous color
--   scales.
HclLong :: CInterpolate

-- | HSL color interpolation for continuous color scales.
Hsl :: CInterpolate

-- | HSL color interpolation in polar coordinate space for continuous color
--   scales.
HslLong :: CInterpolate

-- | Lab color interpolation for continuous color scales.
Lab :: CInterpolate

-- | RGB color interpolation for continuous color scales using the given
--   gamma value (anchored at 1).
Rgb :: Double -> CInterpolate

-- | Assigns a list of specifications to superposed layers in a
--   visualization.
--   
--   <pre>
--   <a>toVegaLite</a> [<a>dataFromUrl</a> "data/driving.json" [], layer [spec1, spec2]]
--   </pre>
--   
--   A complete example showing <tt>layer</tt> in use:
--   
--   <pre>
--   let dvals = <a>dataFromColumns</a> []
--                 . <a>dataColumn</a> "x" (<a>Numbers</a> [1, 2, 3, 4, 5])
--                 . <a>dataColumn</a> "a" (<a>Numbers</a> [28, 91, 43, 55, 81])
--       enc = <a>encoding</a>
--                . <a>position</a> <a>X</a> [<a>PName</a> "x", <a>PmType</a> <a>Ordinal</a>]
--                . <a>position</a> <a>Y</a> [<a>PName</a> "a", <a>PmType</a> <a>Quantitative</a>]
--                . <a>text</a> [<a>TName</a> "a", <a>TmType</a> <a>Nominal</a>]
--   
--       in <a>toVegaLite</a> [ dvals []
--                     , enc []
--                     , <a>layer</a> [ <a>asSpec</a> [<a>mark</a> <a>Bar</a> []]
--                             , <a>asSpec</a> [<a>mark</a> <a>Text</a> [<a>MdY</a> (-8)]]
--                             ]
--                     ]
--   </pre>
layer :: [VLSpec] -> PropertySpec

-- | The list of specifications to be juxtaposed horizontally in a flow
--   layout of views. See also <a>hConcat</a> and <a>vConcat</a>.
--   
--   The number of columns in the flow layout can be set with
--   <a>columns</a> and, if not specified, will default to a single row of
--   unlimited columns.
--   
--   <pre>
--   let dvals = <a>dataSequenceAs</a> 0 6.28 0.1 "x"
--       trans = <a>transform</a>
--                 . <a>calculateAs</a> "sin(datum.x)" "sinX"
--                 . <a>calculateAs</a> "cos(datum.x)" "cosX"
--       enc = <a>encoding</a>
--               . <a>position</a> <a>X</a> [<a>PName</a> "x", <a>PmType</a> <a>Quantitative</a>]
--       encCos = enc . <a>position</a> <a>Y</a> [<a>PName</a> "cosX", <a>PmType</a> <a>Quantitative</a>]
--       encSin = enc . <a>position</a> <a>Y</a> [<a>PName</a> "sinX", <a>PmType</a> <a>Quantitative</a>]
--   
--   in toVegaLite [ dvals
--                 , trans []
--                 , <a>vlConcat</a> [ <a>asSpec</a> [encCos [], <a>mark</a> <a>Line</a> []]
--                            , <a>asSpec</a> [encSin [], <a>mark</a> <a>Line</a> []]
--                            ]
--                 ]
--   </pre>
--   
--   This is named <tt>concat</tt> in Elm VegaLite but has been renamed
--   here to avoid conflicting with the Prelude.
vlConcat :: [VLSpec] -> PropertySpec

-- | The maximum number of columns to include in a view composition flow
--   layout. If the number of faceted small multiples exceeds this number,
--   flow moves to the next row. Only applies to flow layouts generated by
--   <a>vlConcat</a>, <a>facetFlow</a>, and <a>repeatFlow</a>.
columns :: Natural -> PropertySpec

-- | Assigns a list of specifications to be juxtaposed horizontally in a
--   visualization. See also <a>vConcat</a> and <a>vlConcat</a>.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>dataFromUrl</a> "data/driving.json" []
--       , hConcat [ spec1, spec2 ]
--       ]
--   </pre>
hConcat :: [VLSpec] -> PropertySpec

-- | Assigns a list of specifications to be juxtaposed vertically in a
--   visualization. See also <a>hConcat</a> and <a>vlConcat</a>.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>dataFromUrl</a> "data/driving.json" []
--       , <a>vConcat</a> [ spec1, spec2 ]
--       ]
--   </pre>
vConcat :: [VLSpec] -> PropertySpec

-- | Alignment to apply to grid rows and columns generated by a composition
--   operator. This version sets the same alignment for rows and columns.
--   
--   See also <a>alignRC</a>.
align :: CompositionAlignment -> PropertySpec

-- | Similar to <a>align</a> but with independent alignments for rows and
--   columns.
--   
--   See also <a>align</a>.
alignRC :: CompositionAlignment -> CompositionAlignment -> PropertySpec

-- | Spacing between sub-views in a composition operator.
--   
--   See also <a>spacingRC</a>.
spacing :: Double -> PropertySpec

-- | Set the spacing between the rows and columns.
--   
--   See also <a>spacing</a>.
spacingRC :: Double -> Double -> PropertySpec

-- | Are sub-views in a composition operator centred relative to their
--   respective rows and columns?
--   
--   See also <a>centerRC</a>.
center :: Bool -> PropertySpec

-- | Are sub-views in a composition operator centred relative to their
--   respective rows and columns?
--   
--   See also <a>center</a>.
centerRC :: Bool -> Bool -> PropertySpec

-- | Bounds calculation method to use for determining the extent of a
--   sub-plot in a composed view.
bounds :: Bounds -> PropertySpec

-- | This is used with <a>bounds</a> to define the extent of a sub plot.
data Bounds

-- | Bounds calculation should use the entire plot area (including axes,
--   title, and legend).
Full :: Bounds

-- | Bounds calculation should take only the specified width and height
--   values for a sub-view. Useful when attempting to place sub-plots
--   without axes or legends into a uniform grid structure.
Flush :: Bounds

-- | Specifies the alignment of compositions. It is used with:
--   <a>align</a>, <a>alignRC</a>, <a>LeGridAlign</a>, <a>LGridAlign</a>,
--   and <a>FAlign</a>.
data CompositionAlignment

-- | Flow layout is used, where adjacent subviews are placed one after
--   another.
CANone :: CompositionAlignment

-- | Each row and column may be of a variable size.
CAEach :: CompositionAlignment

-- | All the rows and columns are of the same size (this is based on the
--   maximum subview size).
CAAll :: CompositionAlignment

-- | Determine whether scales, axes or legends in composite views should
--   share channel encodings. This allows, for example, two different color
--   encodings to be created in a layered view, which otherwise by default
--   would share color channels between layers. Each resolution rule should
--   be in a tuple pairing the channel to which it applies and the rule
--   type.
--   
--   <pre>
--   let res = <a>resolve</a>
--               . <a>resolution</a> (<a>RLegend</a> [(<a>ChColor</a>, <a>Independent</a>)])
--   
--   in <a>toVegaLite</a>
--       [ <a>dataFromUrl</a> "data/movies.json" []
--       , <a>vConcat</a> [heatSpec, barSpec]
--       , res []
--       ]
--   </pre>
--   
--   For more information see the <a>Vega-Lite documentation</a>.
--   
--   <pre>
--   let dvals = <a>dataFromColumns</a> []
--                 . <a>dataColumn</a> "x" (<a>Numbers</a> [1, 2, 3, 4, 5])
--                 . <a>dataColumn</a> "a" (<a>Numbers</a> [28, 91, 43, 55, 81])
--                 . <a>dataColumn</a> "b" (<a>Numbers</a> [17, 22, 28, 30, 40])
--       encBar = <a>encoding</a>
--                  . <a>position</a> <a>X</a> [<a>PName</a> "x", <a>PmType</a> <a>Quantitative</a>]
--                  . <a>position</a> <a>Y</a> [<a>PName</a> "a", <a>PmType</a> <a>Quantitative</a>]
--       specBar = <a>asSpec</a> [<a>mark</a> <a>Bar</a> [], encBar []]
--       encLine = <a>encoding</a>
--                   . <a>position</a> <a>X</a> [<a>PName</a> "x", <a>PmType</a> <a>Quantitative</a>]
--                   . <a>position</a> <a>Y</a> [<a>PName</a> "b", <a>PmType</a> <a>Quantitative</a>]
--       specLine = <a>asSpec</a> [<a>mark</a> <a>Line</a> [<a>MColor</a> "firebrick"], encLine []]
--       res = <a>resolve</a>
--               . <a>resolution</a> (<a>RScale</a> [(<a>ChY</a>, <a>Independent</a>)])
--   
--   in <a>toVegaLite</a> [dvals [], res [], <a>layer</a> [specBar, specLine]]
--   </pre>
resolve :: [ResolveSpec] -> PropertySpec

-- | Define a single resolution option to be applied when scales, axes or
--   legends in composite views share channel encodings. This allows, for
--   example, two different color encodings to be created in a layered
--   view, which otherwise by default would share color channels between
--   layers. Each resolution rule should be in a tuple pairing the channel
--   to which it applies and the rule type.
--   
--   <pre>
--   <a>resolve</a>
--       . resolution (<a>RScale</a> [ ( <a>ChY</a>, <a>Independent</a> ) ])
--   </pre>
resolution :: Resolve -> BuildResolveSpecs

-- | Used to determine how a channel's axis, scale or legend domains should
--   be resolved if defined in more than one view in a composite
--   visualization. See the <a>Vega-Lite documentation</a> for details.
data Resolve
RAxis :: [(Channel, Resolution)] -> Resolve
RLegend :: [(Channel, Resolution)] -> Resolve
RScale :: [(Channel, Resolution)] -> Resolve

-- | Indicates a channel type to be used in a resolution specification.
--   
--   Used with the <a>Resolve</a> type and the <a>BLChannel</a>,
--   <a>BLChannelEvent</a>, <a>ByChannel</a>, and <a>Encodings</a>
--   constructors.
--   
--   Changed in <tt>0.7.0.0</tt>: the <tt>ChTooltip</tt> channel was
--   removed as it was dropped in Vega-Lite 4.0.
data Channel
ChX :: Channel
ChY :: Channel
ChX2 :: Channel
ChY2 :: Channel

ChLongitude :: Channel

ChLongitude2 :: Channel

ChLatitude :: Channel

ChLatitude2 :: Channel

ChAngle :: Channel

ChTheta :: Channel

ChTheta2 :: Channel

ChRadius :: Channel

ChRadius2 :: Channel
ChColor :: Channel

ChFill :: Channel

ChFillOpacity :: Channel

ChHref :: Channel

ChKey :: Channel
ChOpacity :: Channel
ChShape :: Channel
ChSize :: Channel

ChStroke :: Channel

ChStrokeDash :: Channel

ChStrokeOpacity :: Channel

ChStrokeWidth :: Channel

ChText :: Channel

ChDescription :: Channel

ChURL :: Channel

-- | Indicates whether or not a scale domain should be independent of
--   others in a composite visualization. See the <a>Vega-Lite
--   documentation</a> for details.
--   
--   For use with <a>Resolve</a>.
data Resolution
Shared :: Resolution
Independent :: Resolution

-- | Define the fields that will be used to compose rows and columns of a
--   set of small multiples. This is used where the encoding of the
--   visualization in small multiples is largely identical, but the data
--   field used in each might vary. When a list of fields is identified
--   with <tt>repeat</tt> you also need to define a full specification to
--   apply to each of those fields using <a>asSpec</a>.
--   
--   Unlike <b>faceting</b>, which creates multiple charts based on
--   different values of a single field, <b>repeating</b> uses a different
--   field for each chart.
--   
--   See the <a>Vega-Lite documentation</a> for further details.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>repeat</a> [<a>ColumnFields</a> ["Cat", "Dog", "Fish"]]
--       , <a>specification</a> (<a>asSpec</a> spec)
--       ]
--   </pre>
--   
--   See also <a>repeatFlow</a>.
repeat :: [RepeatFields] -> PropertySpec

-- | Define the fields that will be used to compose a flow layout of a set
--   of small multiples. Used when the encoding is largely identical, but
--   the data field used in each might vary. When a list of fields is
--   identified with <tt>repeatFlow</tt> you also need to define a full
--   specification to apply to each of those fields using <a>asSpec</a>.
--   
--   Small multiples will be laid out from left to right, moving on to new
--   rows only if the number of plots exceeds an optional column limit
--   (specified via <a>columns</a>).
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>repeatFlow</a> [ "Cat", "Dog", "Fish" ]
--       , <a>specification</a> (<a>asSpec</a> spec)
--       ]
--   </pre>
--   
--   See also <a>repeat</a>.
repeatFlow :: [FieldName] -> PropertySpec

-- | Create a list of fields to use in set of repeated small multiples. The
--   list of fields named here can be referenced in an encoding with
--   <tt><a>PRepeat</a> <a>Column</a></tt> or <tt><a>PRepeat</a>
--   <a>Row</a></tt>.
data RepeatFields
RowFields :: [FieldName] -> RepeatFields
ColumnFields :: [FieldName] -> RepeatFields

LayerFields :: [FieldName] -> RepeatFields

-- | Defines the fields that will be used to facet a view in rows or
--   columns to create a set of small multiples. This is used where the
--   encoding of the visualization in small multiples is identical, but
--   data for each is grouped by the given fields. When creating a faceted
--   view in this way you also need to define a full specification to apply
--   to each of those facets using <a>asSpec</a>.
--   
--   See the <a>Vega-Lite documentation</a> for further details.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ facet [ <a>RowBy</a> [ <a>FName</a> "Month", <a>FmType</a> <a>Ordinal</a> ]
--               , <a>ColumnBy</a> [ <a>FName</a> "Week", <a>FmType</a> <a>Ordinal</a> ]
--               ]
--       , <a>specification</a> spec
--       ]
--   </pre>
--   
--   See also <a>facetFlow</a>.
facet :: [FacetMapping] -> PropertySpec

-- | Facet a view to create small multiples in a flow layout. Used when the
--   encoding of the visualization in small multiples is identical, but
--   data for each is grouped by the given fields. When creating a faceted
--   view in this way you also need to define a full specification to apply
--   to each of those facets using <a>asSpec</a>.
--   
--   Small multiples will be laid out from left to right, moving on to new
--   rows only if the number of plots exceeds an optional column limit
--   (specified via <a>columns</a>).
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ facetFlow [ <a>FName</a> "Origin", <a>FmType</a> <a>Nominal</a> ]
--       , <a>specification</a> spec
--       ]
--   </pre>
--   
--   See also <a>facet</a>.
facetFlow :: [FacetChannel] -> PropertySpec

-- | Provides details of the mapping between a row or column and its field
--   definitions in a set of faceted small multiples. For details see the
--   <a>Vega-Lite documentation</a>.
data FacetMapping
ColumnBy :: [FacetChannel] -> FacetMapping
RowBy :: [FacetChannel] -> FacetMapping

-- | Types of facet channel property used for creating a composed facet
--   view of small multiples.
data FacetChannel

-- | The name of the field from which to pull a data value.
FName :: FieldName -> FacetChannel

-- | The encoded field's type of measurement.
FmType :: Measurement -> FacetChannel

-- | Aggregation function for the field.
FAggregate :: Operation -> FacetChannel

-- | The alignment to apply to the row- or column- facet's subplot.
FAlign :: CompositionAlignment -> FacetChannel

-- | Describe how to bin quantitative fields, or whether the channels are
--   already binned.
FBin :: [BinProperty] -> FacetChannel

-- | Should sub-views be centered relative to their respective rows or
--   columns.
FCenter :: Bool -> FacetChannel

-- | The properties of a facet's header.
FHeader :: [HeaderProperty] -> FacetChannel

-- | Sort order for the encoded field.
FSort :: [SortProperty] -> FacetChannel

-- | The pixel spacing between sub-views.
--   
--   If you have code from a version of <tt>hvega</tt> before
--   <tt>0.6.0.0</tt> that uses <tt>FSpacing</tt> (with <a>FacetStyle</a>),
--   please use <a>CompSpacing</a> as a replacement.
FSpacing :: Double -> FacetChannel

-- | The time-unit for a temporal field.
FTimeUnit :: TimeUnit -> FacetChannel

-- | The title for the field.
FTitle :: Text -> FacetChannel

-- | Draw no title.
FNoTitle :: FacetChannel

-- | Create a specification sufficient to define an element in a composed
--   visualization such as a superposed layer or juxtaposed facet.
--   Typically a layer will contain a full set of specifications that
--   define a visualization with the exception of the data specification
--   which is usually defined outside of any one layer. Whereas for
--   repeated and faceted specs, the entire specification is provided.
--   
--   <pre>
--   spec1 = asSpec [ enc1 [], <a>mark</a> <a>Line</a> [] ]
--   </pre>
asSpec :: [PropertySpec] -> VLSpec

-- | Defines a specification object for use with faceted and repeated small
--   multiples.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>facet</a> [ <a>RowBy</a> [ <a>FName</a> "Origin", <a>FmType</a> <a>Nominal</a> ] ]
--       , <a>specification</a> spec
--       ]
--   </pre>
specification :: VLSpec -> PropertySpec

-- | Identifies how repeated or faceted views are arranged.
--   
--   This is used with a number of constructors: <a>ByRepeatOp</a>,
--   <a>HRepeat</a>, <a>MRepeat</a>, <a>ORepeat</a>, <a>PRepeat</a>, and
--   <a>TRepeat</a>.
data Arrangement

-- | Column arrangement.
Column :: Arrangement

-- | Row arrangement.
Row :: Arrangement

-- | Flow arrangement (aka "repeat").
Flow :: Arrangement

-- | Layer arrangement in a repeat view.
Layer :: Arrangement

-- | Represents a facet header property. For details, see the <a>Vega-Lite
--   documentation</a>.
--   
--   Labels refer to the title of each sub-plot in a faceted view and title
--   is the overall title of the collection.
data HeaderProperty

-- | <a>Formatting pattern</a> for facet header (title) values. To
--   distinguish between formatting as numeric values and data/time values,
--   additionally use <a>HFormatAsNum</a>, <a>HFormatAsTemporal</a>, and
--   <a>HFormatAsCustom</a>.
HFormat :: Text -> HeaderProperty

-- | Facet headers should be formatted as numbers. Use a <a>d3 numeric
--   format string</a> with <a>HFormat</a>.
HFormatAsNum :: HeaderProperty

-- | Facet headers should be formatted as dates or times. Use a <a>d3
--   date/time format string</a> with <a>HFormat</a>.
HFormatAsTemporal :: HeaderProperty

-- | The <a>custom format type</a> for use with with <a>HFormat</a>.
HFormatAsCustom :: Text -> HeaderProperty

-- | Should labels be included as part of the header. The default is
--   <tt>True</tt>.
HLabel :: Bool -> HeaderProperty

-- | The horizontal alignment of the labels.
HLabelAlign :: HAlign -> HeaderProperty

-- | The anchor position for the labels.
HLabelAnchor :: APosition -> HeaderProperty

-- | The angle to draw the labels. The default is 0 for column headers and
--   -90 for row headers.
HLabelAngle :: Angle -> HeaderProperty

-- | The vertical text baseline for header labels. The default is
--   <a>AlignBaseline</a>.
--   
--   Added in Vega-Lite 4.8.0.
HLabelBaseline :: VAlign -> HeaderProperty

-- | The color of the labels.
HLabelColor :: Color -> HeaderProperty

-- | The expression used to generate header labels.
--   
--   The expression can use <tt>datum.value</tt> and <tt>datum.label</tt>
--   to access the data value and default label text respectively.
HLabelExpr :: VegaExpr -> HeaderProperty

-- | The font for the labels.
HLabelFont :: Text -> HeaderProperty

-- | The font size for the labels.
HLabelFontSize :: Double -> HeaderProperty

-- | The font style for the labels.
HLabelFontStyle :: Text -> HeaderProperty

-- | The font weight for the header label.
--   
--   Added in Vega-Lite 4.8.0.
HLabelFontWeight :: FontWeight -> HeaderProperty

-- | The maximum length of each label.
HLabelLimit :: Double -> HeaderProperty

-- | The line height, in pixels, for multi-line header labels, or title
--   text with baselines of <a>AlignLineTop</a> or <a>AlignLineBottom</a>.
--   
--   Added in Vega-Lite 4.8.0.
HLabelLineHeight :: Double -> HeaderProperty

-- | The position of the label relative to its sub-plot. See also
--   <a>HOrient</a>.
HLabelOrient :: Side -> HeaderProperty

-- | The spacing in pixels between the label and its sub-plot.
HLabelPadding :: Double -> HeaderProperty

-- | A shortcut for setting both <a>HLabelOrient</a> and
--   <a>HTitleOrient</a>.
--   
--   Since Vega-Lite 4.8.
HOrient :: Side -> HeaderProperty

-- | The title for the facets.
HTitle :: Text -> HeaderProperty

-- | Draw no title for the facets.
HNoTitle :: HeaderProperty

-- | The horizontal alignment of the title.
HTitleAlign :: HAlign -> HeaderProperty

-- | The anchor position for the title.
HTitleAnchor :: APosition -> HeaderProperty

-- | The angle to draw the title.
HTitleAngle :: Angle -> HeaderProperty

-- | The vertical alignment of the title.
HTitleBaseline :: VAlign -> HeaderProperty

-- | The color of the title.
HTitleColor :: Color -> HeaderProperty

-- | The font for the title.
HTitleFont :: Text -> HeaderProperty

-- | The font size for the title.
HTitleFontSize :: Double -> HeaderProperty

-- | The font style for the title.
HTitleFontStyle :: Text -> HeaderProperty

-- | The font weight for the title.
--   
--   The argument changed from <a>Text</a> in <tt>0.8.0.0</tt>.
HTitleFontWeight :: FontWeight -> HeaderProperty

-- | The maximum length of the title.
HTitleLimit :: Double -> HeaderProperty

-- | The line height, in pixels, for multi-line header title text, or title
--   text with baselines of <a>AlignLineTop</a> or <a>AlignLineBottom</a>.
HTitleLineHeight :: Double -> HeaderProperty

-- | The position of the title relative to the sub-plots. See also
--   <a>HOrient</a>.
HTitleOrient :: Side -> HeaderProperty

-- | The spacing in pixels between the title and the labels.
HTitlePadding :: Double -> HeaderProperty

-- | Create a full selection specification from a list of selections. For
--   details see the <a>Vega-Lite documentation</a>.
--   
--   <pre>
--   sel =
--      <a>selection</a>
--          . <a>select</a> "view" <a>Interval</a> [<a>BindScales</a>] []
--          . <a>select</a> "myBrush" <a>Interval</a> []
--          . <a>select</a> "myPaintbrush" <a>Multi</a> [<a>On</a> "mouseover", <a>Nearest</a> True]
--   </pre>
selection :: [SelectSpec] -> PropertySpec

-- | Create a single named selection that may be applied to a data query or
--   transformation.
--   
--   <pre>
--   sel =
--       <a>selection</a>
--           . <a>select</a> "view" <a>Interval</a> [ <a>BindScales</a> ] []
--           . <a>select</a> "myBrush" <a>Interval</a> []
--           . <a>select</a> "myPaintbrush" <a>Multi</a> [ <a>On</a> "mouseover", <a>Nearest</a> True ]
--   </pre>
select :: SelectionLabel -> Selection -> [SelectionProperty] -> BuildSelectSpecs

-- | Indicates the type of selection to be generated by the user.
data Selection

-- | Allows one mark at a time to be selected.
Single :: Selection

-- | Allows multiple items to be selected (e.g. with shift-click).
Multi :: Selection

-- | Allows a bounding rectangle to be dragged by the user, selecting all
--   items which intersect it.
Interval :: Selection

-- | Properties for customising the nature of the selection. See the
--   <a>Vega-Lite documentation</a> for details.
--   
--   For use with <a>select</a> and <a>SelectionStyle</a>.
data SelectionProperty

-- | Make a selection empty by default when nothing selected.
Empty :: SelectionProperty

-- | Enable two-way binding between a selection and the scales used in the
--   same view. This is commonly used for zooming and panning by binding
--   selection to position scaling:
--   
--   <pre>
--   sel = <a>selection</a> . <a>select</a> "mySelection" <a>Interval</a> [<a>BindScales</a>]
--   </pre>
BindScales :: SelectionProperty

-- | Enable binding between a legend selection and the item it references.
--   This is <b>only applicable</b> to categorical (symbol) legends.
--   
--   The following will allow the "crimeType" legend to be selected:
--   
--   <pre>
--   <a>select</a> "mySelection" <a>Single</a> [ <a>BindLegend</a> (<a>BLField</a> "crimeType") ]
--   
--   </pre>
--   
--   Use <a>On</a> to make a two-way binding (that is, selecting the legend
--   or the symbol type will highlight the other):
--   
--   <pre>
--   <a>select</a> "sel" <a>Multi</a> [ <a>On</a> "click"
--                      , <a>BindLegend</a> (<a>BLFieldEvent</a> "crimeType" "dblclick")
--                      ]
--   
--   </pre>
BindLegend :: BindLegendProperty -> SelectionProperty

-- | <a>Vega event stream selector</a> that triggers a selection, or the
--   empty string (which sets the property to <tt>false</tt>).
On :: Text -> SelectionProperty

-- | <a>Vega event stream selector</a> that can clear a selection. For
--   example, to allow a zoomed/panned view to be reset on shift-click:
--   
--   <pre>
--   <a>selection</a>
--       . <a>select</a> "myZoomPan"
--           <a>Interval</a>
--           [<a>BindScales</a>, <a>Clear</a> "click[event.shiftKey]"]
--   </pre>
--   
--   To remove the default clearing behaviour of a selection, provide an
--   empty string rather than an event stream selector.
Clear :: Text -> SelectionProperty

-- | Translation selection transformation used for panning a view. See the
--   <a>Vega-Lite translate documentation</a>.
Translate :: Text -> SelectionProperty

-- | Zooming selection transformation used for zooming a view. See the
--   <a>Vega-Lite zoom documentation</a>.
Zoom :: Text -> SelectionProperty

-- | Field names for projecting a selection.
Fields :: [FieldName] -> SelectionProperty

-- | Encoding channels that form a named selection.
--   
--   For example, to <b>project</b> a selection across all items that share
--   the same value in the color channel:
--   
--   <pre>
--   sel = <a>selection</a> . <a>select</a> "mySelection" <a>Multi</a> [<a>Encodings</a> [<a>ChColor</a>]]
--   </pre>
Encodings :: [Channel] -> SelectionProperty

-- | Initialise one or more selections with values from bound fields. See
--   also <a>SInitInterval</a>.
--   
--   For example,
--   
--   <pre>
--   <a>selection</a>
--       . <a>select</a> "CylYr"
--           <a>Single</a>
--           [ <a>Fields</a> ["Cylinders", "Year"]
--           , <a>SInit</a>
--               [ ("Cylinders", <a>Number</a> 4)
--               , ("Year", <a>Number</a> 1977)
--               ]
--           , <a>Bind</a>
--               [ <a>IRange</a> "Cylinders" [<a>InMin</a> 3, <a>InMax</a> 8, <a>InStep</a> 1]
--               , <a>IRange</a> "Year" [<a>InMin</a> 1969, <a>InMax</a> 1981, <a>InStep</a> 1]
--               ]
--           ]
--   
--   </pre>
SInit :: [(FieldName, DataValue)] -> SelectionProperty

-- | Initialize the domain extent of an interval selection. See also
--   <a>SInit</a>.
--   
--   The parameters refer to the x and y axes, given in the order
--   <tt>(minimum, maximum)</tt> for each axis. If an axis is set to
--   <tt>Nothing</tt> then the selection is projected over that dimension.
--   At least one of the two arguments should be set (i.e. not
--   <tt>Nothing</tt>).
--   
--   <pre>
--   <a>select</a> "mySelection"
--          <a>Interval</a>
--          [ <a>SInitInterval</a>
--              (Just ( <a>DateTime</a> [<a>DTYear</a> 2013]
--                    , <a>DateTime</a> [<a>DTYear</a> 2015]
--                    )
--              (Just (<a>Number</a> 40, <a>Number</a> 80))
--          ]
--   
--   </pre>
SInitInterval :: Maybe (DataValue, DataValue) -> Maybe (DataValue, DataValue) -> SelectionProperty

-- | Strategy that determines how selections' data queries are resolved
--   when applied in a filter transform, conditional encoding rule, or
--   scale domain.
ResolveSelections :: SelectionResolution -> SelectionProperty

-- | Appearance of an interval selection mark (dragged rectangle).
SelectionMark :: [SelectionMarkProperty] -> SelectionProperty

-- | Binding to some input elements as part of a named selection.
--   
--   The followig example allows a selection to be based on a drop-down
--   list of options:
--   
--   <pre>
--   sel = <a>selection</a>
--           . <a>select</a> "mySelection"
--               <a>Single</a>
--               [<a>Fields</a> ["crimeType"]
--               , <a>Bind</a> [<a>ISelect</a> "crimeType"
--                         [<a>InOptions</a>
--                            [ "Anti-social behaviour"
--                            , "Criminal damage and arson"
--                            , "Drugs"
--                            , "Robbery"
--                            , "Vehicle crime"
--                            ]
--                         ]
--                      ]
--               ]
--   
--   </pre>
Bind :: [Binding] -> SelectionProperty

-- | Whether or not a selection should capture nearest marks to a pointer
--   rather than an exact position match.
Nearest :: Bool -> SelectionProperty

-- | Predicate expression that determines a toggled selection. See the
--   <a>Vega-Lite toggle documentation</a>.
Toggle :: Text -> SelectionProperty

-- | Describes the binding property of a selection based on some HTML input
--   element such as a checkbox or radio button. For details see the
--   <a>Vega-Lite documentation</a> and the <a>Vega input binding
--   documentation</a>.
data Binding

-- | Range slider input element that can bound to a named field value.
IRange :: Text -> [InputProperty] -> Binding

-- | Checkbox input element that can bound to a named field value.
ICheckbox :: Text -> [InputProperty] -> Binding

-- | Radio box input element that can bound to a named field value.
IRadio :: Text -> [InputProperty] -> Binding

-- | Select input element that can bound to a named field value.
ISelect :: Text -> [InputProperty] -> Binding

-- | Text input element that can bound to a named field value.
IText :: Text -> [InputProperty] -> Binding

-- | Number input element that can bound to a named field value.
INumber :: Text -> [InputProperty] -> Binding

-- | Date input element that can bound to a named field value.
IDate :: Text -> [InputProperty] -> Binding

-- | Time input element that can bound to a named field value.
ITime :: Text -> [InputProperty] -> Binding

-- | Month input element that can bound to a named field value.
IMonth :: Text -> [InputProperty] -> Binding

-- | Week input element that can bound to a named field value.
IWeek :: Text -> [InputProperty] -> Binding

-- | Local time input element that can bound to a named field value.
IDateTimeLocal :: Text -> [InputProperty] -> Binding

-- | Telephone number input element that can bound to a named field value.
ITel :: Text -> [InputProperty] -> Binding

-- | Color input element that can bound to a named field value.
IColor :: Text -> [InputProperty] -> Binding

-- | Control the interactivity of the legend. This is used with
--   <a>BindLegend</a>.
data BindLegendProperty

-- | The data field which should be made interactive in the legend on a
--   single click.
BLField :: FieldName -> BindLegendProperty

-- | Which channel should be made interactive in a legend on a single
--   click.
BLChannel :: Channel -> BindLegendProperty

-- | The data field which should be made interactive in the legend and the
--   <a>Vega event stream</a> that should trigger the selection.
BLFieldEvent :: FieldName -> Text -> BindLegendProperty

-- | Which channel should be made interactive in a legend and the <a>Vega
--   event stream</a> that should trigger the selection.
BLChannelEvent :: Channel -> Text -> BindLegendProperty

-- | GUI Input properties. The type of relevant property will depend on the
--   type of input element selected. For example an <tt>InRange</tt>
--   (slider) can have numeric min, max and step values; <tt>InSelect</tt>
--   (selector) has a list of selection label options. For details see the
--   <a>Vega input element binding documentation</a>.
data InputProperty

-- | The delay to introduce when processing input events to avoid
--   unnescessary event broadcasting.
Debounce :: Double -> InputProperty

-- | CSS selector indicating the parent element to which an input element
--   should be added. This allows for interacting with elements outside the
--   visualization container.
Element :: Text -> InputProperty

-- | The options for a radio or select input element.
InOptions :: [Text] -> InputProperty

-- | The minimum slider value for a range input element.
InMin :: Double -> InputProperty

-- | The maximum slider value for a range input element.
InMax :: Double -> InputProperty

-- | Custom label for a radio or select input element.
InName :: Text -> InputProperty

-- | The minimum increment for a range sliders.
InStep :: Double -> InputProperty

-- | The initial text for input elements such as text fields.
InPlaceholder :: Text -> InputProperty

-- | Properties for customising the appearance of an interval selection
--   mark (a dragged rectangle). For details see the <a>Vega-Lite
--   documentation</a>.
data SelectionMarkProperty

-- | Cursor type to appear when pointer is over an interval selection mark
--   (dragged rectangular area).
SMCursor :: Cursor -> SelectionMarkProperty

-- | Fill color.
SMFill :: Color -> SelectionMarkProperty

-- | Fill opacity.
SMFillOpacity :: Opacity -> SelectionMarkProperty

-- | The stroke color.
SMStroke :: Color -> SelectionMarkProperty

-- | The stroke opacity.
SMStrokeOpacity :: Opacity -> SelectionMarkProperty

-- | The line width of the stroke.
SMStrokeWidth :: Double -> SelectionMarkProperty

-- | The dash pattern for the stroke.
SMStrokeDash :: DashStyle -> SelectionMarkProperty

-- | The offset at which to start the dash pattern.
SMStrokeDashOffset :: DashOffset -> SelectionMarkProperty

-- | Determines how selections in faceted or repeated views are resolved.
--   See the <a>Vega-Lite documentation</a> for details.
--   
--   For use with <a>ResolveSelections</a>.
data SelectionResolution

-- | One selection available across all subviews (default).
Global :: SelectionResolution

-- | Each subview contains its own brush and marks are selected if they lie
--   within <i>any</i> of these individual selections.
Union :: SelectionResolution

-- | Each subview contains its own brush and marks are selected if they lie
--   within <i>all</i> of these individual selections.
Intersection :: SelectionResolution

-- | Used for creating logical compositions. For example
--   
--   <pre>
--   <a>color</a>
--       [ <a>MSelectionCondition</a> (Or (<a>SelectionName</a> "alex") (SelectionName "morgan"))
--           [<a>MAggregate</a> <a>Count</a>, <a>MName</a> "*", <a>MmType</a> <a>Quantitative</a>]
--           [<a>MString</a> "gray"]
--       ]
--   </pre>
--   
--   Logical compositions can be nested to any level as shown in this
--   example
--   
--   <pre>
--   <a>Not</a> (<a>And</a> (<a>Expr</a> "datum.IMDB_Rating === null") (<a>Expr</a> "datum.Rotten_Tomatoes_Rating === null") )
--   </pre>
data BooleanOp

-- | Expression that should evaluate to either true or false.
Expr :: VegaExpr -> BooleanOp

-- | Convert a <a>Filter</a> into a <a>BooleanOp</a> so that it may be used
--   as part of a more complex expression.
--   
--   For example (using <a>&amp;</a> to apply <a>FilterOp</a> to a filter):
--   
--   <pre>
--   trans = <a>transform</a>
--             . <a>filter</a> (<a>FCompose</a>
--                        (<a>And</a>
--                          (<a>FValid</a> <a>IMDB_Rating</a> &amp; <a>FilterOp</a>)
--                          (<a>FValid</a> <a>Rotten_Tomatoes_Rating</a> &amp; <a>FilterOp</a>)
--                        )
--                      )
--   
--   </pre>
FilterOp :: Filter -> BooleanOp

-- | Combine a data-transformation operation with a filter before
--   converting into a boolean operation. This can be useful when working
--   with dates, such as the following exampe, which aggregates a set of
--   dates into years, and filters only those years between 2010 and 2017
--   (inclusive). The final expression is converted back into a
--   <a>BooleanOp</a> with <a>FCompose</a> (combined using <a>&amp;</a>).
--   
--   <pre>
--   <a>filter</a> (<a>FRange</a> "date" (<a>NumberRange</a> 2010 2017)
--           &amp; <a>FilterOpTrans</a> (<a>MTimeUnit</a> (<a>TU</a> <a>Year</a>))
--           &amp; <a>FCompose</a>
--           )
--   
--   </pre>
FilterOpTrans :: MarkChannel -> Filter -> BooleanOp

-- | Interactive selection that will be true or false as part of a logical
--   composition. For example: to filter a dataset so that only items
--   selected interactively and that have a weight of more than 30:
--   
--   <pre>
--   <a>transform</a>
--      . <a>filter</a> (<a>FCompose</a> (<a>And</a> (<a>Selection</a> "brush") (<a>Expr</a> "datum.weight &gt; 30")))
--   </pre>
Selection :: SelectionLabel -> BooleanOp

-- | Name a selection that is used as part of a conditional encoding.
--   
--   <pre>
--   <a>color</a>
--      [ <a>MSelectionCondition</a> (<a>SelectionName</a> "myBrush")
--          [<a>MName</a> "myField", <a>MmType</a> <a>Nominal</a>]
--          [<a>MString</a> "grey"]
--      ]
--   </pre>
SelectionName :: SelectionLabel -> BooleanOp

-- | Apply an 'and' Boolean operation as part of a logical composition.
--   
--   <pre>
--   <a>And</a> (<a>Expr</a> "datum.IMDB_Rating === null") (<a>Expr</a> "datum.Rotten_Tomatoes_Rating === null")
--   </pre>
And :: BooleanOp -> BooleanOp -> BooleanOp

-- | Apply an 'or' Boolean operation as part of a logical composition.
Or :: BooleanOp -> BooleanOp -> BooleanOp

-- | Negate the given expression.
--   
--   <pre>
--   <a>Not</a> (<a>And</a> (<a>Expr</a> "datum.IMDB_Rating === null") (<a>Expr</a> "datum.Rotten_Tomatoes_Rating === null"))
--   </pre>
Not :: BooleanOp -> BooleanOp

-- | Provides an optional name to be associated with the visualization.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>name</a> "PopGrowth"
--       , <a>dataFromUrl</a> "data/population.json" []
--       , <a>mark</a> <a>Bar</a> []
--       , enc []
--       ]
--   </pre>
name :: Text -> PropertySpec

-- | Provides an optional description to be associated with the
--   visualization.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>description</a> "Population change of key regions since 1900"
--       , <a>dataFromUrl</a> "data/population.json" []
--       , <a>mark</a> <a>Bar</a> []
--       , enc []
--       ]
--   </pre>
description :: Text -> PropertySpec

-- | Overrides the default height of the visualization. If not specified
--   the height will be calculated based on the content of the
--   visualization. See <a>autosize</a> for customization of the content
--   sizing relative to this setting, <a>heightOfContainer</a> for setting
--   the height to that of the surrounding container, and <a>heightStep</a>
--   for setting the height of discrete fields.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>height</a> 300
--       , <a>dataFromUrl</a> "data/population.json" []
--       , <a>mark</a> <a>Bar</a> []
--       , enc []
--       ]
--   </pre>
height :: Double -> PropertySpec

-- | Set the height of the view to that of the surrounding container, to
--   allow for responsive sizing.
--   
--   Please see the <a>Vega Lite responsive sizing</a> documentation for
--   caveats and limitations.
heightOfContainer :: PropertySpec

-- | Set the height of the discrete y-field (e.g. individual bars in a
--   horizontal bar chart). The total height is then calculated based on
--   the number of discrete fields (e.g. bars).
--   
--   <pre>
--   <a>toVegaLite</a>
--     [ <a>heightStep</a> 17
--     , data []
--     , enc []
--     , <a>mark</a> <a>Bar</a> []
--     ]
--   </pre>
--   
--   This replaces the use of <tt>SRangeStep</tt> from
--   <a>ScaleProperty</a>.
heightStep :: Double -> PropertySpec

-- | Override the default width of the visualization. If not specified the
--   width will be calculated based on the content of the visualization.
--   See <a>autosize</a> for customization of the content sizing relative
--   to this setting, <a>widthOfContainer</a> for setting the width to that
--   of the surrounding container, and <a>widthStep</a> for setting the
--   width of discrete fields.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>width</a> 500
--       , <a>dataFromUrl</a> "data/population.json" []
--       , <a>mark</a> <a>Bar</a> []
--       , enc []
--       ]
--   </pre>
width :: Double -> PropertySpec

-- | Set the width of the view to that of the surrounding container, to
--   allow for responsive sizing.
--   
--   Please see the <a>Vega Lite responsive sizing</a> documentation for
--   caveats and limitations.
widthOfContainer :: PropertySpec

-- | Set the width of the discrete x-field (e.g. individual bars in a bar
--   chart). The total width is then calculated based on the number of
--   discrete fields (e.g. bars).
--   
--   <pre>
--   <a>toVegaLite</a>
--     [ <a>widthStep</a> 17
--     , data []
--     , enc []
--     , <a>mark</a> <a>Bar</a> []
--     ]
--   </pre>
--   
--   This replaces the use of <tt>SRangeStep</tt> from
--   <a>ScaleProperty</a>.
widthStep :: Double -> PropertySpec

-- | Set the padding around the visualization in pixel units. The way
--   padding is interpreted will depend on the <a>autosize</a> properties.
--   See the <a>Vega-Lite documentation</a> for details.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>width</a> 500
--       , <a>padding</a> (<a>PEdges</a> 20 10 5 15)
--       , <a>dataFromUrl</a> "data/population.json" []
--       , <a>mark</a> <a>Bar</a> []
--       , enc []
--       ]
--   </pre>
padding :: Padding -> PropertySpec

-- | Declare the way the view is sized. See the <a>Vega-Lite
--   documentation</a> for details.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>width</a> 250
--       , <a>height</a> 300
--       , <a>autosize</a> [ <a>AFit</a>, <a>APadding</a>, <a>AResize</a> ]
--       , <a>dataFromUrl</a> "data/population.json" []
--       , <a>mark</a> <a>Bar</a> []
--       , enc []
--       ]
--   </pre>
autosize :: [Autosize] -> PropertySpec

-- | Set the background color of the visualization. If not specified the
--   background will be white.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>background</a> "rgb(251,247,238)"
--       , <a>dataFromUrl</a> "data/population.json" []
--       , <a>mark</a> <a>Bar</a> []
--       , enc []
--       ]
--   </pre>
background :: Color -> PropertySpec

-- | Optional metadata.
usermetadata :: Object -> PropertySpec

-- | Specify the padding dimensions in pixel units.
data Padding

-- | Use the same padding on all four edges of the container.
PSize :: Double -> Padding

-- | Specify the padding for the left, top, right, and bottom edges.
PEdges :: Double -> Double -> Double -> Double -> Padding

-- | Indicates the auto-sizing characteristics of the visualization such as
--   amount of padding, whether it should fill the parent container etc.
--   For more details see the <a>Vega-Lite documentation</a>.
data Autosize

-- | Interpret visualization dimensions to be for the data rectangle
--   (external padding added to this size).
AContent :: Autosize

-- | Interpret visualization dimensions to be for the entire visualization
--   (data rectangle is shrunk to accommodate external decorations
--   padding).
AFit :: Autosize

-- | Interpret visualization width to be for the entire visualization width
--   (data rectangle width is shrunk to accommodate external decorations
--   padding).
AFitX :: Autosize

-- | Interpret visualization height to be for the entire visualization
--   height (data rectangle height is shrunk to accommodate external
--   decorations padding).
AFitY :: Autosize

-- | No autosizing is applied.
ANone :: Autosize

-- | Automatically expand size of visualization from the given dimensions
--   in order to fit in all supplementary decorations (legends etc.).
APad :: Autosize

-- | Interpret visualization width to be for the entire visualization (data
--   rectangle is shrunk to accommodate external padding).
APadding :: Autosize

-- | Recalculate autosizing on every view update.
AResize :: Autosize

-- | Provide an optional title to be displayed in the visualization.
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>title</a> "Population Growth" [<a>TColor</a> "orange"]
--       , <a>dataFromUrl</a> "data/population.json" []
--       , <a>mark</a> <a>Bar</a> []
--       , <a>encoding</a> ...
--       ]
--   </pre>
--   
--   Prior to <tt>0.4.0.0</tt> there was no way to set the title options
--   (other than using <a>configuration</a> with <a>TitleStyle</a>).
title :: Text -> [TitleConfig] -> PropertySpec

-- | The background style of a single view or layer in a view composition.
viewBackground :: [ViewBackground] -> PropertySpec

-- | The properties for a single view or layer background.
--   
--   Used with <a>viewBackground</a> and <a>ViewBackgroundStyle</a>.
--   
--   In version <tt>0.6.0.0</tt> the constructors that used to take an
--   optional color, namely <a>VBFill</a> and <a>VBStroke</a>, were split
--   out, so that they now take a <a>Color</a> argument and new
--   constructors - <a>VBNoFill</a> and <a>VBNoStroke</a> - were added to
--   replace the <tt>Nothing</tt> versions.
data ViewBackground

-- | A list of named styles to apply. A named style can be specified via
--   <a>MarkNamedStyles</a>. Later styles in the list will override earlier
--   ones if there is a conflict in any of the mark properties.
VBStyle :: [StyleLabel] -> ViewBackground

-- | The radius in pixels of rounded corners.
VBCornerRadius :: Double -> ViewBackground

-- | Fill color. See also <a>VBNoFill</a>.
--   
--   This was changed to use the <tt>Color</tt> type alias in version
--   <tt>0.5.0.0</tt> and removed the <tt>Maybe</tt> type in version
--   <tt>0.6.0.0</tt>.
VBFill :: Color -> ViewBackground

-- | Do not use a fill. See also <a>VBFill</a>.
VBNoFill :: ViewBackground

-- | Fill opacity.
VBFillOpacity :: Opacity -> ViewBackground

-- | Overall opacity.
VBOpacity :: Opacity -> ViewBackground

-- | The stroke color for a line around the background. See also
--   <a>VBNoStroke</a>.
--   
--   This was changed to use the <tt>Color</tt> type alias in version
--   <tt>0.5.0.0</tt> and removed the <tt>Maybe</tt> type in version
--   <tt>0.6.0.0</tt>.
VBStroke :: Color -> ViewBackground

-- | Do not use a stroke. See also <a>VBStroke</a>.
VBNoStroke :: ViewBackground

-- | The opacity of the line around the background, if drawn.
VBStrokeOpacity :: Opacity -> ViewBackground

-- | The width of the line around the background, if drawn.
VBStrokeWidth :: Double -> ViewBackground

-- | The cap line-ending for the line around the background, if drawn.
VBStrokeCap :: StrokeCap -> ViewBackground

-- | The dash pattern of the line around the background, if drawn.
VBStrokeDash :: DashStyle -> ViewBackground

-- | The offset of the dash pattern for the line around the background, if
--   drawn.
VBStrokeDashOffset :: DashOffset -> ViewBackground

-- | The line-joining style of the line around the background, if drawn.
VBStrokeJoin :: StrokeJoin -> ViewBackground

-- | The mitre limit at which to bevel the line around the background, if
--   drawn.
VBStrokeMiterLimit :: Double -> ViewBackground

-- | Create a single global configuration from a list of configuration
--   specifications. Configurations are applied to all relevant items in
--   the specification. See the <a>Vega-Lite documentation</a> for more
--   details.
--   
--   The following example would make axis lines (domain) 2 pixels wide,
--   remove the border rectangle and require interactive selection of items
--   to use a double-click:
--   
--   <pre>
--   config =
--       <a>configure</a>
--           . <a>configuration</a> (<a>Axis</a> [ <a>DomainWidth</a> 1 ])
--           . <a>configuration</a> (<a>ViewStyle</a> [ <a>ViewStroke</a> "transparent" ])
--           . <a>configuration</a> (<a>SelectionStyle</a> [ ( <a>Single</a>, [ <a>On</a> "dblclick" ] ) ])
--   </pre>
configure :: [ConfigureSpec] -> PropertySpec

-- | Defines a single configuration option to be applied globally across
--   the visualization. The first parameter identifies the type of
--   configuration, the second a list of previous configurations to which
--   this one may be added.
--   
--   The result should be used with <a>configure</a>.
--   
--   <pre>
--   <a>configuration</a> (<a>Axis</a> [ <a>DomainWidth</a> 4 ]) []
--   </pre>
configuration :: ConfigurationProperty -> BuildConfigureSpecs

-- | Type of configuration property to customise. See the <a>Vega-Lite
--   documentation</a> for details. There are multiple ways to configure
--   the properties of an axis, as discussed in the Vega-Lite <a>axis
--   configuration</a> documentation.
--   
--   Used by <a>configuration</a>.
--   
--   In <tt>version 0.7.0.0</tt>, the <a>AxisBand</a> ,
--   <a>AxisDiscrete</a>, <a>AxisPoint</a>, <a>AxisQuantitative</a>, and
--   <a>AxisTemporal</a> were changed to accept an additional argument
--   (<a>AxisChoice</a>), to define which axis the configuration should be
--   applied to.
--   
--   In <tt>version 0.6.0.0</tt>:
--   
--   <ul>
--   <li>the <tt>Autosize</tt>, <tt>Background</tt>, <tt>CountTitle</tt>,
--   <tt>FieldTitle</tt>, <tt>Legend</tt>, <tt>NumberFormat</tt>,
--   <tt>Padding</tt>, <tt>Projection</tt>, <tt>Range</tt>, <tt>Scale</tt>.
--   <tt>TimeFormat</tt>, and <tt>View</tt> constructors have been
--   deprecated, and should be replaced by <a>AutosizeStyle</a>,
--   <a>BackgroundStyle</a>, <a>CountTitleStyle</a>,
--   <a>FieldTitleStyle</a>, <a>LegendStyle</a>, <a>NumberFormatStyle</a>,
--   <a>PaddingStyle</a>, <a>ProjectionStyle</a>, <a>RangeStyle</a>,
--   <a>ScaleStyle</a>, <a>TimeFormatStyle</a>, and <a>ViewStyle</a>
--   respectively. The axis configuration options have not been updated to
--   this system.</li>
--   <li>new constructors have been added: <a>AxisDiscrete</a>,
--   <a>AxisPoint</a>, <a>AxisQuantitative</a>, <a>AxisTemporal</a>,
--   <a>BoxplotStyle</a>, <a>ErrorBandStyle</a>, <a>ErrorBarStyle</a>,
--   <a>HeaderColumnStyle</a>, <a>HeaderFacetStyle</a>,
--   <a>HeaderRowStyle</a>, <a>ImageStyle</a>, and <a>RepeatStyle</a>.</li>
--   <li><a>ConcatStyle</a> and <a>FacetStyle</a> now take a common type,
--   <a>CompositionConfig</a>, rather than <tt>ConcatConfig</tt> and
--   <tt>FacetStyle</tt>.</li>
--   </ul>
--   
--   In <tt>version 0.5.0.0</tt>:
--   
--   <ul>
--   <li>the <tt>RemoveInvalid</tt> constructor was removed, as the new
--   <a>MRemoveInvalid</a> constructor for the <a>MarkProperty</a> type
--   should be used instead (so <tt><a>configuration</a> (RemoveInvalid
--   b)</tt> changes to <tt><a>configuration</a> (<a>MarkStyle</a>
--   [<a>MRemoveInvalid</a> b])</tt>.</li>
--   <li>the <tt>Stack</tt> constructor (which was called
--   <tt>StackProperty</tt> prior to version <tt>0.4.0.0</tt>) was
--   removed.</li>
--   </ul>
data ConfigurationProperty

-- | The default appearance of arc marks.
ArcStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default appearance of area marks.
AreaStyle :: [MarkProperty] -> ConfigurationProperty

-- | A boolean flag indicating if ARIA default attributes should be
--   included for marks and guides (SVG output only). If False, the
--   "aria-hidden" attribute will be set for all guides, removing them from
--   the ARIA accessibility tree and Vega-Lite will not generate default
--   descriptions for marks.
--   
--   <b>Default value:</b> True
AriaStyle :: Bool -> ConfigurationProperty

-- | The default sizing of visualizations.
--   
--   This was renamed from <tt>Autosize</tt> in <tt>0.6.0.0</tt>.
AutosizeStyle :: [Autosize] -> ConfigurationProperty

-- | The default appearance of axes.
Axis :: [AxisConfig] -> ConfigurationProperty

-- | The default appearance of axes with band scaling.
--   
--   See also <a>AxisDiscrete</a>.
AxisBand :: AxisChoice -> [AxisConfig] -> ConfigurationProperty

-- | The default appearance of the bottom-side axes.
AxisBottom :: [AxisConfig] -> ConfigurationProperty

-- | The default appearance of axes with point or band scales.
--   
--   See also <a>AxisBand</a> and <a>AxisPoint</a>.
AxisDiscrete :: AxisChoice -> [AxisConfig] -> ConfigurationProperty

-- | The default appearance of the left-side axes.
AxisLeft :: [AxisConfig] -> ConfigurationProperty

-- | The default appearance of axes with point scales.
--   
--   See also <a>AxisDiscrete</a>.
AxisPoint :: AxisChoice -> [AxisConfig] -> ConfigurationProperty

-- | The default appearance of quantitative axes.
AxisQuantitative :: AxisChoice -> [AxisConfig] -> ConfigurationProperty

-- | The default appearance of the right-side axes.
AxisRight :: [AxisConfig] -> ConfigurationProperty

-- | The default appearance of temporal axes.
AxisTemporal :: AxisChoice -> [AxisConfig] -> ConfigurationProperty

-- | The default appearance of the top-side axes.
AxisTop :: [AxisConfig] -> ConfigurationProperty

-- | The default appearance of the X axes.
AxisX :: [AxisConfig] -> ConfigurationProperty

-- | The default appearance of the Y axes.
AxisY :: [AxisConfig] -> ConfigurationProperty

-- | Assign a set of axis styles to a label. These labels can then be
--   referred to when configuring an axis with <a>AxStyle</a> and
--   <a>AStyle</a>.
--   
--   To customize the style for guides (axes, headers, and legends),
--   Vega-Lite includes the following built-in style names:
--   
--   <ul>
--   <li>"guide-label": style for axis, legend, and header labels</li>
--   <li>"guide-title": style for axis, legend, and header titles</li>
--   <li>"group-label": styles for chart titles</li>
--   <li>"group-subtitle"</li>
--   </ul>
AxisNamedStyles :: [(StyleLabel, [AxisProperty])] -> ConfigurationProperty

-- | The default background color of visualizations.
--   
--   This was changed to use the <tt>Color</tt> type alias in version
--   <tt>0.5.0.0</tt>.
--   
--   This was renamed from <tt>Background</tt> in <tt>0.6.0.0</tt>.
BackgroundStyle :: Color -> ConfigurationProperty

-- | The default appearance of bar marks.
BarStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default appearance for box plots.
BoxplotStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default appearance of circle marks.
CircleStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default appearance for all concatenation and repeat view
--   composition operators (<a>vlConcat</a>, <a>hConcat</a>,
--   <a>vConcat</a>, and <a>repeat</a>).
--   
--   In <tt>0.6.0.0</tt> this was changed from accepting
--   <tt>ConcatConfig</tt> to <a>CompositionConfig</a>.
--   
--   Vega-Lite 4.8 changed this field to also control repeat-view operators
--   (which previously had used <tt>RepeatStyle</tt>).
ConcatStyle :: [CompositionConfig] -> ConfigurationProperty

-- | The default axis and legend title for count fields. The default is
--   <tt>"Count of Records"</tt>.
--   
--   This was renamed from <tt>CountTitle</tt> in <tt>0.6.0.0</tt>.
CountTitleStyle :: Text -> ConfigurationProperty

-- | Allow the "formatType" property for text marks and guides to accept a
--   custom formatter function registered as a <a>Vega Expression</a>.
CustomFormatStyle :: Bool -> ConfigurationProperty

-- | The default appearance for error bands.
ErrorBandStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default appearance for error bars.
ErrorBarStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default appearance of facet layouts.
--   
--   In <tt>0.6.0.0</tt> this was changed from accepting
--   <tt>FacetConfig</tt> to <a>CompositionConfig</a>.
FacetStyle :: [CompositionConfig] -> ConfigurationProperty

-- | The default title-generation style for fields.
--   
--   This was renamed from <tt>FieldTitle</tt> in <tt>0.6.0.0</tt>.
FieldTitleStyle :: FieldTitleProperty -> ConfigurationProperty

-- | The default font for all text marks, titles, and labels.
--   
--   The naming scheme used here is somewhat unfortunate, as this is for
--   the name of the font (such as <tt>"serif"</tt> or <tt>"Comic Sans
--   MS"</tt>), not the font-style.
FontStyle :: Text -> ConfigurationProperty

-- | The default appearance of geoshape marks.
GeoshapeStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default appearance of all headers.
HeaderStyle :: [HeaderProperty] -> ConfigurationProperty

-- | The default appearance for column headers.
HeaderColumnStyle :: [HeaderProperty] -> ConfigurationProperty

-- | The default appearance for non-row and non-column facet headers.
HeaderFacetStyle :: [HeaderProperty] -> ConfigurationProperty

-- | The default appearance for row headers.
HeaderRowStyle :: [HeaderProperty] -> ConfigurationProperty

-- | The default appearance for images.
ImageStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default appearance of legends.
--   
--   This was renamed from <tt>Legend</tt> in <tt>0.6.0.0</tt>.
LegendStyle :: [LegendConfig] -> ConfigurationProperty

-- | The default appearance of line marks.
LineStyle :: [MarkProperty] -> ConfigurationProperty

-- | The delimiter, such as a newline character, upon which to break text
--   strings into multiple lines. This can be over-ridden by mark or style
--   configuration settings.
--   
--   Added in Vega-Lite 4.6.0.
LineBreakStyle :: Text -> ConfigurationProperty

-- | The default mark appearance.
MarkStyle :: [MarkProperty] -> ConfigurationProperty

-- | Assign a set of mark styles to a label. These labels can then be
--   referred to when configuring a mark, such as with <a>TStyle</a>.
MarkNamedStyles :: [(StyleLabel, [MarkProperty])] -> ConfigurationProperty

-- | The default number formatting for axis and text labels, using <a>D3's
--   number format pattern</a>.
--   
--   As an example <tt>NumberFormatStyle "s"</tt> will use SI units.
--   
--   This was renamed from <tt>NumberFormat</tt> in <tt>0.6.0.0</tt>.
NumberFormatStyle :: Text -> ConfigurationProperty

-- | The default padding in pixels from the edge of the of visualization to
--   the data rectangle.
--   
--   This was renamed from <tt>Padding</tt> in <tt>0.6.0.0</tt>.
PaddingStyle :: Padding -> ConfigurationProperty

-- | The default appearance of point marks.
PointStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default style of map projections.
--   
--   This was renamed from <tt>Projection</tt> in <tt>0.6.0.0</tt>.
ProjectionStyle :: [ProjectionProperty] -> ConfigurationProperty

-- | The default range properties used when scaling.
--   
--   This was renamed from <tt>Range</tt> in <tt>0.6.0.0</tt>.
RangeStyle :: [RangeConfig] -> ConfigurationProperty

-- | The default appearance of rectangle marks.
RectStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default appearance for the <a>repeat</a> operator.
--   
--   Support for this setting was removed in Vega-Lite 4.8. This
--   constructor is currently still supported, but will be removed in a
--   future release. The <a>ConcatStyle</a> option should be used instead.
RepeatStyle :: [CompositionConfig] -> ConfigurationProperty

-- | The default appearance of rule marks.
RuleStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default properties used when scaling.
--   
--   This was renamed from <tt>Scale</tt> in <tt>0.6.0.0</tt>.
ScaleStyle :: [ScaleConfig] -> ConfigurationProperty

-- | The default appearance of selection marks.
SelectionStyle :: [(Selection, [SelectionProperty])] -> ConfigurationProperty

-- | the default appearance of square marks
SquareStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default appearance of text marks.
TextStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default appearance of tick marks.
TickStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default time format for raw time values (without time units) in
--   text marks, legend labels, and header labels. This does <i>not</i>
--   control the appearance of axis labels.
--   
--   The default is <tt>"%b %d, %Y"</tt>.
--   
--   This was renamed from <tt>TimeFormat</tt> in <tt>0.6.0.0</tt>.
TimeFormatStyle :: Text -> ConfigurationProperty

-- | The default appearance of visualization titles.
TitleStyle :: [TitleConfig] -> ConfigurationProperty

-- | The default style of trail marks.
TrailStyle :: [MarkProperty] -> ConfigurationProperty

-- | The default properties for <a>single view plots</a>.
--   
--   This was renamed from <tt>View</tt> in <tt>0.6.0.0</tt>.
ViewStyle :: [ViewConfig] -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>AutosizeStyle</a> should be used instead.

-- | <i>Deprecated: Please change Autosize to AutosizeStyle</i>
Autosize :: [Autosize] -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>BackgroundStyle</a> should be used instead.

-- | <i>Deprecated: Please change Background to BackgroundStyle</i>
Background :: Color -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>CountTitleStyle</a> should be used instead.

-- | <i>Deprecated: Please change CountTitle to CountTitleStyle</i>
CountTitle :: Text -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>FieldTitleStyle</a> should be used instead.

-- | <i>Deprecated: Please change FieldTitle to FieldTitleStyle</i>
FieldTitle :: FieldTitleProperty -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>LegendStyle</a> should be used instead.

-- | <i>Deprecated: Please change Legend to LegendStyle</i>
Legend :: [LegendConfig] -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>NumberFormatStyle</a> should be used instead.

-- | <i>Deprecated: Please change NumberFormat to NumberFormatStyle</i>
NumberFormat :: Text -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>PaddingStyle</a> should be used instead.

-- | <i>Deprecated: Please change Padding to PaddingStyle</i>
Padding :: Padding -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>ProjectionStyle</a> should be used instead.

-- | <i>Deprecated: Please change Projection to ProjectionStyle</i>
Projection :: [ProjectionProperty] -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>RangeStyle</a> should be used instead.

-- | <i>Deprecated: Please change Range to RangeStyle</i>
Range :: [RangeConfig] -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>ScaleStyle</a> should be used instead.

-- | <i>Deprecated: Please change Scale to ScaleStyle</i>
Scale :: [ScaleConfig] -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>TimeFormatStyle</a> should be used instead.

-- | <i>Deprecated: Please change TimeFormat to TimeFormatStyle</i>
TimeFormat :: Text -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and <a>ViewStyle</a>
--   should be used instead.

-- | <i>Deprecated: Please change View to ViewStyle</i>
View :: [ViewConfig] -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>MarkNamedStyles</a> should be used instead.

-- | <i>Deprecated: Please change Legend to MarkNamedStyles</i>
NamedStyle :: StyleLabel -> [MarkProperty] -> ConfigurationProperty

-- | As of version <tt>0.6.0.0</tt> this is deprecated and
--   <a>MarkNamedStyles</a> should be used instead.

-- | <i>Deprecated: Please change Legend to MarkNamedStyles</i>
NamedStyles :: [(StyleLabel, [MarkProperty])] -> ConfigurationProperty

-- | Axis configuration options for customising all axes. See the
--   <a>Vega-Lite documentation</a> for more details.
--   
--   This is used by <a>ConfigurationProperty</a>.
--   
--   In <tt>0.5.0.0</tt> the <tt>ShortTimeLabels</tt> constructor was
--   removed.
--   
--   The <tt>TitleMaxLength</tt> constructor was removed in release
--   <tt>0.4.0.0</tt>. The <tt>TitleLimit</tt> constructor should be used
--   instead.
data AxisConfig

-- | A boolean flag indicating if <a>ARIA attributes</a> should be included
--   (SVG output only).
--   
--   If False, the "aria-hidden" attribute will be set on the output SVG
--   group, removing the axis from the ARIA accessibility tree.
--   
--   <b>Default value:</b> True
Aria :: Bool -> AxisConfig

-- | A text description of this axis for <a>ARIA accessibility</a> (SVG
--   output only).
--   
--   If the <a>Aria</a> property is True, for SVG output the
--   <a>"aria-label" attribute</a> will be set to this description.
--   
--   If the description is unspecified it will be automatically generated.
AriaDescription :: Text -> AxisConfig

-- | The named styles - generated with <a>AxisNamedStyles</a> - to apply to
--   the axis or axes.
--   
--   Added in Vega-Lite 4.7.0 (although accidentally supported in
--   <tt>hvega</tt> before this release).
AStyle :: [StyleLabel] -> AxisConfig

-- | The default axis band position.
BandPosition :: Double -> AxisConfig

-- | Disable the axis?
--   
--   Added in Vega-Lite 4.8.0.
Disable :: Bool -> AxisConfig

-- | Should the axis domain be displayed?
Domain :: Bool -> AxisConfig

-- | The stroke cap for the domain lines' ending style.
DomainCap :: StrokeCap -> AxisConfig

-- | The axis domain color.
DomainColor :: Color -> AxisConfig

-- | The dash pattern of the domain.
DomainDash :: DashStyle -> AxisConfig

-- | The offset for the dash pattern.
DomainDashOffset :: DashOffset -> AxisConfig

-- | The axis domain opacity.
DomainOpacity :: Opacity -> AxisConfig

-- | The width of the axis domain.
DomainWidth :: Double -> AxisConfig

-- | <a>Formatting pattern</a> for axis values. To distinguish between
--   formatting as numeric values and data/time values, additionally use
--   <a>FormatAsNum</a>, <a>FormatAsTemporal</a>, or <a>FormatAsCustom</a>.
--   
--   When used with a <a>custom formatType</a>, this value will be passed
--   as "format" alongside "datum.value" to the registered function.
Format :: Text -> AxisConfig

-- | Facet headers should be formatted as numbers. Use a <a>d3 numeric
--   format string</a> with <a>Format</a>.
FormatAsNum :: AxisConfig

-- | Facet headers should be formatted as dates or times. Use a <a>d3
--   date/time format string</a> with <a>Format</a>.
FormatAsTemporal :: AxisConfig

-- | The <a>custom format type</a> for use with with <a>Format</a>.
FormatAsCustom :: Text -> AxisConfig

-- | Should an axis grid be displayed?
Grid :: Bool -> AxisConfig

-- | The stroke cap for the grid lines' ending style.
GridCap :: StrokeCap -> AxisConfig

-- | The color for the grid.
GridColor :: Color -> AxisConfig

-- | The dash pattern of the grid.
GridDash :: DashStyle -> AxisConfig

-- | The offset for the dash pattern.
GridDashOffset :: DashOffset -> AxisConfig

-- | The opacity of the grid.
GridOpacity :: Opacity -> AxisConfig

-- | The width of the grid lines.
GridWidth :: Double -> AxisConfig

-- | Should labels be added to an axis?
Labels :: Bool -> AxisConfig

-- | The horizontal alignment for labels.
LabelAlign :: HAlign -> AxisConfig

-- | The angle at which to draw labels.
LabelAngle :: Angle -> AxisConfig

-- | The vertical alignment for labels.
LabelBaseline :: VAlign -> AxisConfig

-- | No boundary overlap check is applied to labels. This is the default
--   behavior.
--   
--   See also <a>LabelBound</a> and <a>LabelBoundValue</a>.
LabelNoBound :: AxisConfig

-- | Labels are hidden if they exceed the axis range by more than 1 pixel.
--   
--   See also <a>LabelNoBound</a> and <a>LabelBoundValue</a>.
LabelBound :: AxisConfig

-- | Labels are hidden if they exceed the axis range by more than the given
--   number of pixels.
--   
--   See also <a>LabelNoBound</a> and <a>LabelBound</a>.
LabelBoundValue :: Double -> AxisConfig

-- | The label color.
LabelColor :: Color -> AxisConfig

-- | The labels are not aligned flush to the scale. This is the default for
--   non-continuous X scales.
--   
--   See also <a>LabelFlush</a> and <a>LabelFlushValue</a>.
LabelNoFlush :: AxisConfig

-- | The first and last axis labels are aligned flush to the scale range.
--   
--   See also <a>LabelNoFlush</a> and <a>LabelFlushValue</a>.
LabelFlush :: AxisConfig

-- | The labels are aligned flush, and the parameter determines the extra
--   offset, in pixels, to apply to the first and last labels. This can
--   help the labels better group (visually) with the corresponding axis
--   ticks.
--   
--   See also <a>LabelNoFlush</a> and <a>LabelFlush</a>.
LabelFlushValue :: Double -> AxisConfig

-- | The number of pixels to offset flush-adjusted labels.
LabelFlushOffset :: Double -> AxisConfig

-- | The font for the label.
LabelFont :: Text -> AxisConfig

-- | The font size of the label.
LabelFontSize :: Double -> AxisConfig

-- | The font style of the label.
LabelFontStyle :: Text -> AxisConfig

-- | The font weight of the label.
LabelFontWeight :: FontWeight -> AxisConfig

-- | The maximum width of a label, in pixels.
LabelLimit :: Double -> AxisConfig

-- | The line height, in pixels, for multi-line label text.
--   
--   Added in Vega-Lite 4.6.0.
LabelLineHeight :: Double -> AxisConfig

-- | The pixel offset for labels, in addition to <a>TickOffset</a>.
LabelOffset :: Double -> AxisConfig

-- | The opacity of the label.
LabelOpacity :: Opacity -> AxisConfig

-- | How should overlapping labels be displayed?
LabelOverlap :: OverlapStrategy -> AxisConfig

-- | The padding, in pixels, between the label and the axis.
LabelPadding :: Double -> AxisConfig

-- | The minimum separation, in pixels, between label bounding boxes for
--   them to be considered non-overlapping. This is ignored if the
--   <a>LabelOverlap</a> strategy is <a>ONone</a>.
LabelSeparation :: Double -> AxisConfig

-- | The maximum extent, in pixels, that axis ticks and labels should use.
--   This determines a maxmium offset value for axis titles.
MaxExtent :: Double -> AxisConfig

-- | The minimum extent, in pixels, that axis ticks and labels should use.
--   This determines a minmium offset value for axis titles.
MinExtent :: Double -> AxisConfig

-- | Do not draw a title for this axis.
NoTitle :: AxisConfig

-- | The orientation of the axis.
Orient :: Side -> AxisConfig

-- | Should tick marks be drawn on an axis?
Ticks :: Bool -> AxisConfig

-- | For band scales, indicates if ticks and grid lines should be placed at
--   the center of a band (the default) or at the band extents to indicate
--   intervals.
TickBand :: BandAlign -> AxisConfig

-- | The stroke cap for the grid lines' ending style.
TickCap :: StrokeCap -> AxisConfig

-- | The color of the ticks.
TickColor :: Color -> AxisConfig

-- | The desired number of ticks for axes visualizing quantitative scales.
--   This is a hint to the system, and the actual number used will be
--   adjusted to be "nice" (multiples of 2, 5, or 10) and lie within the
--   underlying scale's range.
--   
--   The <a>TickCountTime</a> option can instead be used for "time" or
--   "utc" scales.
TickCount :: Int -> AxisConfig

-- | A specialised version of <a>TickCount</a> for "time" and "utc" time
--   scales.
--   
--   The <a>IsNice</a> and <a>NTickCount</a> options should not be used as
--   they generate invalid VegaLite.
TickCountTime :: ScaleNice -> AxisConfig

-- | The dash pattern of the ticks.
TickDash :: DashStyle -> AxisConfig

-- | The offset for the dash pattern.
TickDashOffset :: DashOffset -> AxisConfig

-- | Should an extra axis tick mark be added for the initial position of
--   the axis?
TickExtra :: Bool -> AxisConfig

-- | The position offset, in pixels, to apply to ticks, labels, and grid
--   lines.
--   
--   See also <a>LabelOffset</a>.
TickOffset :: Double -> AxisConfig

-- | The opacity of the ticks.
TickOpacity :: Opacity -> AxisConfig

-- | Should pixel position values be rounded to the nearest integer?
TickRound :: Bool -> AxisConfig

-- | The size of the tick marks in pixels.
TickSize :: Double -> AxisConfig

-- | The width of the tick marks in pixels.
TickWidth :: Double -> AxisConfig

-- | The horizontal alignment of the axis title.
TitleAlign :: HAlign -> AxisConfig

-- | The text anchor position for placing axis titles.
TitleAnchor :: APosition -> AxisConfig

-- | The angle of the axis title.
TitleAngle :: Angle -> AxisConfig

-- | The vertical alignment of the axis title.
TitleBaseline :: VAlign -> AxisConfig

-- | The color of the axis title.
TitleColor :: Color -> AxisConfig

-- | The font for the axis title.
TitleFont :: Text -> AxisConfig

-- | The font size of the axis title.
TitleFontSize :: Double -> AxisConfig

-- | The font style of the axis title.
TitleFontStyle :: Text -> AxisConfig

-- | The font weight of the axis title.
TitleFontWeight :: FontWeight -> AxisConfig

-- | The maximum allowed width of the axis title, in pixels.
TitleLimit :: Double -> AxisConfig

-- | Line height, in pixels, for multi-line title text.
TitleLineHeight :: Double -> AxisConfig

-- | The opacity of the axis title.
TitleOpacity :: Opacity -> AxisConfig

-- | The padding, in pixels, between title and axis.
TitlePadding :: Double -> AxisConfig

-- | The X coordinate of the axis title, relative to the axis group.
TitleX :: Double -> AxisConfig

-- | The Y coordinate of the axis title, relative to the axis group.
TitleY :: Double -> AxisConfig

-- | The translation offset in pixels applied to the axis group mark x and
--   y. If specified it overrides the default value of a 0.5 offset to
--   pixel-align stroked lines.
TranslateOffset :: Double -> AxisConfig

-- | Which axis should the configuration be applied to?
--   
--   Added in Vega-Lite 4.7.0.
data AxisChoice

-- | Apply the configuration to both axes.
--   
--   This was the default behavior prior to <tt>0.7.0.0</tt>.
AxXY :: AxisChoice

-- | Select the X axis.
AxX :: AxisChoice

-- | Select the Y axis.
AxY :: AxisChoice

-- | Legend configuration options, set with the <a>LegendStyle</a>
--   constructor. For more detail see the <a>Vega-Lite documentation</a>.
--   
--   In <tt>0.9.0.0</tt> the <a>LeTickCountTime</a> constructor was added.
--   
--   In <tt>0.8.0.0</tt> the <tt>LeTitle</tt> constructor was removed as
--   there is no way to set the default text for a legend title in
--   Vega-Lite (<a>LeNoTitle</a> remains as this is used to turn off legend
--   titles).
--   
--   In <tt>0.6.0.0</tt> the following constructors were added (all from
--   Vega-Lite 4.0): <a>LeSymbolLimit</a>, <a>LeTickCount</a>,
--   <a>LeTitleLineHeight</a>, and <a>LeUnselectedOpacity</a>.
--   
--   In <tt>0.5.0.0</tt> the <tt>LeShortTimeLabels</tt> constructor was
--   removed (Vega-Lite 4.0).
--   
--   This data type has seen significant changes in the <tt>0.4.0.0</tt>
--   release:
--   
--   <ul>
--   <li>the <tt>EntryPadding</tt>, <tt>GradientHeight</tt>,
--   <tt>GradientLabelBaseline</tt>, <tt>GradientWidth</tt> and
--   <tt>SymbolColor</tt> constructors were removed;</li>
--   <li>the constructors were removed;</li>
--   <li>the remaining constructors that did not begin with <tt>Le</tt>
--   were renamed (for example <tt>Orient</tt> was changed to
--   <a>LeOrient</a>);</li>
--   <li>and new constructors were added.</li>
--   </ul>
data LegendConfig

-- | A boolean flag indicating if <a>ARIA attributes</a> should be included
--   (SVG output only).
--   
--   If False, the "aria-hidden" attribute will be set on the output SVG
--   group, removing the legend from the ARIA accessibility tree.
--   
--   <b>Default value:</b> True
LeAria :: Bool -> LegendConfig

-- | A text description of this legend for <a>ARIA accessibility</a> (SVG
--   output only).
--   
--   If the <a>LeAria</a> property is true, for SVG output the
--   <a>"aria-label" attribute</a> will be set to this description.
--   
--   If the description is unspecified it will be automatically generated.
LeAriaDescription :: Text -> LegendConfig

-- | The height in pixels at which to clip symbol legend entries.
LeClipHeight :: Double -> LegendConfig

-- | The horizontal padding, in pixels, between symbol legend entries.
LeColumnPadding :: Double -> LegendConfig

-- | The number of columns in which to arrange symbol legend entries. A
--   value of <tt>0</tt> or lower indicates a single row with one column
--   per entry.
LeColumns :: Int -> LegendConfig

-- | The corner radius for the full legend.
LeCornerRadius :: Double -> LegendConfig

-- | The direction for the legend.
LeDirection :: Orientation -> LegendConfig

-- | Disable the legend by default?
--   
--   Added in Vega-Lite 4.8.
LeDisable :: Bool -> LegendConfig

-- | The background fill color for the full legend.
LeFillColor :: Color -> LegendConfig

-- | The default direction for gradient legends.
LeGradientDirection :: Orientation -> LegendConfig

-- | The maximum legend length for a horizontal gradient.
LeGradientHorizontalMaxLength :: Double -> LegendConfig

-- | The minimum legend length for a horizontal gradient.
LeGradientHorizontalMinLength :: Double -> LegendConfig

-- | The maximum allowed length, in pixels, of color-ramp gradient labels.
LeGradientLabelLimit :: Double -> LegendConfig

-- | The vertical offset in pixels for color-ramp gradient labels.
LeGradientLabelOffset :: Double -> LegendConfig

-- | The length in pixels of the primary axis of a color gradient. See also
--   <a>LeGradientThickness</a>.
LeGradientLength :: Double -> LegendConfig

-- | The opacity of the color gradient.
LeGradientOpacity :: Opacity -> LegendConfig

-- | The color of the gradient stroke.
LeGradientStrokeColor :: Color -> LegendConfig

-- | The width of the gradient stroke, in pixels.
LeGradientStrokeWidth :: Double -> LegendConfig

-- | The thickness in pixels of the color gradient. See also
--   <a>LeGradientLength</a>.
LeGradientThickness :: Double -> LegendConfig

-- | The maximum legend length for a vertical gradient.
LeGradientVerticalMaxLength :: Double -> LegendConfig

-- | The minimum legend length for a vertical gradient.
LeGradientVerticalMinLength :: Double -> LegendConfig

-- | The alignment to apply to symbol legends rows and columns.
LeGridAlign :: CompositionAlignment -> LegendConfig

-- | The alignment of the legend label.
LeLabelAlign :: HAlign -> LegendConfig

-- | The position of the baseline of the legend label.
LeLabelBaseline :: VAlign -> LegendConfig

-- | The color of the legend label.
LeLabelColor :: Color -> LegendConfig

-- | The font of the legend label.
LeLabelFont :: Text -> LegendConfig

-- | The font of the legend label.
LeLabelFontSize :: Double -> LegendConfig

-- | The font style of the legend label.
LeLabelFontStyle :: Text -> LegendConfig

-- | The font weight of the legend label.
LeLabelFontWeight :: FontWeight -> LegendConfig

-- | The maxumum allowed pixel width of the legend label.
LeLabelLimit :: Double -> LegendConfig

-- | The offset of the legend label.
LeLabelOffset :: Double -> LegendConfig

-- | The opacity of the legend label.
LeLabelOpacity :: Opacity -> LegendConfig

-- | How to resolve overlap of labels in gradient legends.
LeLabelOverlap :: OverlapStrategy -> LegendConfig

-- | The passing in pixels between the legend and legend labels.
LeLabelPadding :: Double -> LegendConfig

-- | The minimum separation between label bounding boxes for them to be
--   considered non-overlapping (ignored if <a>ONone</a> is the chosen
--   overlap strategy).
LeLabelSeparation :: Double -> LegendConfig

-- | Layout parameters for the legend orient group.
--   
--   It is not clear if this is used in Vega Lite 4.2 or later.
LeLayout :: [LegendLayout] -> LegendConfig

-- | Custom x position for a legend with orientation <a>LONone</a>.
LeLeX :: Double -> LegendConfig

-- | Custom y position for a legend with orientation <a>LONone</a>.
LeLeY :: Double -> LegendConfig

-- | The offset in pixels between the legend and the data rectangle and
--   axes.
LeOffset :: Double -> LegendConfig

-- | The orientation of the legend, which determines how the legend is
--   positioned within the scene.
LeOrient :: LegendOrientation -> LegendConfig

-- | The padding between the border and content of the legend group.
LePadding :: Double -> LegendConfig

-- | The vertical padding in pixels between symbol legend entries.
LeRowPadding :: Double -> LegendConfig

-- | The border stoke color for the full legend.
LeStrokeColor :: Color -> LegendConfig

-- | The border stroke dash pattern for the full legend.
LeStrokeDash :: DashStyle -> LegendConfig

-- | The border stroke width for the full legend.
LeStrokeWidth :: Double -> LegendConfig

-- | The fill color for legend symbols. This is only applied if there is no
--   "fill" scale color encoding for the legend.
LeSymbolBaseFillColor :: Color -> LegendConfig

-- | The stroke color for legend symbols. This is only applied if there is
--   no "fill" scale color encoding for the legend.
LeSymbolBaseStrokeColor :: Color -> LegendConfig

-- | The pattern for dashed symbol strokes.
LeSymbolDash :: DashStyle -> LegendConfig

-- | The offset at which to start drawing the symbol dash pattern.
LeSymbolDashOffset :: DashOffset -> LegendConfig

-- | The default direction for symbol legends.
LeSymbolDirection :: Orientation -> LegendConfig

-- | The color of the legend symbol.
LeSymbolFillColor :: Color -> LegendConfig

-- | The maximum number of allowed entries for a symbol legend. Any
--   additional entries will be dropped.
LeSymbolLimit :: Int -> LegendConfig

-- | The horizontal pixel offset for legend symbols.
LeSymbolOffset :: Double -> LegendConfig

-- | The opacity of the legend symbols.
LeSymbolOpacity :: Opacity -> LegendConfig

-- | The size of the legend symbol, in pixels.
LeSymbolSize :: Double -> LegendConfig

-- | The stroke color for legend symbols.
LeSymbolStrokeColor :: Color -> LegendConfig

-- | The width of the symbol's stroke.
LeSymbolStrokeWidth :: Double -> LegendConfig

-- | The default shape type for legend symbols.
LeSymbolType :: Symbol -> LegendConfig

-- | The desired number of tick values for quantitative legends.
--   
--   The <a>LeTickCountTime</a> option can instead be used for "time" or
--   "utc" scales.
LeTickCount :: Int -> LegendConfig

-- | A specialised version of <a>LeTickCount</a> for "time" and "utc" time
--   scales.
--   
--   The <a>IsNice</a> and <a>NTickCount</a> options should not be used as
--   they generate invalid VegaLite.
LeTickCountTime :: ScaleNice -> LegendConfig

-- | Do not add a title for the legend.
LeNoTitle :: LegendConfig

-- | The horizontal text alignment for legend titles.
LeTitleAlign :: HAlign -> LegendConfig

-- | The text anchor position for legend titles.
LeTitleAnchor :: APosition -> LegendConfig

-- | The vertical text alignment for legend titles.
LeTitleBaseline :: VAlign -> LegendConfig

-- | The color of the legend title.
LeTitleColor :: Color -> LegendConfig

-- | The font of the legend title.
LeTitleFont :: Text -> LegendConfig

-- | The font size of the legend title.
LeTitleFontSize :: Double -> LegendConfig

-- | The font style for the legend title.
LeTitleFontStyle :: Text -> LegendConfig

-- | The font weight of the legend title.
LeTitleFontWeight :: FontWeight -> LegendConfig

-- | The maxmimum pixel width of the legend title.
LeTitleLimit :: Double -> LegendConfig

-- | The line height, in pixels, for multi-line title text.
LeTitleLineHeight :: Double -> LegendConfig

-- | The opacity of the legend title.
LeTitleOpacity :: Opacity -> LegendConfig

-- | The orientation of the legend title.
LeTitleOrient :: Side -> LegendConfig

-- | The padding, in pixels, between title and legend.
LeTitlePadding :: Double -> LegendConfig

-- | The opacity of unselected legend entries.
--   
--   The default is 0.35.
LeUnselectedOpacity :: Opacity -> LegendConfig

-- | The z-index indicating the layering of the legend group relative to
--   the other axis, mark, and legend groups.
LeZIndex :: ZIndex -> LegendConfig

-- | <i>Highly experimental</i> and used with <a>LeLayout</a>.
data LegendLayout

-- | The anchor point for legend orient group layout.
LeLAnchor :: APosition -> LegendLayout
LeLBottom :: [BaseLegendLayout] -> LegendLayout
LeLBottomLeft :: [BaseLegendLayout] -> LegendLayout
LeLBottomRight :: [BaseLegendLayout] -> LegendLayout

-- | The bounds calculation to use for legend orient group layout.
LeLBounds :: Bounds -> LegendLayout

-- | A flag to center legends within a shared orient group.
LeLCenter :: Bool -> LegendLayout

-- | The layout firection for legend orient group layout.
LeLDirection :: Orientation -> LegendLayout
LeLLeft :: [BaseLegendLayout] -> LegendLayout

-- | The margin, in pixels, between legends within an orient group.
LeLMargin :: Double -> LegendLayout

-- | The offset, in pixels, from the chart body for a legend orient group.
LeLOffset :: Double -> LegendLayout
LeLRight :: [BaseLegendLayout] -> LegendLayout
LeLTop :: [BaseLegendLayout] -> LegendLayout
LeLTopLeft :: [BaseLegendLayout] -> LegendLayout
LeLTopRight :: [BaseLegendLayout] -> LegendLayout

-- | <i>Highly experimental</i> and used with constructors from
--   <a>LegendLayout</a>.
data BaseLegendLayout

-- | The anchor point for legend orient group layout.
BLeLAnchor :: APosition -> BaseLegendLayout

-- | The bounds calculation to use for legend orient group layout.
BLeLBounds :: Bounds -> BaseLegendLayout

-- | A flag to center legends within a shared orient group.
BLeLCenter :: Bool -> BaseLegendLayout

-- | The layout direction for legend orient group layout.
BLeLDirection :: Orientation -> BaseLegendLayout

-- | The margin, in pixels, between legends within an orient group.
BLeLMargin :: Double -> BaseLegendLayout

-- | The offset, in pixels, from the chart body for a legend orient group.
BLeLOffset :: Double -> BaseLegendLayout

-- | Scale configuration property. These are used to configure all scales
--   with <a>ScaleStyle</a>. For more details see the <a>Vega-Lite
--   documentation</a>.
--   
--   Version <tt>0.5.0.0</tt> removed the <tt>SCRangeStep</tt> and
--   <tt>SCTextXRangeStep</tt> constructors. The new <a>ViewStep</a>
--   constructor of <a>ViewConfig</a> should be used instead.
data ScaleConfig

-- | Default inner padding for x and y band-ordinal scales.
SCBandPaddingInner :: Double -> ScaleConfig

-- | Default outer padding for x and y band-ordinal scales.
SCBandPaddingOuter :: Double -> ScaleConfig

-- | Default inner padding for x and y band-ordinal scales of <a>Bar</a>
--   marks.
SCBarBandPaddingInner :: Double -> ScaleConfig

-- | Default outer padding for x and y band-ordinal scales of <a>Bar</a>
--   marks.
SCBarBandPaddingOuter :: Double -> ScaleConfig

-- | Default inner padding for x and y band-ordinal scales of <a>Rect</a>
--   marks.
SCRectBandPaddingInner :: Double -> ScaleConfig

-- | Default outer padding for x and y band-ordinal scales of <a>Rect</a>
--   marks.
SCRectBandPaddingOuter :: Double -> ScaleConfig

-- | Whether or not by default values that exceed the data domain are
--   clamped to the min/max range value.
SCClamp :: Bool -> ScaleConfig

-- | Default maximum value for mapping quantitative fields to a bar's
--   size/bandSize.
SCMaxBandSize :: Double -> ScaleConfig

-- | Default minimum value for mapping quantitative fields to a bar's
--   size/bandSize.
SCMinBandSize :: Double -> ScaleConfig

-- | Default maximum value for mapping a quantitative field to a text
--   mark's size.
SCMaxFontSize :: Double -> ScaleConfig

-- | Default minimum value for mapping a quantitative field to a text
--   mark's size.
SCMinFontSize :: Double -> ScaleConfig

-- | Default maximum opacity for mapping a field to opacity.
SCMaxOpacity :: Opacity -> ScaleConfig

-- | Default minimum opacity for mapping a field to opacity.
SCMinOpacity :: Opacity -> ScaleConfig

-- | Default maximum size for point-based scales.
SCMaxSize :: Double -> ScaleConfig

-- | Default minimum size for point-based scales.
SCMinSize :: Double -> ScaleConfig

-- | Default maximum stroke width for rule, line and trail marks.
SCMaxStrokeWidth :: Double -> ScaleConfig

-- | Default minimum stroke width for rule, line and trail marks.
SCMinStrokeWidth :: Double -> ScaleConfig

-- | Default padding for point-ordinal scales.
SCPointPadding :: Double -> ScaleConfig

-- | Are numeric values are rounded to integers when scaling? Useful for
--   snapping to the pixel grid.
SCRound :: Bool -> ScaleConfig

-- | Whether or not to use the source data range before aggregation.
SCUseUnaggregatedDomain :: Bool -> ScaleConfig

-- | Reverse the X scale (useful for right-to-left charts).
SCXReverse :: Bool -> ScaleConfig

-- | Properties for customising the colors of a range. The parameter should
--   be a named color scheme such as <tt>"accent"</tt> or
--   <tt>"purpleorange-11"</tt>. For details see the <a>Vega-Lite
--   documentation</a>.
--   
--   Used by <a>RangeStyle</a>.
data RangeConfig
RCategory :: Text -> RangeConfig
RDiverging :: Text -> RangeConfig
RHeatmap :: Text -> RangeConfig
ROrdinal :: Text -> RangeConfig
RRamp :: Text -> RangeConfig
RSymbol :: Text -> RangeConfig

-- | Title configuration properties. These are used to configure the
--   default style of all titles within a visualization with <a>title</a>
--   or <a>TitleStyle</a>.
--   
--   For further details see the <a>Vega-Lite documentation</a>.
data TitleConfig

-- | The horizontal text alignment for title text.
TAlign :: HAlign -> TitleConfig

-- | The anchor position when placing titles.
TAnchor :: APosition -> TitleConfig

-- | The angle when orientating titles.
TAngle :: Angle -> TitleConfig

-- | A boolean flag indicating if <a>ARIA attributes</a> should be included
--   (SVG output only).
--   
--   If False, the "aria-hidden" attribute will be set on the output SVG
--   group, removing the title from the ARIA accessibility tree.
--   
--   <b>Default value:</b> True
TAria :: Bool -> TitleConfig

-- | The vertical alignment when placing titles.
TBaseline :: VAlign -> TitleConfig

-- | The color of title text.
TColor :: Color -> TitleConfig

-- | The offset, in pixels, for the x coordinate of title and subtitle
--   text.
TdX :: Double -> TitleConfig

-- | The offset, in pixels, for the x coordinate of title and subtitle
--   text.
TdY :: Double -> TitleConfig

-- | Default font when showing titles.
TFont :: Text -> TitleConfig

-- | Default font size when showing titles.
TFontSize :: Double -> TitleConfig

-- | Defaylt font style when showing titles.
TFontStyle :: Text -> TitleConfig

-- | Default font weight when showing titles.
TFontWeight :: FontWeight -> TitleConfig

-- | Default title position anchor.
TFrame :: TitleFrame -> TitleConfig

-- | The maximum length, in pixels, of title and subtitle text.
TLimit :: Double -> TitleConfig

-- | Line height, in pixels, for multi-line title text.
TLineHeight :: Double -> TitleConfig

-- | Default offset, in pixels, of titles relative to the chart body.
TOffset :: Double -> TitleConfig

-- | Default placement of titles relative to the chart body.
TOrient :: Side -> TitleConfig

-- | A list of named styles to apply. A named style can be specified via
--   <a>MarkNamedStyles</a>. Later styles in the list will override earlier
--   ones if there is a conflict in any of the properties.
TStyle :: [StyleLabel] -> TitleConfig

-- | Subtitle text. This is placed below the title text. Use n to insert
--   line breaks into the subtitle.
--   
--   This should only be used with <a>title</a> and not <a>TitleConfig</a>.
TSubtitle :: Text -> TitleConfig

-- | Subtitle color.
TSubtitleColor :: Color -> TitleConfig

-- | Subtitle font.
TSubtitleFont :: Text -> TitleConfig

-- | Subtitle font size, in pixels.
TSubtitleFontSize :: Double -> TitleConfig

-- | Subtitle font style.
TSubtitleFontStyle :: Text -> TitleConfig

-- | Subtitle font weight.
TSubtitleFontWeight :: FontWeight -> TitleConfig

-- | Subtitle line height, in pixels.
TSubtitleLineHeight :: Double -> TitleConfig

-- | Padding, in pixels, between the title and Subtitle.
TSubtitlePadding :: Double -> TitleConfig

-- | Drawing order of a title relative to the other chart elements.
TZIndex :: ZIndex -> TitleConfig

-- | Specifies how the title anchor is positioned relative to the frame.
data TitleFrame

-- | The position is relative to the full bounding box.
FrBounds :: TitleFrame

-- | The pistion is relative to the group width / height.
FrGroup :: TitleFrame

-- | View configuration property. These are used to configure the style of
--   a single view within a visualization (via <a>ViewStyle</a>) such as
--   its size and default fill and stroke colors. For further details see
--   the <a>Vega-Lite documentation</a>.
--   
--   In version <tt>0.6.0.0</tt> the constructors that used to take an
--   optional color, namely <a>ViewFill</a> and <a>ViewStroke</a>, were
--   split out, so that they now take a <a>Color</a> argument and new
--   constructors - <a>ViewNoFill</a> and <a>ViewNoStroke</a> - were added
--   to replace the <tt>Nothing</tt> versions.
--   
--   In version <tt>0.5.0.0</tt> the <tt>ViewWidth</tt> and
--   <tt>ViewHeight</tt> constructors have been deprecated, and replaced by
--   <a>ViewContinuousWidth</a>, <a>ViewContinuousHeight</a>,
--   <a>ViewDiscreteWidth</a>, and <a>ViewDiscreteHeight</a>. The
--   <a>ViewBackgroundStyle</a> constructor has been added.
--   
--   This type has been changed in the <tt>0.4.0.0</tt> release to use a
--   consistent naming scheme for the constructors (everything starts with
--   <tt>View</tt>). Prior to this release only <tt>ViewWidth</tt> and
--   <tt>ViewHeight</tt> were named this way. There are also five new
--   constructors.
data ViewConfig

-- | The default single-view style.
ViewBackgroundStyle :: [ViewBackground] -> ViewConfig

-- | Should the view be clipped?
ViewClip :: Bool -> ViewConfig

-- | The default width of single views when the visualization has a
--   continuous x field.
ViewContinuousWidth :: Double -> ViewConfig

-- | The default height of single views when the visualization has a
--   continuous y field.
ViewContinuousHeight :: Double -> ViewConfig

-- | The radius, in pixels, of rounded rectangle corners.
--   
--   The default is <tt>0</tt>.
ViewCornerRadius :: Double -> ViewConfig

-- | The default cursor for single views.
ViewCursor :: Cursor -> ViewConfig

-- | The default width of single views when the visualization has a
--   discrete x field.
ViewDiscreteWidth :: Double -> ViewConfig

-- | The default height of single views when the visualization has a
--   discrete y field.
ViewDiscreteHeight :: Double -> ViewConfig

-- | The fill color. See also <a>ViewNoFill</a>.
--   
--   This was changed to use the <tt>Color</tt> type alias in version
--   <tt>0.5.0.0</tt> and removed the <tt>Maybe</tt> type in version
--   <tt>0.6.0.0</tt>.
ViewFill :: Color -> ViewConfig

-- | Do not use a fill. See also <a>ViewFill</a>.
ViewNoFill :: ViewConfig

-- | The fill opacity.
ViewFillOpacity :: Opacity -> ViewConfig

-- | The overall opacity.
--   
--   The default is <tt>0.7</tt> for non-aggregate plots with <a>Point</a>,
--   <a>Tick</a>, <a>Circle</a>, or <a>Square</a> marks or layered
--   <a>Bar</a> charts, and <tt>1</tt> otherwise.
ViewOpacity :: Opacity -> ViewConfig

-- | Default step size for discrete fields.
--   
--   This replaces <tt>SCRangeStep</tt> and <tt>SCTextXRangeStep</tt> from
--   <a>ScaleConfig</a>.
ViewStep :: Double -> ViewConfig

-- | The stroke color. See also <a>ViewNoStroke</a>.
--   
--   This was changed to use the <tt>Color</tt> type alias in version
--   <tt>0.5.0.0</tt> and removed the <tt>Maybe</tt> type in version
--   <tt>0.6.0.0</tt>.
ViewStroke :: Color -> ViewConfig

-- | Do not use a stroke color. See also <a>ViewStroke</a>.
ViewNoStroke :: ViewConfig

-- | The stroke cap for line-ending style.
ViewStrokeCap :: StrokeCap -> ViewConfig

-- | The stroke dash pattern.
ViewStrokeDash :: DashStyle -> ViewConfig

-- | The offset for the dash pattern.
ViewStrokeDashOffset :: DashOffset -> ViewConfig

-- | The stroke line-join method.
ViewStrokeJoin :: StrokeJoin -> ViewConfig

-- | The miter limit at which to bevel a line join.
ViewStrokeMiterLimit :: Double -> ViewConfig

-- | The stroke opacity.
ViewStrokeOpacity :: Opacity -> ViewConfig

-- | The stroke width, in pixels.
ViewStrokeWidth :: Double -> ViewConfig

-- | As of version <tt>0.5.0.0</tt> this is deprecated and
--   <a>ViewContinuousWidth</a> should be used instead.

-- | <i>Deprecated: Please change ViewWidth to ViewContinuousWidth</i>
ViewWidth :: Double -> ViewConfig

-- | As of version <tt>0.5.0.0</tt> this is deprecated and
--   <a>ViewContinuousHeight</a> should be used instead.

-- | <i>Deprecated: Please change ViewHeight to ViewContinuousHeight</i>
ViewHeight :: Double -> ViewConfig

-- | Indicates the anchor position for text.
data APosition

-- | The start of the text.
AStart :: APosition

-- | The middle of the text.
AMiddle :: APosition

-- | The end of the text.
AEnd :: APosition

-- | Indicates the style in which field names are displayed.
data FieldTitleProperty

-- | Creates "Sum of field", "Year of date", "field (binned)", etc.
Verbal :: FieldTitleProperty

-- | Creates "SUM(field)", "YEAR(date)", "BIN(field)", etc.
Function :: FieldTitleProperty

-- | Just use the field name without any extra text.
Plain :: FieldTitleProperty

-- | Configuration options for composition views, used with
--   <a>ConcatStyle</a>, <a>FacetStyle</a>, and <a>RepeatStyle</a>.
--   
--   Prior to <tt>0.6.0.0</tt> this information was made available in two
--   types - <tt>ConcatConfig</tt> and <tt>FacetConfig</tt> - which had the
--   same meaning.
data CompositionConfig

-- | The number of columns to use. The default is to use a single row (an
--   infinite number of columns).
--   
--   Prior to <tt>0.6.0.0</tt> this was either <tt>ConcatColumns</tt> or
--   <tt>FColumns</tt>.
CompColumns :: Int -> CompositionConfig

-- | The spacing in pixels between sub-views. The default is 20.
--   
--   Prior to <tt>0.6.0.0</tt> this was either <tt>ConcatSpacing</tt> or
--   <tt>FSpacing</tt>.
CompSpacing :: Double -> CompositionConfig

-- | A single data value. This is used when a function or constructor can
--   accept values of different types (e.g. either a number or a string),
--   such as: <a>dataRow</a>, <a>geometry</a>, many constructors of the
--   <a>Filter</a> type, <a>ImNewValue</a>, and <a>SInit</a>.
data DataValue
Boolean :: Bool -> DataValue
DateTime :: [DateTime] -> DataValue
Number :: Double -> DataValue
Str :: Text -> DataValue

-- | Create a JavaScript <tt>null</tt> value. This can be useful when
--   explictly recoding a value as undefined, such as in the following
--   example:
--   
--   <pre>
--   <a>dataFromRows</a> []
--     . <a>dataRow</a> [("x", <a>Number</a> 1), ("y", <a>Str</a> "good")]
--     . <a>dataRow</a> [("x", <a>Number</a> 2), ("y", <a>NullValue</a>)]
--     . <a>dataRow</a> [("x", <a>Number</a> 3), ("y", <a>String</a> "bad")]
--   
--   </pre>
--   
--   For more-complex data sources - such as lists of defined and
--   un-specified values, it is suggested that <a>dataFromJson</a> be used
--   rather than <a>dataFromRows</a> or <a>dataFromColumns</a>.
NullValue :: DataValue

-- | A list of data values. This is used when a function or constructor can
--   accept lists of different types (e.g. either a list of numbers or a
--   list of strings), such as: <a>dataColumn</a>, <a>CustomSort</a>,
--   <a>FOneOf</a>, or <a>ImKeyVals</a>.
--   
--   If your data contains undefined values then it is suggested that you
--   convert it to JSON (e.g. <a>Value</a>) and then use
--   <a>dataFromJson</a>.
data DataValues
Booleans :: [Bool] -> DataValues
DateTimes :: [[DateTime]] -> DataValues
Numbers :: [Double] -> DataValues
Strings :: [Text] -> DataValues

-- | Allows a date or time to be represented. This is typically part of a
--   list of <tt>DateTime</tt> items to provide a specific point in time.
--   For details see the <a>Vega-Lite documentation</a>.
--   
--   There is <b>no check</b> that the provided <tt>Int</tt> values lie
--   within the required bounds.
--   
--   A <a>DateTime</a> value of <a>DTDay</a> or <a>DTDayNum</a> should not
--   be combined with <a>DTYear</a>, <a>DTQuarter</a>, <a>DTMonth</a>,
--   <a>DTMonthNum</a>, or <a>DTDate</a>.
data DateTime
DTYear :: Int -> DateTime

-- | The quarter of the year (1 to 4, inclusive).
DTQuarter :: Int -> DateTime
DTMonth :: MonthName -> DateTime

-- | The month number (1 to 12, inclusive).
DTMonthNum :: Int -> DateTime

-- | The week number. Each week begins on Sunday, which means that days
--   before the first Sunday of the year are considered to be in week 0, as
--   the first Sunday of the year is the start of week 1.
DTWeek :: Int -> DateTime
DTDay :: DayName -> DateTime

-- | The day number (1 represents Monday, 7 is Sunday).
DTDayNum :: Int -> DateTime

-- | The day of the year (1 to 366).
DTDayOfYear :: Int -> DateTime

-- | Day of the month (1 to 31, inclusive).
DTDate :: Int -> DateTime

-- | Hour of the day, where 0 is midnight, 1 is 1am, and 23 is 11pm.
DTHours :: Int -> DateTime

-- | The minute of an hour (0 to 59, inclusive).
DTMinutes :: Int -> DateTime

-- | The second of a minute (0 to 59, inclusive).
DTSeconds :: Int -> DateTime

-- | The milliseconds of a second (0 to 999, inclusive).
DTMilliseconds :: Int -> DateTime

-- | Identifies a month of the year.
data MonthName
Jan :: MonthName
Feb :: MonthName
Mar :: MonthName
Apr :: MonthName
May :: MonthName
Jun :: MonthName
Jul :: MonthName
Aug :: MonthName
Sep :: MonthName
Oct :: MonthName
Nov :: MonthName
Dec :: MonthName

-- | Identifies the day of the week.
data DayName
Mon :: DayName
Tue :: DayName
Wed :: DayName
Thu :: DayName
Fri :: DayName
Sat :: DayName
Sun :: DayName

-- | Describes a unit of time. Useful for encoding and transformations. See
--   the <a>Vega-Lite documentation</a> for further details.
--   
--   <pre>
--   <a>encoding</a>
--       . <a>position</a> <a>X</a> [ <a>PName</a> "date", <a>PmType</a> <a>Temporal</a>, <a>PTimeUnit</a> (<a>Utc</a> <a>YearMonthDateHours</a>) ]
--   </pre>
--   
--   Prior to version <tt>0.10.0.0</tt> the field was a combination of what
--   is now <a>BaseTimeUnit</a> and the "option" fields (e.g. encode as UTC
--   or the maximum nuber of bins).
data TimeUnit

-- | Encode a time as local time.
TU :: BaseTimeUnit -> TimeUnit

-- | Encode a time as UTC (coordinated universal time, independent of local
--   time zones or daylight saving).
Utc :: BaseTimeUnit -> TimeUnit

-- | The maximum number of bins to use when discretising time values. This
--   can be useful as an algternative to explicitly providing the time unit
--   to bin by, as it will be inferred from the temporal extent and the
--   number of bins. As an example, <tt>[TUMaxBins 366]</tt> will bin by
--   day when applied to a dataset of hourly readings for a full year.
TUMaxBins :: Natural -> TimeUnit

-- | The number of steps between time-unit bins, in terms of the
--   least-significant unit provided. So <tt>TUStep 14 YearMonthDate</tt>
--   will bin temporal data into bi-weekly groups.
TUStep :: Double -> BaseTimeUnit -> TimeUnit

-- | The number of steps between time-unit bins, in terms of the
--   least-significant unit provided for UTC times. So <tt>UtcStep 14
--   YearMonthDate]</tt> will bin temporal data into bi-weekly groups.
UtcStep :: Double -> BaseTimeUnit -> TimeUnit

-- | Define the time unit, either as a base unit - such as <a>Hours</a> -
--   or as a composite type, for example <a>WeeksDayHours</a>.
data BaseTimeUnit

-- | Year.
Year :: BaseTimeUnit

-- | Quarter of the year.
Quarter :: BaseTimeUnit

-- | Month of the year.
Month :: BaseTimeUnit

-- | Sunday-based week number. Days before the first Sunday of the year are
--   considered to be in week 0, and the first Sunday of the year is the
--   start of week 1,
Week :: BaseTimeUnit

-- | Day of the month (1 to 31).
Date :: BaseTimeUnit

-- | Day of the week.
Day :: BaseTimeUnit

-- | Day of the year (starting at 1).
DayOfYear :: BaseTimeUnit

-- | Hour of the day.
Hours :: BaseTimeUnit

-- | Minutes of the hour.
Minutes :: BaseTimeUnit

-- | Seconds of the minute.
Seconds :: BaseTimeUnit

-- | Milliseconds.
Milliseconds :: BaseTimeUnit

-- | Year and quarter.
YearQuarter :: BaseTimeUnit

-- | Year, quarter, and month.
YearQuarterMonth :: BaseTimeUnit

-- | Year and month.
YearMonth :: BaseTimeUnit

-- | Year, month, and day of month.
YearMonthDate :: BaseTimeUnit

-- | Year, month, day of month, and hour of day.
YearMonthDateHours :: BaseTimeUnit

-- | Year, month, day of month, hour of day, and minutes.
YearMonthDateHoursMinutes :: BaseTimeUnit

-- | Year, month, day of month, hour of day, minutes, and seconds.
YearMonthDateHoursMinutesSeconds :: BaseTimeUnit

-- | Year and week.
YearWeek :: BaseTimeUnit

-- | Year, week, and day.
YearWeekDay :: BaseTimeUnit

-- | Year, week, day, and hour of day.
YearWeekDayHours :: BaseTimeUnit

-- | Year, week, day, hour of day, and minutes.
YearWeekDayHoursMinutes :: BaseTimeUnit

-- | Year, week, day, hour of day, minutes, and seconds.
YearWeekDayHoursMinutesSeconds :: BaseTimeUnit

-- | Year and day of year.
YearDayOfYear :: BaseTimeUnit

-- | Quarter of the year and month.
QuarterMonth :: BaseTimeUnit

-- | Month of the year and day of the month.
MonthDate :: BaseTimeUnit

-- | Month, day of the month, and hours.
MonthDateHours :: BaseTimeUnit

-- | Month, day of the month, hours, and minutes.
MonthDateHoursMinutes :: BaseTimeUnit

-- | Month, day of the month, hours, minutes, and seconds.
MonthDateHoursMinutesSeconds :: BaseTimeUnit

-- | Week and day of month.
WeekDay :: BaseTimeUnit

-- | Week, day of month, and hours.
WeeksDayHours :: BaseTimeUnit

-- | Week, day of month, hours, and minutes.
WeeksDayHoursMinutes :: BaseTimeUnit

-- | Week, day of month, hours, minutes, and seconds.
WeeksDayHoursMinutesSeconds :: BaseTimeUnit

-- | Day of the week and hours.
DayHours :: BaseTimeUnit

-- | Day of the week, hours, and minutes.
DayHoursMinutes :: BaseTimeUnit

-- | Day of the week, hours, minutes, and seconds.
DayHoursMinutesSeconds :: BaseTimeUnit

-- | Hour of the day and minutes.
HoursMinutes :: BaseTimeUnit

-- | Hour of the day, minutes, and seconds.
HoursMinutesSeconds :: BaseTimeUnit

-- | Minutes of the hour and seconds.
MinutesSeconds :: BaseTimeUnit

-- | Seconds of the minute and milliseconds.
SecondsMilliseconds :: BaseTimeUnit


-- | This tutorial is inspired by - in that it starts off as a close copy
--   of - the <a>Elm Vega-Lite walkthrough</a> created by Jo Wood, and
--   converted as necessary for the differences between <tt>hvega</tt> and
--   <a>elm-vegalite</a>. The Elm tutorial is based on the talk given by
--   <a>Wongsuphasawat et al at the 2017 Open Vis Conf</a>.
--   
--   The tutorial targets version 4 of the Vega-Lite specification and the
--   functionality provided in version <tt>0.11.0.0</tt> of hvega (although
--   a number of examples could be simplified by removing the now-optional
--   type information as of Vega-Lite 4.14).
module Graphics.Vega.Tutorials.VegaLite

-- | We could encode one of the numeric data fields as a strip plot where
--   the horizontal position of a tick mark is determined by the value of
--   the data item. In this case I am going to pick the "<tt>plx</tt>"
--   column:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   <a>toVegaLite</a>
--       [ <a>dataFromUrl</a> "https://raw.githubusercontent.com/DougBurke/hvega/master/hvega/data/gaia-aa-616-a10-table1a.no-header.tsv" [<a>TSV</a>]
--       , <a>mark</a> <a>Tick</a> []
--       , <a>encoding</a> (<a>position</a> <a>X</a> [ <a>PName</a> "plx", <a>PmType</a> <a>Quantitative</a> ] [])
--       ]
--   </pre>
--   
--   Notice how there is <b>no explicit definition</b> of the axis details,
--   color choice or size. These can be customised, as shown in examples
--   below, but the default values are designed to follow good practice in
--   visualization design.
--   
--   Three grammar elements are represented by the three functions
--   <a>dataFromUrl</a>, <a>mark</a>, and <a>encoding</a>.
--   
--   The <a>encoding</a> function takes as a single parameter, a list of
--   specifications that are themselves generated by other functions. In
--   this case we use the function <a>position</a> to provide an encoding
--   of the <tt>"plx"</tt> field as the x-position in our plot. The precise
--   way in which the data value (parallax) is mapped to the x-position
--   will depend on the type of data we are encoding. We can provide a hint
--   by delcaring the measurement type of the data field, here
--   <a>Quantitative</a> indicating a numeric measurement type. The final
--   parameter of position is a list of any additional encodings in our
--   specification. Here, with only one encoding, we provide an empty list.
--   
--   As we build up more complex visualizations we will use many more
--   encodings. To keep the coding clear, the idiomatic way to do this with
--   hvega is to chain encoding functions using point-free style. The
--   example above coded in this way would be
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "plx", PmType Quantitative ]
--   
--   in toVegaLite
--       [ dataFromUrl "https://raw.githubusercontent.com/DougBurke/hvega/master/hvega/data/gaia-aa-616-a10-table1a.no-header.tsv" [TSV]
--       , mark Tick []
--       , enc []
--       ]
--   </pre>
stripPlot :: VegaLite

-- | The <a>configure</a> function allows a large number of configuration
--   options to be configured, each one introduced by the
--   <a>configuration</a> function. Here I set the color to be a light gray
--   (actually a very-transparent black; the <a>Color</a> type describes
--   the various supported color specifications, but it is generally safe
--   to assume that if you can use it in HTML then you can use it here).
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "plx", PmType Quantitative ]
--   
--       conf = <a>configure</a>
--                . <a>configuration</a> (<a>BackgroundStyle</a> "rgba(0, 0, 0, 0.1)")
--   
--   in toVegaLite
--       [ dataFromUrl "https://raw.githubusercontent.com/DougBurke/hvega/master/hvega/data/gaia-aa-616-a10-table1a.no-header.tsv" [TSV]
--       , mark Tick []
--       , enc []
--       , conf []
--       ]
--   </pre>
--   
--   If you want a transparent background (as was the default with
--   Vega-Lite 3 and earlier), you would use
--   
--   <pre>
--   <a>configuration</a> (<a>BackgroundStyle</a> "rgba(0, 0, 0, 0)")
--   </pre>
stripPlotWithBackground :: VegaLite

-- | There is nothing that forces us to use the x axis, so let's try a
--   vertical strip plot. To do so requires changing only <b>one</b>
--   character in the specifiction, that is the first argument to
--   <a>position</a> is now <a>Y</a> rather than <a>X</a>:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position <a>Y</a> [ PName "plx", PmType Quantitative ]
--   
--   in toVegaLite
--       [ dataFromUrl "https://raw.githubusercontent.com/DougBurke/hvega/master/hvega/data/gaia-aa-616-a10-table1a.no-header.tsv" [TSV]
--       , mark Tick []
--       , enc []
--       ]
--   </pre>
stripPlotY :: VegaLite

-- | Since we are going to be using the same data source, let's define it
--   here:
--   
--   <pre>
--   gaiaData =
--     let addFormat n = (n, <a>FoNumber</a>)
--         cols = [ "RA_ICRS", "DE_ICRS", "Gmag", "plx", "e_plx" ]
--         opts = [ <a>Parse</a> (map addFormat cols) ]
--   
--     in dataFromUrl "https://raw.githubusercontent.com/DougBurke/hvega/master/hvega/data/gaia-aa-616-a10-table1a.no-header.tsv" opts
--   </pre>
--   
--   The list argument to <a>dataFromUrl</a> allows for some customisation
--   of the input data. Previously I used <tt>[<a>TSV</a>]</tt> to specify
--   the data is in tab-separated format, but it isn't actually needed here
--   (since the file name ends in ".tsv"). However, I have now explicitly
--   defined how to parse the numeric columns using <a>Parse</a>: this is
--   because the columns are read in as strings for this file by default,
--   which actually doesn't cause any problems in most cases, but did cause
--   me significant problems at one point during the development of the
--   tutorial! There is limited to no feedback from the visualizer for
--   cases like this (perhaps I should have used the Javascript console),
--   and I only realised the problem thanks to the <tt>Data Viewer</tt> tab
--   in the <a>Vega Editor</a> (after a <a>suggestion from a
--   colleague</a>).
--   
--   Data can also be defined algorithmically - using <a>dataSequence</a>
--   and <a>dataSequenceAs</a> - or inline - with <a>dataFromColumns</a> or
--   <a>dataFromRows</a> - or directly from JSON (as a <a>Value</a>) using
--   <a>dataFromJson</a>.
--   
--   Examples showing <a>dataFromColumns</a> are the <a>pieChart</a>
--   and<a>skyPlotWithGraticules</a> plots, but let's not peak ahead!
gaiaData :: Data

-- | One question would be how the parallaxes vary by cluster: as parallax
--   is measuring distance, then are the clusters similar distances away
--   from us, or is there a range of values? A first look is to use another
--   "channel" to represent (i.e. encode) the cluster:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "plx", PmType Quantitative, <a>PAxis</a> [ <a>AxTitle</a> "Parallax (mas)" ] ]
--               . <a>color</a> [ <a>MName</a> "Cluster", MmType <a>Nominal</a> ]
--   
--   in toVegaLite
--       [ gaiaData
--       , mark Tick []
--       , enc []
--       ]
--   </pre>
--   
--   Now each tick mark is colored by the cluster, and a legend is
--   automatically added to indicate this mapping. Fortunately the number
--   of clusters in the sample is small enough to make this readable! The
--   <a>color</a> function has added this mapping, just by giving the
--   column to use (with <a>MName</a>) and its type (<a>MmType</a>). The
--   constructors generally begin with <tt>P</tt> for position and
--   <tt>M</tt> for mark, and as we'll see there are other property types
--   such as facet and text.
--   
--   Vega-Lite supports several data types, represented by the
--   <a>Measurement</a> type. We have already seen <a>Quantitative</a>,
--   which is used for numeric data, and here we use <a>Nominal</a> for the
--   clusters, since they have no obvious ordering.
--   
--   The labelling for the X axis has been tweaked using <a>PAxis</a>, in
--   this case the default value for the label (the column name) has been
--   over-ridden by an explicit value.
stripPlotWithColor :: VegaLite

-- | As of Vega-Lite version 4.14 we can now drop the type information when
--   it can be inferred. I am a little hazy of the rules, so I am going to
--   include the information (as it also means I don't have to change the
--   existing code!). However, as an example, we don't need to add the
--   <tt>MmType Nominal</tt> setting to the <a>color</a> channel, since the
--   following creates the same visualization as <a>stripPlotWithColor</a>:
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "plx", PmType Quantitative, <a>PTitle</a> "Parallax (mas)" ]
--               . <a>color</a> [ <a>MName</a> "Cluster" ]
--   
--   in toVegaLite
--       [ gaiaData
--       , mark Tick []
--       , enc []
--       ]
--   </pre>
--   
--   Note that as well as removing <tt>MmType Nominal</tt> from the
--   <a>color</a> encoding, I have switched to the <a>PTitle</a> option
--   (which is the same as <tt>PAxis [AxTitle ...]</tt>.
stripPlotWithColor2 :: VegaLite

-- | 
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "plx", PmType Quantitative, PAxis [ AxTitle "Parallax (mas)" ] ]
--               . color [ MName "Cluster", MmType <a>Ordinal</a> ]
--   
--   in toVegaLite
--       [ gaiaData
--       , mark Tick []
--       , enc []
--       ]
--   </pre>
--   
--   As can be seen, the choice of color scale has changed to one more
--   appropriate for an ordered set of values.
stripPlotWithColorOrdinal :: VegaLite

-- | In this example we embed the data for the pie chart - namely the
--   number of stars per cluster - in the vsualization itself (using
--   <a>dataFromColumns</a> to create column data labelled "cluster" and
--   "count"). The <a>position</a> encoding is set to <a>Theta</a>, which
--   is given the star counts, and the <a>color</a> is set to the Cluster
--   name.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let manualData = <a>dataFromColumns</a> []
--                    . <a>dataColumn</a> "cluster" (<a>Strings</a> clusters)
--                    . dataColumn "count" (<a>Numbers</a> counts)
--                    $ []
--   
--       clusters = [ "alpha Per", "Blanco 1", "Coma Ber", "Hyades", "IC 2391"
--                  , "IC 2602", "NGC 2451", "Pleiades", "Praesepe"]
--       counts = [ 740, 489, 153, 515, 325, 492, 400, 1326, 938]
--   
--       enc = encoding
--             . position <a>Theta</a> [PName "count", PmType Quantitative]
--             . color [MName "cluster", MmType Nominal]
--   
--   in toVegaLite
--      [ manualData
--      , mark <a>Arc</a> []
--      , enc []
--      ]
--   </pre>
pieChart :: VegaLite

-- | There are three main changes to <a>pieChart</a>:
--   
--   <ul>
--   <li><a>MInnerRadius</a> is used to impose a minimum radius on the pie
--   slices (so leaving a hole in the center);</li>
--   <li>the <a>ViewStyle</a> configuration is used to turn off the plot
--   edge;</li>
--   <li>and the count value is calculated automatically by the
--   <a>PAggregate</a> method (summing over the "Cluster" column), rather
--   than having a hand-generated table of values encoded in the
--   visualization.</li>
--   </ul>
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--             . position Theta [<a>PAggregate</a> <a>Count</a>, PmType Quantitative]
--             . color [MName <a>Cluster</a>, MmType Nominal]
--   
--   in toVegaLite
--      [ gaiaData
--      , mark Arc [<a>MInnerRadius</a> 20]
--      , enc []
--      , configure (configuration (<a>ViewStyle</a> [<a>ViewNoStroke</a>]) [])
--      ]
--   </pre>
pieChartWithCounting :: VegaLite

-- | The <a>stripPlotWithColor</a> visualization can be changed to show two
--   variables just by adding a second <a>position</a> declaration, which
--   shows that the 7 milli-arcsecond range is rather crowded:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "plx", PmType Quantitative, PAxis [ AxTitle "Parallax (mas)" ] ]
--               . position Y [ PName "Cluster", PmType Nominal ]
--               . color [ MName "Cluster", MmType Nominal ]
--   
--   in toVegaLite
--       [ gaiaData
--       , mark Tick []
--       , enc []
--       ]
--   </pre>
--   
--   I have left the color-encoding in, as it makes it easier to compare to
--   <a>stripPlotWithColor</a>, even though it replicates the information
--   provided by the position of the mark on the Y axis. The
--   <a>yHistogram</a> example below shows how the legend can be removed
--   from a visualization.
parallaxBreakdown :: VegaLite

-- | Since sensible (hopefully) defaults are provided for unspecified
--   settings, it is relatively easy to write generic representations of a
--   particular visualization. The following function expands upon the
--   previous specifications by:
--   
--   <ul>
--   <li>taking a field name, rather than hard coding it;</li>
--   <li>the use of <tt><a>PBin</a> []</tt> to ask for the x-axis values to
--   be binned;</li>
--   <li>the addition of a second axis (<a>Y</a>) which is used for the
--   aggregated value (<a>Count</a>, which means that no column has to be
--   specified with <tt>PName</tt>);</li>
--   <li>and the change from <a>Tick</a> to <a>Bar</a> for the
--   <a>mark</a>.</li>
--   </ul>
--   
--   Note that we did not have to specify how we wanted the histogram
--   calculation to proceed - e.g. the number of bins, the bin widths, or
--   edges - although we could have added this, by using a non-empty list
--   of <a>BinProperty</a> values with <a>PBin</a>, if the defaults are not
--   sufficient.
--   
--   <pre>
--   simpleHistogram :: T.Text -&gt; VegaLite
--   simpleHistogram field =
--     let enc = encoding
--                 . position X [ PName field, PmType Quantitative, <a>PBin</a> [] ]
--                 . position Y [ PAggregate Count, PmType Quantitative ]
--   
--     in toVegaLite
--          [ gaiaData
--          , mark <a>Bar</a> []
--          , enc []
--          ]
--   </pre>
simpleHistogram :: Text -> VegaLite

-- | With <a>simpleHistogram</a> it becomes easy to get a histogram of the
--   parallax values:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   parallaxHistogram = <a>simpleHistogram</a> "plx"
--   </pre>
--   
--   We can see that although parallaxes around 20 to 25 milli-arcseconds
--   dominated the earlier visualizations, such as
--   <a>stripPlotWithColor</a>, <b>most</b> of the stars have a
--   much-smalled parallax, with values in the range 5 to 10.
parallaxHistogram :: VegaLite

-- | A different column (or field) of the input data can be viewed, just by
--   changing the name in the specification:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   gmagHistogram = simpleHistogram "Gmag"
--   </pre>
--   
--   Here we can see that the number of stars with a given magnitude rises
--   up until a value of around 18, and then drops off.
gmagHistogram :: VegaLite

-- | 
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "plx", PmType Quantitative, PBin [], PAxis [ AxTitle "Parallax (mas)" ] ]
--               . position Y [ PAggregate Count, PmType Quantitative, <a>PScale</a> [ <a>SType</a> <a>ScLog</a> ] ]
--   
--   in toVegaLite
--      [ gaiaData
--      , mark Bar [ <a>MFill</a> "orange", <a>MStroke</a> "gray" ]
--      , enc []
--      , <a>height</a> 300
--      , <a>title</a> "Gaia Parallaxes" []
--      ]
--   </pre>
--   
--   There are four new changes to the visualization created by
--   <a>simpleHistogram</a> (since <a>PAxis</a> has been used above):
--   
--   <ol>
--   <li>an explicit choice of scaling for the Y channel (using
--   <a>PScale</a>);</li>
--   <li>the fill (<a>MFill</a>) and edge (<a>MStroke</a>) colors of the
--   histogram bars are different;</li>
--   <li>the height of the overall visualization has been increased;</li>
--   <li>and a title has been added.</li>
--   </ol>
--   
--   If you view this in the Vega Editor you will see the following
--   warning:
--   
--   <pre>
--   A log scale is used to encode bar's y. This can be misleading as the height of the bar can be arbitrary based on the scale domain. You may want to use point mark instead.
--   </pre>
ylogHistogram :: VegaLite

-- | A color encoding can also be added. When used with the <a>Tick</a>
--   mark - <a>stripPlotWithColor</a> - the result was that each tick mark
--   was colored by the "Cluster" field, but for the <a>Bar</a> mark the
--   result is that the bars are stacked together. I have also taken the
--   opportunity to widen the plot (<a>width</a>); define the binning
--   scheme used, with <tt><a>Step</a> 1</tt>; and configure the location
--   of the x axis tick marks, using <a>AxValues</a>.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "Gmag", PmType Quantitative, binning, axis ]
--               . position Y [ PAggregate Count, PmType Quantitative ]
--               . color [ MName "Cluster", MmType Nominal ]
--   
--       binning = PBin [ <a>Step</a> 1 ]
--       axis = PAxis [ <a>AxValues</a> (Numbers [ 0, 5 .. 20 ]) ]
--   
--   in toVegaLite
--      [ gaiaData
--      , mark Bar []
--      , enc []
--      , height 300
--      , <a>width</a> 400
--      ]
--   </pre>
--   
--   Note that <tt>hvega</tt> will allow you to combine a <a>color</a>
--   encoding with a <a>ScLog</a> scale, even though a Vega-Lite viewer
--   will not display the resulting Vega-Lite specification, saying
--   
--   <pre>
--   Cannot stack non-linear scale (log)
--   </pre>
gmagHistogramWithColor :: VegaLite

-- | Notice how we never needed to state explicitly that we wished our bars
--   to be stacked. This was reasoned directly by Vega-Lite based on the
--   combination of bar marks and color channel encoding. If we were to
--   change just the mark function from <a>Bar</a> to <a>Line</a>,
--   Vega-Lite produces an unstacked series of lines, which makes sense
--   because unlike bars, lines do not occlude one another to the same
--   extent.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "Gmag", PmType Quantitative, binning, axis ]
--               . position Y [ PAggregate Count, PmType Quantitative ]
--               . color [ MName "Cluster", MmType Nominal ]
--   
--       binning = PBin [ Step 1 ]
--       axis = PAxis [ AxValues (Numbers [ 0, 5 .. 20 ]) ]
--   
--   in toVegaLite
--      [ gaiaData
--      , mark <a>Line</a> []
--      , enc []
--      , height 300
--      , width 400
--      ]
--   </pre>
gmagLineWithColor :: VegaLite

-- | The aim for this visualization is to show the spread in the
--   <tt>Gmag</tt> field for each cluster, so we now swap the axis on which
--   the aggregate is being applied (so that the cluster names appear on
--   the y axis), and hide the legend that is applied (using
--   <tt><a>MLegend</a> []</tt>) since we can read off the color mapping
--   from the y axis.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "Gmag", PmType Quantitative, PAggregate <a>Stdev</a> ]
--               . position Y [ PName "Cluster", PmType Nominal ]
--               . color [ MName "Cluster", MmType Nominal, <a>MLegend</a> [] ]
--   
--   in toVegaLite
--      [ gaiaData
--      , mark Bar [ <a>MOpacity</a> 0.6 ]
--      , enc []
--      ]
--   </pre>
--   
--   The bar opacity is reduced slightly with 'MOpacity 0.6' so that the
--   x-axis grid lines are visible. An alternative would be to change the
--   <a>AxZIndex</a> value for the <a>X</a> encoding so that it is drawn on
--   top of the bars.
yHistogram :: VegaLite

-- | Aggregation can happen in the position channel - as we've seen with
--   the <a>PAggregate</a> option - or as a <a>transform</a>, where we
--   create new data to replace or augment the existing data. In the
--   following example I use the <a>aggregate</a> transform to calculate
--   the number of rows in the original dataset per cluster with the
--   <a>Count</a> operation. This effectively replaces the data, and
--   creates a new one with the fields <tt>"Cluster"</tt> and
--   <tt>"count"</tt>.
--   
--   The other two major new items in this visualization are that the X
--   axis has been ordered to match the Y axis (using <a>ByChannel</a> and
--   <a>PSort</a> in the <a>position</a> encoding), and I have specified my
--   own SVG definition for the symbols with <a>SymPath</a> and
--   <a>MShape</a>.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let trans = <a>transform</a>
--               . <a>aggregate</a> [ <a>opAs</a> <a>Count</a> "" "count" ]
--                           [ "Cluster" ]
--   
--       enc = encoding
--             . position X [ PName "Cluster"
--                          , PmType Nominal
--                          , <a>PSort</a> [ <a>ByChannel</a> <a>ChY</a> ]
--                          ]
--             . position Y [ PName "count"
--                          , PmType Quantitative
--                          , PAxis [ AxTitle "Number of stars" ]
--                          ]
--   
--       star = <a>SymPath</a> "M 0,-1 L 0.23,-0.23 L 1,-0.23 L 0.38,0.21 L 0.62,0.94 L 0,0.49 L -0.62,0.94 L -0.38,0.21 L -1,-0.23 L -0.23,-0.23 L 0,-1 z"
--   
--   in toVegaLite [ gaiaData
--                 , trans []
--                 , enc []
--                 , mark <a>Point</a> [ <a>MShape</a> star
--                              , MStroke "black"
--                              , <a>MStrokeWidth</a> 1
--                              , MFill "yellow"
--                              , <a>MSize</a> 100
--                              ]
--                 ]
--   </pre>
--   
--   Notes:
--   
--   <ul>
--   <li>the star design is based on a <a>Wikipedia design</a>, after some
--   hacking and downsizing (such as losing the cute eyes);</li>
--   <li>when using <a>Count</a> with <a>opAs</a>, the first
--   <a>FieldName</a> argument is ignored, so I set it to the empty string
--   <tt>""</tt> (it's be great if the API were such we didn't have to
--   write dummy arguments, but at present <tt>hvega</tt> doesn't provide
--   this level of safety);</li>
--   <li>although the order of operations of <a>transform</a> is important,
--   here I only have one (the <a>aggregate</a> call);</li>
--   <li>and the order of the arguments to <a>toVegaLite</a> does not
--   matter (so you can have the <a>transform</a> appear before
--   <a>encoding</a> or after it).</li>
--   </ul>
starCount :: VegaLite

-- | I've shown that the number of stars per cluster increases when ordered
--   by increasing count of the number of stars per cluster, which is
--   perhaps not the most informative visualization. How about if I ask if
--   there's a correlation between number of stars and distance to the
--   cluster (under the assumption that objects further away can be harder
--   to detect, so there <i>might</i> be some form of correlation)?
--   
--   To do this, I tweak <a>starCount</a> so that we also calculate the
--   parallax to each cluster in the <a>transform</a> - in this case taking
--   the median value of the distribution thanks to the <a>Median</a>
--   operation - and then using this new field to order the X axis with
--   <a>ByFieldOp</a>. Since parallax is inversely correlated with distance
--   we use the <a>Descending</a> option to ensure the clusters are drawn
--   from near to far. We can see that there is no obvious relation with
--   distance.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let trans = transform
--               . aggregate [ opAs Count "" "count"
--                           , opAs <a>Median</a> "plx" "plx_med"
--                           ]
--                           [ "Cluster" ]
--   
--       enc = encoding
--             . position X [ PName "Cluster"
--                          , PSort [ <a>ByFieldOp</a> "plx_med" <a>Max</a>
--                                  , <a>Descending</a>
--                                  ]
--                          ]
--             . position Y [ PName "count"
--                          , PmType Quantitative
--                          , PAxis [ AxTitle "Number of stars" ]
--                          ]
--   
--       star = SymPath "M 0,-1 L 0.23,-0.23 L 1,-0.23 L 0.38,0.21 L 0.62,0.94 L 0,0.49 L -0.62,0.94 L -0.38,0.21 L -1,-0.23 L -0.23,-0.23 L 0,-1 z"
--   
--   in toVegaLite [ gaiaData
--                 , trans []
--                 , enc []
--                 , mark Point [ MShape star
--                              , MStroke "black"
--                              , MStrokeWidth 1
--                              , MFill "yellow"
--                              , MSize 100
--                              ]
--                 ]
--   </pre>
--   
--   Notes:
--   
--   <ul>
--   <li>I find the "Data Viewer" section of the <a>Vega Editor</a> rather
--   useful when creating new data columns or structures, as you can
--   actually see what has been created (I find Firefox works much better
--   than Chrome here);</li>
--   <li>the use of <a>ByFieldOp</a> here is a bit un-settling, as you need
--   to give it an aggregation-style operation to apply to the data field,
--   but in this case we have already done this with <a>opAs</a> (so I pick
--   <a>Max</a> as we just need something that copies the value over).</li>
--   </ul>
--   
--   We revisit this data in <a>layeredCount</a>.
starCount2 :: VegaLite

-- | Vega-Lite supports a number of data transformations, including several
--   "pre-canned" transformations, such as a kernel-density estimator,
--   which I will use here to look for structure in the parallax
--   distribution. The earlier use of a fixed-bin histogram -
--   <a>parallaxHistogram</a> and <a>ylogHistogram</a> - showed a peak
--   around 5 to 10 milli-arcseconds, and a secondary one around 20 to 25
--   milli-arcseconds, but can we infer anything more from the data?
--   
--   I have already shown that the <a>transform</a> function works in a
--   similar manner to <a>encoding</a>, in that it is applied to one or
--   more transformations. In this example I use the <a>density</a>
--   transform - which is <b>new to Vega Lite 4</b> - to "smooth" the data
--   without having to pre-judge the data (although there are options to
--   configure the density estimation). The transform creates new fields -
--   called "value" and "density" by default - which can then be displayed
--   as any other field. In this case I switch from <a>Bar</a> or
--   <a>Line</a> to use the <a>Area</a> encoding, which fills in the area
--   from the value down to the axis.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let trans = transform
--               . <a>density</a> "plx" []
--   
--       enc = encoding
--             . position X [ PName "value"
--                          , PmType Quantitative
--                          , PAxis [ AxTitle "parallax" ]
--                          ]
--             . position Y [ PName "density", PmType Quantitative ]
--   
--   in toVegaLite
--        [ gaiaData
--        , mark <a>Area</a> [ MOpacity 0.7
--                    , MStroke "black"
--                    , <a>MStrokeDash</a> [ 2, 4 ]
--                    , ]
--        , trans []
--        , enc []
--        ]
--   </pre>
--   
--   The parallax distribution shows multiple peaks within the 5 to 10
--   milli-arcsecond range, and separate peaks at 12 and 22
--   milli-arcseconds.
--   
--   The properties of the area mark are set here to add a black, dashed
--   line around the edge of the area. The <a>DashStyle</a> configures the
--   pattern by giving the lengths, in pixels, of the "on" and "off"
--   segments, so here the gaps are twice the length of the line segments.
--   This was done more to show that it can be done, rather than because it
--   aids this particular visualization!
densityParallax :: VegaLite

-- | The density estimation can be configured using <a>DensityProperty</a>.
--   Here we explicitly label the new fields to create (rather than use the
--   defaults), and ensure the calculation is done per cluster. This means
--   that the data range for each cluster is used to perform the KDE, which
--   in this case is useful (as it ensures the highest fidelity), but there
--   are times when you may wish to ensure a consistent scale for the
--   evaluation (in which case you'd use the <a>DnExtent</a> option, as
--   well as possibly <a>DnSteps</a>, to define the grid). The final change
--   is to switch from density estimation to counts for the dependent axis.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let trans = transform
--               . density "plx" [ <a>DnAs</a> "xkde" "ykde"
--                               , <a>DnGroupBy</a> [ "Cluster" ]
--                               , <a>DnCounts</a> True
--                               ]
--   
--       enc = encoding
--             . position X [ PName "xkde"
--                          , PmType Quantitative
--                          , PAxis [ AxTitle "Parallax" ]
--                          ]
--             . position Y [ PName "ykde"
--                          , PmType Quantitative
--                          , PAxis [ AxTitle "Counts" ]
--                          ]
--             . color [ MName "Cluster"
--                     , MmType Nominal
--                     ]
--   
--   in toVegaLite
--        [ gaiaData
--        , mark Area [ MOpacity 0.7 ]
--        , trans []
--        , enc []
--        ]
--   </pre>
--   
--   Note how the clusters separate out in pretty cleanly, but - as also
--   shown in the <a>pointPlot</a> visualization below - it is pretty busy
--   around 7 milli arcseconds.
--   
--   The counts here (the Y axis) are <b>significantly larger</b> than seen
--   than the actual count of stars, shown in <a>starCount</a>. It appears
--   that the <tt><a>DnCounts</a> True</tt> option is interpreted as
--   <a>multiplying the density values by the number of values in a
--   group</a>, which means that there is a bin-width effect. This is
--   explored further in the <a>compareCounts</a> plot below.
densityParallaxGrouped :: VegaLite

-- | Here I use the <a>Point</a> mark to display the individual <tt>Gmag,
--   plx</tt> pairs, encoding by <b>both</b> <a>color</a> and 'shape. Since
--   the encoding uses the same field of the data (the <tt>Cluster</tt>
--   name), Vega-Lite is smart enough to only display one legend, which
--   contains the point shape and color used for each cluster.
--   
--   Since the parallax values are bunched together at low values, a
--   logarithmic scale (<a>ScLog</a>) is used for the y axis, along with
--   commands to define the actual axis domain - by turning off the
--   <a>IsNice</a> support and listing the minimum and maximum values for
--   the axis with <a>SDomain</a>.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--                       . position X [ PName "Gmag", PmType Quantitative ]
--                       . position Y [ PName "plx", PmType Quantitative, PScale scaleOpts ]
--                       . color cluster
--                       . shape cluster
--   
--       scaleOpts = [ SType ScLog, <a>SDomain</a> (<a>DNumbers</a> [3.5, 32]), <a>SNice</a> (<a>IsNice</a> False) ]
--       cluster = [ MName "Cluster", MmType Nominal ]
--   , 
--   in toVegaLite [ gaiaData
--                 , mark Point []
--                 , enc []
--                 , width 400
--                 , height 400
--                 ]
--   </pre>
--   
--   We can see that each cluster appears to have a separate parallax value
--   (something we have seen in earlier plots, such as
--   <a>parallaxBreakdown</a>), and that it doesn't really vary with Gmag.
--   What this is telling us is that for these star clusters, the distance
--   to each member star is similar, and that they are generally at
--   different distances from us. However, it's a bit hard to tell exactly
--   what is going on around 5 to 6 milli arcseconds, as the clusters
--   overlap here.
--   
--   This line of thinking leads us nicely to map making, but before we try
--   some cartography, I wanted to briefly provide some context for these
--   plots. The <a>parallax of a star</a> is a measure of its distance from
--   us, but it is an inverse relationship, so that nearer stars have a
--   larger parallax than those further from us. The <tt>Gmag</tt> column
--   measures the apparent brightness of the star, with the <tt>G</tt> part
--   indicating what <a>part of the spectrum</a> is used (for Gaia, the
--   <tt>G</tt> band is pretty broad, covering much of the visible
--   spectrum), and the <tt>mag</tt> part is because optical Astronomy
--   tends to use
--   
--   <ul>
--   <li><a>the logarithm of the measured flux</a></li>
--   <li>and then subtract this from a constant</li>
--   </ul>
--   
--   so that larger values mean fainter sources. These are also <a>apparent
--   magnitues</a>, so that they measure the flux of the star as measured
--   at Earth, rather than its intrinsic luminosity (often defined as an
--   object's <a>absolute magnitude</a>).
--   
--   We can see that the further the cluster is from us - that is, as we
--   move down this graph to smaller parallax values - then the smallest
--   stellar magnitude we can see in a cluster tends to increase, but that
--   there are stars up to the maximum value (20) in each cluster. This
--   information can be used to look at the distribution of absolute
--   magnitudes of stars in a cluster, which tells us about its
--   evolutionary state - such as is it newly formed or old - amongst other
--   things. However, this is straying far from the aim of this tutorial,
--   so lets get back to plotting things.
pointPlot :: VegaLite

-- | The following specification should only contain one new feature -
--   other than sneakily switching from <a>Point</a> to <a>Circle</a> type
--   for the mark - and that is displaying the x axis (namely Right
--   Ascension) in reverse (using <tt><a>PSort</a> [ <a>Descending</a>
--   ]</tt>. This is needed because Right Ascension is measured from right
--   to left. I like to explain it by talking about oranges, and how we are
--   at the center of an orange looking out at its skin, and so have the
--   direction reversed to if you were outside, looking in. This may be why
--   I don't get invited to too many parties. You can see that we also have
--   one cluster that straddles the 0 and 360 degrees Right Ascension
--   meridian, which will lead to some fun later (<a>clusterCenters</a>).
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X (axOpts "RA_ICRS" "Right Ascension (deg)" ++ [ raScale, <a>PSort</a> [ <a>Descending</a> ] ])
--               . position Y (axOpts "DE_ICRS" "Declination (deg)" ++ [ decScale ])
--               . color [ MName "Cluster", MmType Nominal ]
--   
--       axOpts field lbl = [ PName field, PmType Quantitative, PAxis [ AxTitle lbl ]]
--   
--       scaleOpts minVal maxVal = [ SDomain (DNumbers [ minVal, maxVal ]), SNice (IsNice False) ]
--       raScale = PScale (scaleOpts 0 360)
--       decScale = PScale (scaleOpts (-90) 90)
--   
--   in toVegaLite [ gaiaData
--                 , mark <a>Circle</a> []
--                 , enc []
--                 , width 400
--                 , height 300
--                 ]
--   </pre>
--   
--   We can see that these clusters are indeed localised on the sky, with
--   <a>Hyades</a> looking like it covers the largest area. However, we
--   should be careful and <b>not forget</b> either <a>Grover's hard
--   work</a> or <a>Father Ted's explanation to Father Dougal</a>, since
--   these clusters are different distances from us, which makes size a
--   tricky thing to measure from this plot.
--   
--   There is also the fact that I have used possibly the worst way of
--   displaying the Right Ascension and Declination data. Although the
--   night sky is not the same as the Earth's surface, the issues when
--   trying to display the Globe on a flat surface also apply to displaying
--   up the sky. For this plot the distortions near the pole are huge,
--   although fortunately we don't have any clusters too close to either
--   pole.
posPlot :: VegaLite

-- | Vega-Lite supports a large number of projections - via the
--   <a>Projection</a> type - which we use below to create a similar
--   visualization to <a>posPlot</a>. Here I use the <a>Longitude</a> and
--   <a>Latitude</a> channels, along with a <a>Mercator</a>
--   <a>projection</a>, to display the data.
--   
--   The trick in this case is that longitude runs from -180 to 180
--   degrees, but the data has Right Ascension going from 0 to 360 degrees.
--   Here we take advantage of Vega Lite's <b>data transformation</b>
--   capabilities and create a new column - which I call <tt>longitude</tt>
--   - and is defined as "Right Ascension - 360" when the Right Ascension
--   is greater than 180, otherwise it is just set to the Right Ascension
--   value. The "expression" support is essentially a sub-set of
--   Javascript, and the <tt>datum</tt> object refers to the current row.
--   The new data column can then be used with the <a>Longitude</a>
--   channel. Thankfully the <a>Latitude</a> channel can use the
--   Declination values without any conversion.
--   
--   As can be seen, this flips the orientation compared to <a>posPlot</a>,
--   and makes the center of the plot have a longiture (or Right
--   Ascension), of 0 degrees.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let trans = transform
--                   . <a>calculateAs</a>
--                     "datum.RA_ICRS &gt; 180 ? datum.RA_ICRS - 360 : datum.RA_ICRS"
--                     "longitude"
--   
--       axOpts field = [ PName field, PmType Quantitative ]
--   
--       enc = encoding
--               . position <a>Longitude</a> (axOpts "longitude")
--               . position <a>Latitude</a> (axOpts "DE_ICRS")
--               . color [ MName "plx"
--                       , MmType Quantitative
--                       , <a>MScale</a> [ SType ScLog
--                                , <a>SScheme</a> "viridis" []
--                                ]
--                       , MLegend [ <a>LTitle</a> "parallax" ]
--                       ]
--               . <a>tooltip</a> [ <a>TName</a> "Cluster", <a>TmType</a> Nominal ]
--   
--   in toVegaLite [ width 400
--                 , height 350
--                 , <a>projection</a> [ <a>PrType</a> <a>Mercator</a> ]
--                 , gaiaData
--                 , trans []
--                 , enc []
--                 , mark Circle []
--                 ]
--   </pre>
--   
--   The other major change made to <a>posPlot</a> is that the stars are
--   now color-encoded by the log of their parallax value rather than
--   cluster membership, and the color scheme has been changed to use the
--   "viridis" color scale. The <a>LTitle</a> option is set for the legend
--   (on the <a>color</a> channel) rather than use the default (which in
--   this case would be <tt>"plx"</tt>).
--   
--   Since parallax is a numeric value, with ordering (i.e.
--   <a>Quantitative</a>), the legend has changed from a list of symbols to
--   a gradient bar. To account for this lost of information, I have added
--   a <a>tooltip</a> encoding so that when the pointer is moved over a
--   star its cluster name will be displayed. This is, unfortunately,
--   <i>only</i> visible in the interactive version of the visualization.
--   
--   <b>Note that</b> the tooltip behavior changed in Vega Lite 4 (or in
--   the code used to display the visualizations around this time), since
--   prior to this tooltips were on by default. Now tooltips have to be
--   explicitly enabled (with <a>tooltip</a> or <a>tooltips</a>).
--   
--   From this visualization we can see that the apparent size of the
--   cluster (if we approximate each cluster as a circle, then we can think
--   of the radius of the circle as a measure of size) depends on parallax,
--   with larger sizes having larger parallaxes. This is because the
--   distance to a star is inversely-dependent on its parallax, so larger
--   parallaxes mean the star is closer to us. However, there is no reason
--   that the intrinsic size - that is its actual radius - of each cluster
--   is the same. We can see that although the Hyades and Pleiades clusters
--   overlap on the sky, they have significantly-different parallaxes (as
--   can be seen in <a>pointPlot</a> for example), with Hyades being the
--   closer of the two.
--   
--   It is possible to add graticules - with the aptly-named
--   <a>graticule</a> function - but this requires the use of layers, which
--   we haven't covered yet. If you are impatient you can jump right to
--   <a>skyPlotWithGraticules</a>!
--   
--   If you want to see how to "create your own projection", see
--   <a>skyPlotAitoff</a>, which uses the <a>Aitoff projection</a> (which
--   is unfortunately not available to Vega-Lite directly).
skyPlot :: VegaLite

-- | Our first choropleth is based on the <a>Choropleth</a> example from
--   the Vega-Lite <a>Example Gallery</a>.
--   
--   The key elements are:
--   
--   <ul>
--   <li>Using the <a>TopojsonFeature</a> feature for the data source
--   (thanks to <tt>usGeoData</tt>).</li>
--   <li>Choosing the correct "feature" name in the geographic data, here
--   <tt>"counties"</tt> in the argument to our <tt>usGeoData</tt> helper
--   function.</li>
--   <li>Performing a Vega-Lite lookup to join the data to be plotted (the
--   unemployment rate) to the geographic data. In this case, the column
--   name in the unemployment data - <tt>"id"</tt> given as the first
--   argument to <a>lookup</a> - is the same as the column name in the
--   geographic data, the third argument to <a>lookup</a>. Those can be
--   different.</li>
--   <li>Specifying a projection, that is a mapping from (longitude,
--   latitude) to (x,y) coordinates. Since we are looking at data for the
--   main-land United States of America we use <a>AlbersUsa</a> (rather
--   than looking at the whole globe, as we did in earlier visualizations),
--   which lets us view the continental USA as well as Alaska and
--   Hawaii.</li>
--   <li>Using the <a>Geoshape</a> mark.</li>
--   </ul>
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let unemploymentData = dataFromUrl "https://raw.githubusercontent.com/vega/vega/master/docs/data/unemployment.tsv" []
--   
--   in toVegaLite
--      [ usGeoData "counties"
--      , transform
--        . <a>lookup</a> "id" unemploymentData "id" (<a>LuFields</a> ["rate"])
--        $ []
--      , projection [PrType <a>AlbersUsa</a>]
--      , encoding
--        . color [ MName "rate", MmType Quantitative, MScale [ SScheme "purpleorange" [] ] ]
--        $ []
--      , mark Geoshape []
--      , width 500
--      , height 300
--      , <a>background</a> "azure"
--      ]
--   </pre>
--   
--   So, we have seen how to join data between two datasets - thanks to
--   <a>lookup</a> - and display the unemployment rate (from one data
--   source) on a map (defined from another data source).
--   
--   I have chosen a <a>diverging color scheme</a> for the rate, mainly
--   just because I can, but also because I wanted to see how the areas
--   with high rates were clustered. I've also shown how the
--   <a>background</a> function can be used (it is simpler than the
--   <a>configuration</a> approach used earlier in
--   <a>stripPlotWithBackground</a>).
--   
--   Our next choropleth - <a>choroplethLookupFromGeo</a> - will show how
--   we can join multiple fields across data sources, but this requires
--   understanding how Vega-Lite handles multiple views, which is
--   fortunately next in our tutorial.
choroplethLookupToGeo :: VegaLite

-- | Our first attempt is with the <a>column</a> function, which tells
--   Vega-Lite to create a plot for each <tt>Cluster</tt> field (and
--   introduces us to the <tt>F</tt> family of <a>FacetChannel</a>
--   constructors).
--   
--   The legend has been turned off with <tt><a>MLegend</a> []</tt>, since
--   it doesn't add anything to this visulization (as the individual plots,
--   labelled by the cluster name, provide the same information).
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "Gmag", PmType Quantitative, PBin [] ]
--               . position Y yAxis
--               . color [ MName "Cluster", MmType Nominal, MLegend [] ]
--               . <a>column</a> [ <a>FName</a> "Cluster", <a>FmType</a> Nominal ]
--   
--       yAxis = [ PAggregate Count
--               , PmType Quantitative
--               , PAxis [ AxTitle "Number of Stars" ]
--               ]
--   
--   in toVegaLite
--        [ gaiaData
--        , mark Bar []
--        , enc []
--        ]
--   </pre>
--   
--   Since we have nine clusters in the sample, the overall visualization
--   is too wide, unless you have a very-large monitor. Can we do better?
smallMultiples :: VegaLite

-- | The number of columns used in small-multiple can be defined using the
--   <a>columns</a> function. However, this requires us to:
--   
--   <ul>
--   <li>move the facet definition out from the encoding and into the
--   top-level, with the <a>facetFlow</a> function;</li>
--   <li>and define the plot as a separate specification, and apply it with
--   <a>specification</a> and <a>asSpec</a>.</li>
--   </ul>
--   
--   The actual syntactic changes to <a>smallMultiples</a> are actually
--   fairly minor:
--   
--   <pre>
--   let enc = encoding
--               . position X [ PName "Gmag", PmType Quantitative, PBin [] ]
--               . position Y yAxis
--               . color [ MName "Cluster", MmType Nominal, MLegend [] ]
--   
--       yAxis = [ PAggregate Count
--               , PmType Quantitative
--               , PAxis [ AxTitle "Number of Stars" ]
--               ]
--   
--   in toVegaLite
--        [ gaiaData
--        , <a>columns</a> 4
--        , <a>facetFlow</a> [ FName "Cluster", FmType Nominal ]
--        , <a>specification</a> (<a>asSpec</a> [ mark Bar [], enc [] ])
--        ]
--   </pre>
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   Note that Vega Lite does support a <tt>"facet"</tt> field in its
--   encodings, but hvega follows Elm VegaLite and requires you to use this
--   <a>wrapped facet</a> approach.
--   
--   I chose 4 columns rather than 3 here to show how "empty" plots are
--   encoded. You can see how a 3-column version looks in the next plot,
--   <a>densityMultiples</a>.
smallMultiples2 :: VegaLite

-- | Earlier - in <a>densityParallaxGrouped</a> - I used the Kernel-Density
--   Estimation support in Vega Lite 4 to show smoothed parallax
--   distributions, grouped by cluster. We can combine this with the
--   <a>facetFlow</a> approach to generate a plot per cluster of the
--   parallax distribution. I have used <a>DnExtent</a> to ensure that the
--   density estimation is done on the same grid for each cluster.
--   
--   The most important thing in this example is that I have used a
--   sensible number of columns (ending up in a three by three grid)! The
--   other significant changes to <a>smallMultiples2</a> is that I have
--   used the <a>FHeader</a> option to control how the facet headers are
--   displayed: the title (which in this case was <tt>"Cluster"</tt>) has
--   been hidden, and the per-plot labels made larger, but moved down so
--   that they lie within each plot. I am not 100% convinced this is an
--   intended use of <a>HLabelPadding</a>, but it seems to work!
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let trans = transform
--               . density "plx" [ DnAs "xkde" "ykde"
--                               , DnGroupBy [ "Cluster" ]
--                               , <a>DnExtent</a> 0 30
--                               ]
--   
--       enc = encoding
--             . position X [ PName "xkde"
--                          , PmType Quantitative
--                          , PAxis [ AxTitle "Parallax" ]
--                          ]
--             . position Y [ PName "ykde"
--                          , PmType Quantitative
--                          , PAxis [ AxTitle "Density" ]
--                          ]
--             . color [ MName "Cluster"
--                     , MmType Nominal
--                     , MLegend []
--                     ]
--   
--       headerOpts = [ <a>HLabelFontSize</a> 16
--                    , <a>HLabelAlign</a> <a>AlignRight</a>
--                    , <a>HLabelAnchor</a> <a>AEnd</a>
--                    , <a>HLabelPadding</a> (-24)
--                    , <a>HNoTitle</a>
--                    ]
--   
--       spec = asSpec [ enc []
--                     , trans []
--                     , mark Area [ ]
--                     ]
--   
--   in toVegaLite
--        [ gaiaData
--        , columns 3
--        , facetFlow [ FName "Cluster"
--                    , FmType Nominal
--                    , <a>FHeader</a> headerOpts
--                    ]
--        , specification spec
--        ]
--   </pre>
densityMultiples :: VegaLite

-- | We start with a "basic" plot for the dataset: the median value of the
--   parallax of the stars in each cluster.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let plx = position Y [ PName "plx", PmType Quantitative, PAggregate Median ]
--       cluster = position X [ PName "Cluster", PmType Nominal ]
--       enc = encoding . cluster . plx
--   
--   in toVegaLite
--         [ gaiaData
--         , mark Bar []
--         , enc []
--         ]
--   </pre>
basePlot :: VegaLite

-- | We start our exploration by combining two visualizations, layering one
--   on top of the other. The base plot shows the same data as
--   <a>basePlot</a>, and then on top we will show a horizontal line that
--   indicates the median parallax for all the stars in the sample.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let plx = position Y [ PName "plx", PmType Quantitative, PAggregate Median ]
--       cluster = position X [ PName "Cluster", PmType Nominal ]
--   
--       perCluster = [ mark Bar [], encoding (cluster []) ]
--       allClusters = [ mark <a>Rule</a> [] ]
--   
--   in toVegaLite
--         [ gaiaData
--         , encoding (plx [])
--         , <a>layer</a> (map <a>asSpec</a> [perCluster, allClusters])
--         ]
--   </pre>
--   
--   For this visualization, the specification starts with the data source
--   and an encoding, but <b>only</b> for the y axis (which means that all
--   layered plots use the same encoding for the axis). The <a>layer</a>
--   function introduces the different visualizations that will be
--   combined, each as there own "specification" (hence the need to apply
--   <a>asSpec</a> to both <tt>perCluster</tt> and <tt>allClusters</tt>).
--   Note that there is no x-axis encoding for the <a>Rule</a>, since the
--   data applies to all clusters (i.e. it should span the whole
--   visualization).
layeredPlot :: VegaLite

-- | This example is similar to <a>layeredPlot</a> but includes an x-axis
--   encoding for the second layer. We use this to show the range of the
--   data - so the minimum to maximum parallax range of each cluster - with
--   the <a>Rule</a> type. The difference to the previous plot is that an
--   extra positional encoding is added (<a>Y2</a>) to define the end point
--   of each line (<a>Y</a> is used as the start point).
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let plx op = position Y [ PName "plx", PmType Quantitative, PAggregate op ]
--       cluster = position X [ PName "Cluster", PmType Nominal ]
--   
--       median = [ mark Circle [ <a>MSize</a> 20 ]
--                , encoding (plx Median [])
--                ]
--       range = [ mark Rule [ ]
--               , encoding
--                   . plx <a>Min</a>
--                   . position <a>Y2</a> [ PName "plx", PAggregate <a>Max</a> ]
--                   $ []
--               ]
--   
--   in toVegaLite
--         [ gaiaData
--         , encoding (cluster [])
--         , layer (map asSpec [ median, range ])
--         , width 300
--         , height 300
--         ]
--   </pre>
--   
--   The <a>MSize</a> option is used to change the size of the circles so
--   that they do not drown out the lines (the size value indicates the
--   area of the mark, and so for circles the radius is proportional to the
--   square root of this size value; in practical terms I adjusted the
--   value until I got something that looked sensible).
--   
--   Note that the y axis is automatically labelled with the different
--   operation types that were applied - median, minimum, and maximum -
--   although there is no indication of what marks map to these operations.
layeredDiversion :: VegaLite

-- | In this example (adapted from an example provided by Jo Wood) I
--   display the same data as in <a>starCount</a>, but as two layers: the
--   first is a histogram (using the <a>Bar</a> mark), and the second
--   displays the count value as a label with the <a>Text</a> mark.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let trans = transform
--               . aggregate [ opAs Count "" "count" ]
--                           [ "Cluster" ]
--   
--       chanSort = [ ByChannel ChY, Descending ]
--   
--       baseEnc = encoding
--                 . position X [ PName "Cluster"
--                              , PmType Nominal
--                              , PSort chanSort
--                              , PAxis []
--                              ]
--                 . position Y [ PName "count"
--                              , PmType Quantitative
--                              , PAxis []
--                              ]
--   
--       barEnc = baseEnc
--                . color [ MName "Cluster"
--                        , MmType Nominal
--                        , MLegend [ <a>LStrokeColor</a> "gray"
--                                  , <a>LPadding</a> 10
--                                  ]
--                        , MSort chanSort
--                        ]
--   
--       labelEnc = baseEnc
--                  . <a>text</a> [ TName "count", TmType Quantitative ]
--   
--       barSpec = asSpec [ barEnc [], mark Bar [] ]
--       labelSpec = asSpec [ labelEnc [], mark <a>Text</a> [ <a>MdY</a> (-6) ] ]
--   
--       cfg = configure
--             . configuration (ViewStyle [ViewNoStroke])
--   
--   in toVegaLite [ width 300
--                 , height 250
--                 , cfg []
--                 , gaiaData
--                 , title "Number of stars per cluster" [ TFontSize 18 ]
--                 , trans []
--                 , layer [ barSpec, labelSpec ]
--                 ]
--   </pre>
--   
--   Both axes have been dropped from this visualization since the cluster
--   name can be found from the legend and the count is included in the
--   plot. The same sort order is used for the X axis and the color
--   mapping, so that its easy to compare (the first item in the legend is
--   the cluster with the most counts). Note that this changes the color
--   mapping (cluster to color) compared to previous plots such as
--   <a>parallaxBreakdown</a>.
layeredCount :: VegaLite

-- | As promised earlier (in <a>skyPlot</a>), now that we have layers, we
--   can add graticules to a projection. In this case I create two
--   graticule layers, the "base" layer (<tt>grats</tt>), which creates the
--   grey lines that cover the map - using a spacing of 60 degrees (4
--   hours) for longitude and 15 degrees for latitude - and then an extra
--   layer (<tt>grats0</tt>), which shows blue lines at longitude
--   seprations of 180 degrees and latitude spacings of 90 degrees. In this
--   case the central horizontal and vertical lines represent 0 degrees,
--   and the one at the left shows -180 degrees. There are no latitude
--   lines for -90 or +90 since the default is to stop at ±85 degrees (see
--   <a>GrExtent</a> for a way to change this).
--   
--   I added the second graticule layer to see if I could get by without
--   labels for the grid lines, but decided this did not work out too well,
--   so ended with two layers, one each for the Right Ascension and
--   Declination values, using <a>dataFromColumns</a> to manually create
--   the label positions and label content to display with the <a>Text</a>
--   mark.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let trans = transform
--                   . calculateAs
--                     "datum.RA_ICRS &gt; 180 ? datum.RA_ICRS - 360 : datum.RA_ICRS"
--                     "longitude"
--   
--       axOpts field = [ PName field, PmType Quantitative ]
--   
--       enc = encoding
--               . position Longitude (axOpts "longitude")
--               . position Latitude (axOpts "DE_ICRS")
--               . color [ MName "plx"
--                       , MmType Quantitative
--                       , MScale [ SType ScLog
--                                , SScheme "viridis" []
--                                ]
--                       , MLegend [ LTitle "parallax" ]
--                       ]
--               . tooltip [ TName "Cluster", TmType Nominal ]
--   
--       stars = asSpec [ gaiaData, trans [], enc [], mark Circle [] ]
--       grats = asSpec [ <a>graticule</a> [ <a>GrStep</a> (60, 15) ]
--                      , mark <a>Geoshape</a> [ MStroke "grey"
--                                      , <a>MStrokeOpacity</a> 0.5
--                                      , <a>MStrokeWidth</a> 0.5
--                                      ]
--                      ]
--       grats0 = asSpec [ graticule [ GrStep (180, 90)
--                                   ]
--                       , mark Geoshape [ ]
--                       ]
--   
--       raData = dataFromColumns []
--                    . dataColumn "x" (Numbers [ -120, -60, 60, 120 ])
--                    . dataColumn "y" (Numbers [ 0, 0, 0, 0 ])
--                    . dataColumn "lbl" (Strings [ "16h", "20h", "4h", "8h" ])
--   
--       decData = dataFromColumns []
--                    . dataColumn "x" (Numbers [ 0, 0 ])
--                    . dataColumn "y" (Numbers [ -45, 45 ])
--                    . dataColumn "lbl" (Strings [ "-45", "45" ])
--   
--       encLabels = encoding
--                   . position Longitude (axOpts "x")
--                   . position Latitude (axOpts "y")
--                   . text [ TName "lbl", TmType Nominal ]
--   
--       raLabels = asSpec [ raData []
--                         , encLabels []
--                         , mark Text [ <a>MAlign</a> <a>AlignCenter</a>
--                                     , <a>MBaseline</a> <a>AlignTop</a>
--                                     , MdY 5
--                                     ]
--                         ]
--       decLabels = asSpec [ decData []
--                          , encLabels []
--                          , mark Text [ MAlign AlignRight
--                                      , MBaseline <a>AlignMiddle</a>
--                                      , <a>MdX</a> (-5)
--                                      ]
--                         ]
--   
--   in toVegaLite [ width 400
--                 , height 350
--                 , projection [ PrType Mercator ]
--                 , layer [ grats, grats0, stars, raLabels, decLabels ]
--                 ]
--   </pre>
--   
--   The layers are drawn in the order they are specified, which is why the
--   grid lines are drawn under the data (and labels).
--   
--   You can see the distortion in this particular projection (the
--   <a>Mercator projection</a>), as the spacing between the latitude lines
--   increases as you move towards the bottom and top of the plot. There
--   are a number of other projections you can chose from, such as the
--   <a>Orthographic</a> projection I use in <a>concatenatedSkyPlot</a>.
skyPlotWithGraticules :: VegaLite

-- | Instead of layering one view on top of another (superposition), we can
--   place them side by side in a row or column (juxtaposition). In
--   Vega-Lite this is referred to as <i>concatenation</i>:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc field = encoding
--                    . position X [ PName "Cluster", PmType Nominal ]
--                    . position Y [ PName field, PmType Quantitative, PAggregate Median ]
--   
--       parallaxes = [ mark Bar [], enc "plx" [] ]
--       magnitudes = [ mark Bar [], enc "Gmag" [] ]
--   
--       specs = map asSpec [ parallaxes, magnitudes ]
--   
--   in toVegaLite
--         [ gaiaData
--         , <a>vConcat</a> specs
--         ]
--   </pre>
--   
--   The <a>hConcat</a> function would align the two plots horizontally,
--   rather than vertically (and is used in <a>concatenatedSkyPlot</a>).
--   
--   Note that as the axes are identical apart from the field for the y
--   axis, the encoding has been moved into a function to enforce this
--   constraint (this ensures the x axis is the same, which makes it easier
--   to visually compare the two plots). However, there is no requirement
--   that the two plots be "compatible" (they could use different data
--   sources).
concatenatedPlot :: VegaLite

-- | The alignment of the plots can be adjusted with <a>spacing</a>, which
--   we use here to remove the vertical gap between the two plots (the
--   example is written so that we can see the only difference between the
--   two plot specifications is the addition of <tt><a>PAxis</a> []</tt> to
--   the parallax plot).
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc field flag = encoding
--                          . position X ([ PName "Cluster", PmType Nominal ] ++
--                                        if flag then [ PAxis [] ] else [])
--                          . position Y [ PName field, PmType Quantitative, PAggregate Median ]
--   
--       parallaxes = [ mark Bar [], enc "plx" True [] ]
--       magnitudes = [ mark Bar [], enc "Gmag" False [] ]
--   
--       specs = map asSpec [ parallaxes, magnitudes ]
--   
--   in toVegaLite
--         [ gaiaData
--         , <a>spacing</a> 0
--         , vConcat specs
--         ]
--   </pre>
--   
--   Even though we set <a>spacing</a> to <tt>0</tt> there is still a small
--   gap between the plots: this can be removed by using <tt><a>bounds</a>
--   <a>Flush</a></tt>, but we'll leave using that until the grand finale.
concatenatedPlot2 :: VegaLite

-- | In <a>skyPlotWithGraticules</a> I used the <a>Mercator</a> projection
--   to display the stars on the sky, but promised I would also show you
--   data using the <a>Orthographic projection</a>.
--   
--   The main specification (that is, the argument of <a>toVegaLite</a>)
--   starts with a change to the plot defaults, using <a>configure</a> to
--   ensure that no border is drawn around the plot (note that in
--   <a>combinedPlot</a> I do the same thing, but by setting the stroke
--   color to <tt>Just "transparent"</tt> rather than <tt>Nothing</tt>).
--   The default data stream is set up, to ensure we have "longitude" and
--   "DE_ICRS" values to display. It then has three versions of the same
--   visualization, varying only on rotation angle and label, stacked
--   horizontally with <a>hConcat</a>.
--   
--   Each plot - created with the <tt>rSpec</tt> helper function - defines
--   a plot size, uses the <a>Orthographic</a> projection with the given
--   rotation (the <tt>lambda</tt> term of <a>PrRotate</a>) to change the
--   center of the display, and then the plot itself is formed from four
--   layers:
--   
--   <ol>
--   <li><a>sphere</a> is used to indicate the area of the plot covered by
--   the sky (filled with a blue variant);</li>
--   <li>graticules are drawn at every 30 degrees (longitude, so 2 hours in
--   Right Ascension) and 15 degrees (latitude);</li>
--   <li>the stars are drawn using color to encode the parallax of the star
--   and the symbol shape the cluster membership (although the density of
--   points is such that it can be hard to make the shapes out);</li>
--   <li>and a label is added at the center of the plot to indicate the
--   Right Ascension (the label could be determined automatically from the
--   rotation angle, but it was easier to just specify it directly).</li>
--   </ol>
--   
--   Since the data values have two different encodings - <a>color</a> and
--   <a>shape</a> - there are two legends added. I place them in different
--   locations using <a>LOrient</a>: the parallax goes to the right of the
--   plots (which is the default) and the symbol shapes to the bottom. Both
--   use larger-than-default font sizes for the text (title and label).
--   
--   
--   <a>Open this visualization in the Vega Editor (although the link is
--   long, and may not work with Internet Explorer)</a>
--   
--   <pre>
--   let trans = transform
--                 . calculateAs
--                   "datum.RA_ICRS &gt; 180 ? datum.RA_ICRS - 360 : datum.RA_ICRS"
--                   "longitude"
--   
--       axOpts field = [ PName field, PmType Quantitative ]
--       legend ttl o = MLegend [ LTitle ttl
--                              , <a>LOrient</a> o
--                              , <a>LTitleFontSize</a> 16
--                              , <a>LLabelFontSize</a> 14
--                              ]
--       enc = encoding
--               . position Longitude (axOpts "longitude")
--               . position Latitude (axOpts "DE_ICRS")
--               . color [ MName "plx"
--                       , MmType Quantitative
--                       , MScale [ SType ScLog
--                                , SScheme "viridis" []
--                                ]
--                       , legend "parallax" <a>LORight</a>
--                       ]
--               . shape [ MName "Cluster"
--                       , MmType Nominal
--                       , legend "cluster" <a>LOBottom</a>
--                       ]
--               . tooltip [ TName "Cluster", TmType Nominal ]
--   
--       stars = asSpec [ enc [], mark Point [] ]
--       grats = asSpec [ graticule [ GrStepMinor (30, 15) ]
--                      , mark Geoshape [ MStroke "grey"
--                                      , MStrokeOpacity 0.5
--                                      , MStrokeWidth 0.5
--                                      ]
--                      ]
--   
--       lblData r h0 =
--         let r0 = -r
--             lbl = h0 &lt;&gt; "h"
--         in dataFromColumns []
--            . dataColumn "x" (Numbers [ r0 ])
--            . dataColumn "y" (Numbers [ 0 ])
--            . dataColumn "lbl" (Strings [ lbl ])
--   
--       encLabels = encoding
--                   . position Longitude (axOpts "x")
--                   . position Latitude (axOpts "y")
--                   . text [ TName "lbl", TmType Nominal ]
--       labels r h0 = asSpec [ lblData r h0 []
--                            , encLabels []
--                            , mark Text [ MAlign AlignCenter
--                                        , MBaseline AlignTop
--                                        , MdY 5
--                                        ]
--                            ]
--   
--       bg = asSpec [ <a>sphere</a>, mark Geoshape [ MFill "aliceblue" ] ]
--   
--       rSpec r h0 = asSpec [ width 300
--                           , height 300
--                           , projection [ PrType <a>Orthographic</a>
--                                        , <a>PrRotate</a> r 0 0
--                                        ]
--                           , layer [ bg, grats, stars, labels r h0 ]
--                           ]
--   
--       s1 = rSpec (-120) "8"
--       s2 = rSpec 0 "12"
--       s3 = rSpec 120 "4"
--   
--       setup = configure . configuration (ViewStyle [ ViewNoStroke ])
--   
--   in toVegaLite [ setup []
--                 , gaiaData
--                 , trans []
--                 , <a>hConcat</a> [ s1, s2, s3 ] ]
--   </pre>
concatenatedSkyPlot :: VegaLite

-- | The <a>concatenatedPlot</a> example can be extended to view the
--   distribution of several fields - in this case Right Ascension,
--   Declination, parallax, and magnitude:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--              . position X [ PName "Cluster", PmType Nominal ]
--              . position Y [ <a>PRepeat</a> <a>Row</a>, PmType Quantitative, PAggregate Median ]
--   
--       spec = asSpec [ gaiaData
--                     , mark Bar []
--                     , enc [] ]
--   
--       rows = [ "RA_ICRS", "DE_ICRS", "plx", "Gmag" ]
--   
--   in toVegaLite
--         [ <a>repeat</a> [ <a>RowFields</a> rows ]
--         , <a>specification</a> spec
--         ]
--   </pre>
--   
--   This more compact specification replaces the data field name (for
--   example <tt><a>PName</a> "plx"</tt>) with a reference to the repeating
--   field (<a>PRepeat</a>) either as a <a>Row</a> or <a>Column</a>
--   depending on the desired layout. We then compose the specifications by
--   providing a set of <a>RowFields</a> (or <a>ColumnFields</a>)
--   containing a list of the fields to which we wish to apply the
--   specification (identified with the function <a>specification</a> which
--   should follow the repeat function provided to toVegaLite).
repeatPlot :: VegaLite

-- | If we want to plot more than one map from the same table of data we
--   need to do the lookup in the other order, using lookup to add the
--   geographic data to the data table. Charting this way requires
--   specifiying a few things differently than in the previous choropleth
--   example (<a>choroplethLookupToGeo</a>):
--   
--   <ul>
--   <li>We're using <a>LuAs</a> in <a>lookup</a>, rather than
--   <a>LuFields</a>, which lets us use all the fields (columns) in the
--   source rather than a specified subset.</li>
--   <li>We use a different set of geographic features (state rather than
--   county outlines) from <tt>usGeoData</tt>.</li>
--   <li>The plot is defined as a <a>specification</a>, but does not
--   directly refer to the value being displayed. This is set "externally"
--   with the call to <a>repeat</a>. Since we have just had an example with
--   <a>RowFields</a>, this time we use <a>ColumnFields</a> to stack the
--   maps horizontally.</li>
--   <li>Since the different fields have vastly-different ranges (a maximum
--   of roughly 0.01 for "engineers" whereas the "population" field is a
--   billion times larger), the color scaling is set to vary per field with
--   <a>resolve</a>.</li>
--   </ul>
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let popEngHurrData = dataFromUrl "https://raw.githubusercontent.com/vega/vega/master/docs/data/population_engineers_hurricanes.csv" []
--   
--       plotWidth = 300
--   
--       viz = [ popEngHurrData
--             , width plotWidth
--             , transform
--               . lookup "id" (usGeoData "states") "id" (<a>LuAs</a> "geo")
--               $ []
--             , projection [PrType AlbersUsa]
--             , encoding
--               . shape [MName "geo", MmType GeoFeature]
--               . color [MRepeat <a>Column</a>, MmType Quantitative, MLegend [LOrient <a>LOTop</a>, <a>LGradientLength</a> plotWidth]]
--               $ []
--             , mark Geoshape [MStroke "black", MStrokeOpacity 0.2]
--             ]
--   
--   in toVegaLite
--      [ specification $ asSpec viz
--      , resolve
--        . resolution (RScale [(ChColor, Independent)])
--        $ []
--      , repeat [<a>ColumnFields</a> ["population", "engineers", "hurricanes"]]
--      ]
--   </pre>
--   
--   By moving the legend to the top of each visualization, I have taken
--   advantage of the fixed with (here 300 pixels) to ensure the color bar
--   uses the full width (with <a>LGradientLength</a>).
choroplethLookupFromGeo :: VegaLite

-- | We can combine repeated rows and columns to create a grid of views,
--   such as a scatterplot matrix, adding in color encoding to separate out
--   the clusters:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PRepeat Column, PmType Quantitative ]
--               . position Y [ PRepeat Row, PmType Quantitative ]
--               . color [ MName "Cluster", MmType Nominal ]
--   
--       spec = asSpec [ gaiaData
--                     , mark Point [ MSize 5 ]
--                     , enc [] ]
--   
--       fields = [ "RA_ICRS", "DE_ICRS", "plx", "Gmag" ]
--   
--   in toVegaLite
--         [ repeat [ RowFields fields, ColumnFields fields ]
--         , specification spec
--         ]
--   </pre>
--   
--   To be honest, this is not the best dataset to use here, as there is no
--   direct correlation between location (the <tt>RA_ICRS</tt> and
--   <tt>DE_ICRS</tt> fields) and the other columns, but it's the dataset I
--   chose, so we are stuck with it.
--   
--   Once you have sub-plots as a specification, you can combine them
--   horizontally and vertically to make a dashboard style visualization.
--   Interested parties should check out the <a>Building a Dashboard</a>
--   section of the Elm Vega-Lite Walkthrough for more details.
splomPlot :: VegaLite

-- | The next several plots show different types of selection - select a
--   single point, a range of plots, or follow the mouse - and all have the
--   same basic structure. To avoid repetition, and mistakes, I am going to
--   introduce a helper function which creates the plot structure but
--   without the selection definition, and then use that to build up the
--   plots.
--   
--   The helper function, <a>selectionProperties</a>, takes two arguments,
--   which are the selection name and the plot title. The selection name is
--   used to identify the selection, as a visualization can support
--   multiple selections, and the plot title has been added mainly to show
--   some minor customization (the use of <a>TOrient</a> to move the title
--   to the bottom).
--   
--   The definition of this helper function is:
--   
--   <pre>
--   selectionProps selName label =
--     let posOpts field = [ PName field
--                         , PmType Quantitative
--                         , PScale [ <a>SZero</a> False ]
--                         ]
--   
--         enc = encoding
--                  . position X (posOpts "Gmag")
--                  . position Y (posOpts "plx")
--   
--                  . color [ <a>MSelectionCondition</a> (<a>SelectionName</a> selName)
--                              [ MName "Cluster", MmType Nominal ]
--                              [ <a>MString</a> "grey" ]
--                          ]
--   
--                  . <a>opacity</a> [ MSelectionCondition (SelectionName selName)
--                               [ <a>MNumber</a> 1.0 ]
--                               [ MNumber 0.3 ]
--                            ]
--   
--                  . <a>size</a> [ MSelectionCondition (SelectionName selName)
--                               [ MNumber 40 ]
--                               [ MNumber 5 ]
--                            ]
--   
--         trans = transform
--                    . <a>filter</a> (<a>FExpr</a> "datum.DE_ICRS &lt; -20")
--   
--     in [ gaiaData
--        , trans []
--        , mark Point []
--        , enc []
--        , title label [ TOrient SBottom ]
--        ]
--   </pre>
--   
--   The three non-selection-related features added here are that
--   <a>SZero</a> is used to tell Vega Lite that we do not need 0 displayed
--   on either axis, which leads to a "tight" bounding box around the data,
--   a <a>filter</a> is used to select a subset of rows, namely only those
--   with a declination less than -20 (via <a>FExpr</a>), and the plot
--   title is moved to the bottom with <a>TOrient</a>.
--   
--   The main change is that the selection is used in the encoding section,
--   identified by name, using <a>SelectionName</a> and the supplied
--   argument. It is used as a filter for the encoding section, where
--   <a>MSelectionCondition</a> defines the properties to use when the
--   selection occurs (the first list of properties) and when it does not
--   (the second list). This is used for three different encodings:
--   
--   <ul>
--   <li><a>color</a>, where the selected star is labelled by its cluster
--   color, and all the other are grey;</li>
--   <li><a>opacity</a>, so that the selected star is fully opaque whereas
--   un-selected stars are partially transparent;</li>
--   <li>and <a>size</a>, so that the selected star is much bigger than the
--   others.</li>
--   </ul>
--   
--   When no selection has been made - such as when the visualization is
--   first created - then all points are encoded with the "selected" case
--   (so colorful, fully opaque, and large in this case).
selectionProperties :: Text -> Text -> [PropertySpec]

-- | The actual plot just requires the selection information to be defined
--   and then added to the plot properties:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let selLabel = "picked"
--       sel = <a>selection</a>
--               . <a>select</a> selLabel <a>Single</a> []
--   
--   in toVegaLite (sel [] : <a>selectionProperties</a> selLabel "Select a point")
--   </pre>
--   
--   The <a>selection</a> function is used to define the selection, via one
--   or more applications of the <a>select</a> function. The form of
--   <a>select</a> is that the selection is named, in this case we use
--   <tt>"picked"</tt>, and the type is given (a <a>Single</a> click), and
--   then options, which in our case there aren't any, so an empty list is
--   used.
--   
--   Note that <tt>hvega</tt> does not track the selection names, and will
--   allow you to use a name that you have not defined.
singleSelection :: VegaLite

-- | The only change here is to add a property to the selection - that is
--   <tt><a>Nearest</a> True</tt> - which means that the nearest point to
--   the click will be highlighted.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let selLabel = "picked"
--       sel = selection
--               . select selLabel Single [ <a>Nearest</a> True ]
--   
--   in toVegaLite (sel [] : selectionProperties selLabel "Select nearest point")
--   </pre>
--   
--   One consequence of this change is that once a point has been selected
--   you can not remove this (i.e. un-select the point). This is in
--   contrast to <a>singleSelection</a>, where clicking on an area with no
--   stars would remove the previous selection. The <a>Clear</a> property
--   can be added to the list to define a way to clear the selection.
nearestSelection :: VegaLite

-- | The selection can easily be changed to allow multiple stars to be
--   selected, using shift-click, by swapping from <a>Single</a> to
--   <a>Multi</a>.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let selLabel = "this is just a label"
--       sel = selection
--               . select selLabel <a>Multi</a> []
--   
--   in toVegaLite (sel [] : selectionProperties selLabel "Shift click to select points")
--   </pre>
multiSelection :: VegaLite

-- | We can take advantage of browser event by using <a>On</a> to define
--   which event to use, such as mouse movement over points:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let selLabel = "picked"
--       sel = selection
--               . select selLabel Multi [ <a>On</a> "mouseover" ]
--   
--   in toVegaLite (sel [] : selectionProperties selLabel "Move the pointer to select a point")
--   </pre>
--   
--   The supported list of events is described in the <a>Vega Event-Stream
--   Selectors</a> documentation.
--   
--   The addition of <tt>Nearest True</tt> to the list of properties sent
--   to <a>select</a> would avoid the flickering, as the mouse moves
--   between the stars.
eventSelection :: VegaLite

-- | The final <a>Selection</a> value is <a>Interval</a>, which lets you
--   drag a rectangle to select the interior points:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let selLabel = "naming is hard"
--       sel = selection
--               . select selLabel <a>Interval</a> [ ]
--   
--   in toVegaLite (sel [] : selectionProperties selLabel "Drag a rectangle to select points")
--   </pre>
intervalSelection :: VegaLite

-- | The default interval option is to select a rectangle, but it can be
--   restricted - such as to select all items within a range along a given
--   axis using <a>Encodings</a>:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let selLabel = "naming is still hard"
--       sel = selection
--               . select selLabel Interval [ <a>Encodings</a> [ <a>ChY</a> ] ]
--   
--   in toVegaLite (sel [] : selectionProperties selLabel "Drag to select points by parallax")
--   </pre>
--   
--   We'll come back to further things to do with interval selections when
--   we get to interactive plots below (see <a>bindScales</a>).
intervalSelectionY :: VegaLite

-- | For example, we can adjust the visualization to select all stars in
--   the same cluster, which is useful in this case since the Blanco1 and
--   IC2391 clusters occupy the same space in the magnitude-parallax plane.
--   
--   This is invoked simply by adding the <a>Fields</a> constructor to the
--   select parameters naming the fields onto which we wish to project our
--   selection. Additionally, we have set the default selection with
--   <a>Empty</a> so that if nothing is selected, the selection is empty
--   (as we have previously seen, without this the default selection is the
--   entire encoded dataset).
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let sel = selection
--               . select "pick" Single [ <a>Fields</a> [ "Cluster" ]
--                                      , <a>Empty</a>
--                                      , Nearest True
--                                      ]
--   
--   in toVegaLite (sel [] : selectionProperties "pick" "Select a point, select a cluster")
--   </pre>
transformSelection :: VegaLite

-- | New in Vega Lite 4 is the ability to interact with the legend via the
--   <a>BindLegend</a> option. In this case selecting on a cluster in the
--   legend will highlight that cluster in the visualization (but not vice
--   versa). Notice how the legend now also follows the
--   <a>MSelectionCondition</a> rules (that is, the unselected items in the
--   image below are also drawn in grey and are partially transparent).
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let sel = selection
--             . select "pick" Single [ <a>BindLegend</a>
--                                      (<a>BLField</a> "Cluster")
--                                    ]
--   
--   in toVegaLite (sel [] : selectionProperties "pick" "Select a legend item")
--   </pre>
legendSelection :: VegaLite

-- | The Elm Vega-Lite walkthrough uses a dataset which has a column for
--   which a range-slider makes sense. The dataset I'm using is less rich,
--   and so I am going to use a HTML select widget - a drop-down list of
--   values - instead. This lets the user select all stars from a given
--   cluster, and is introduced with the <a>Bind</a> and <a>ISelect</a>
--   constructors.
--   
--   The <a>InOptions</a> list is given the values of the Cluster column
--   that can be selected: I start with a value not in the list
--   (<tt>none</tt>) just to indicate that no values are selected, and then
--   the list of clusters in this sub-sample (remembering that
--   <a>selectionProperties</a> applies a declination cut off). Eagle-eyed
--   readers will note that the cluster names in this list (the
--   <tt>clusters</tt> variable) end in spaces: this is because the input
--   data file has the cluster names stored in an eight-character field,
--   even though it is a tab-separated file. This surprised me when I first
--   tried this visualization, and using the value "Blanco1" did not select
--   anything! Isn't working with data so much fun!
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let picked = "picked"
--   
--       clusters = [ "none", "Blanco1 ", "IC2391  ", "IC2602  ", "NGC2451 " ]
--       sel = selection
--               . select picked Single [ Fields [ "Cluster" ]
--                                      , <a>Bind</a> [ <a>ISelect</a> "Cluster" [ <a>InOptions</a> clusters ] ]
--                                      , Empty
--                                      ]
--   
--      conf = configure
--               . configuration (BackgroundStyle "beige")
--   
--   in toVegaLite (conf [] :
--                  sel [] :
--                  selectionProperties picked "Please select a cluster")
--   </pre>
--   
--   Originally this example had the selection working both ways - that is
--   the HTML widget can be used to select a cluster and clicking on a
--   point on the visualization updated the HTML widget. However, this
--   no-longer happens and I don't know whether it is a change in Vega-Lite
--   or I changed something in the visualization!
--   
--   Unlike the other plots shown in the tutorial, this is a screen grab
--   rather than a PNG file created by Vega Embed. The background color was
--   changed - following the approach used in
--   <a>stripPlotWithBackground</a> - to show where the visualization
--   "ends" and the HTML select element starts. It also shows the Vega
--   Embed "drop-down" menu in the top-right corner, namely the three dots
--   in a circle.
widgetSelection :: VegaLite

-- | The selection can also be bound to an axis (or both axes, as in this
--   case), using <a>BindScales</a> (applying it to the
--   <a>intervalSelectionY</a> plot).
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let picked = "picked"
--   
--       sel = selection
--               . select picked Interval [ Encodings [ <a>ChX</a>, ChY ], <a>BindScales</a> ]
--   
--   in toVegaLite (sel [] : selectionProperties picked "Drag or zoom the axes")
--   </pre>
--   
--   The image here was created after panning and zooming into the data.
bindScales :: VegaLite

-- | The following plot doesn't contain anything new, but allows us to
--   select a rectangular-range on one plot, and see the same selection
--   automatically applied to the other plots. This is achieved by
--   combining the <a>repeat</a> fuction with the <a>selection</a>; this
--   causes the selection to be projected across all views as it is
--   duplicated.
--   
--   For this example we use all the clusters, rather than the subset of
--   Southern ones. One trick I use is to convert the Right Ascension
--   values (which have a domain of 0 to 360 degrees, and wrap around at
--   the 0/360 mark), into their cosine values (remembering to convert to
--   radians first), and display that instead. This ensures the "Blanco1"
--   cluster members are spatially co-located on this axis - with values
--   close to 1 - rather than appearing near 0 and 360. This is more to
--   show things you <i>can</i> do with Vega-Lite, rather than necesarily
--   things you <b>should</b> do :-)
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let enc = encoding
--               . position X [ PRepeat Column, PmType Quantitative ]
--               . position Y [ PRepeat Row, PmType Quantitative ]
--               . color
--                   [ MSelectionCondition (SelectionName "picked")
--                     [ MName "Cluster", MmType Nominal ]
--                     [ MString "grey" ]
--                   ]
--   
--       sel = selection
--               . select "picked" Interval [ ]
--   
--       trans = transform
--               . calculateAs "cos(datum.RA_ICRS * PI / 180)" "cosRA"
--   
--       spec = asSpec
--                [ gaiaData
--                , trans []
--                , mark Circle []
--                , enc []
--                , sel []
--                ]
--   
--   in toVegaLite
--        [ repeat
--          [ RowFields [ "cosRA", "DE_ICRS" ]
--          , ColumnFields [ "plx", "Gmag" ]
--          ]
--        , specification spec
--        ]
--   </pre>
coordinatedViews :: VegaLite

-- | If the interval selection is bound the the axes with <a>BindScales</a>
--   then we can zoom and pan the related plots - i.e. changing the range
--   displayed in one plot will also change the two plots that it shares an
--   axis with in this two by two arrangement. The conditional encoding of
--   the <a>color</a> channel has also been removed.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   The image was captured after panning and zooming in the
--   "parallax-RA_ICRS" plot.
--   
--   <pre>
--   let enc = encoding
--               . position X [ PRepeat Column, PmType Quantitative ]
--               . position Y [ PRepeat Row, PmType Quantitative ]
--               . color [ MName "Cluster", MmType Nominal ]
--   
--       sel = selection
--               . select "picked" Interval [ BindScales ]
--   
--       spec = asSpec
--                [ gaiaData
--                , mark Circle []
--                , enc []
--                , sel []
--                ]
--   
--   in toVegaLite
--        [ repeat
--          [ RowFields [ "RA_ICRS", "DE_ICRS" ]
--          , ColumnFields [ "plx", "Gmag" ]
--          ]
--        , specification spec
--        ]
--   </pre>
--   
--   The "cosine" transformation has been removed in comparison to
--   <a>coordinatedViews</a>.
coordinatedViews2 :: VegaLite

-- | The ability to determine the scale of a chart based on a selection is
--   useful in implementing a common visualization design pattern, that of
--   'context and focus' (or sometimes referred to as 'overview and detail
--   on demand'). We can achieve this by setting the scale of one view
--   based on the selection in another. The detail view is updated whenever
--   the selected region is changed through interaction:
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let sel = selection . select "brush" Interval [ Encodings [ ChY ] ]
--   
--       encContext = encoding
--                      . position X [ PName "Gmag", PmType Quantitative, PScale [ SZero False ] ]
--                      . position Y [ PName "plx", PmType Quantitative ]
--   
--       specContext = asSpec [ width 400
--                            , height 80
--                            , sel []
--                            , mark Point []
--                            , encContext []
--                            , title "Select a Y range to zoom in below" []
--                            ]
--   
--       encDetail = encoding
--                     . position X [ PName "Gmag"
--                                  , PmType Quantitative
--                                  , PScale [ SZero False ]
--                                  , PAxis [ <a>AxNoTitle</a> ]
--                                  ]
--                     . position Y [ PName "plx"
--                                  , PmType Quantitative
--                                    -- prior to 0.11.0.0 this was <a>SDomain</a>
--                                  , PScale [ <a>SDomainOpt</a> (<a>DSelection</a> "brush") ]
--                                  ]
--                     . color [ MName "Cluster", MmType Nominal ]
--   
--     specDetail =
--         asSpec [ width 400, mark Point [], encDetail [] ]
--   
--   in toVegaLite
--        [ gaiaData
--        , vConcat [ specContext, specDetail ]
--        ]
--   </pre>
--   
--   Not shown here, but selecting a range of y-values in the top plot
--   (<tt>specContext</tt>) will cause the second plot
--   (<tt>specDetail</tt>) to zoom in on that range, as the selection is
--   bound to the y axis of this plot via <a>DSelection</a>.
contextAndFocus :: VegaLite

-- | Here we show distributions of the four main numeric quantities in the
--   dataset - position, magnitude, and prallax - using the
--   <tt>totalEnc</tt> encoding, and add a second layer which repeats this
--   data but with a different color (<tt>selectedEnc</tt>), and that is
--   tied to the interval-selection along the x axis (<a>ChX</a>).
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   Selecting a small range of parallax values in the fourth plot
--   highlights the associated data in the other three plots.
--   
--   <pre>
--   let sel = selection . select "brush" Interval [ Encodings [ ChX ] ]
--   
--       filterTrans = transform . filter (<a>FSelection</a> "brush")
--   
--       -- borrow a function from Elm
--       pQuant = PmType Quantitative
--   
--       totalEnc = encoding
--                   . position X [ PRepeat Column, pQuant ]
--                   . position Y [ PAggregate Count, pQuant ]
--   
--       selectedEnc = totalEnc
--                       . color [ MString "goldenrod" ]
--   
--   in toVegaLite
--        [ repeat [ ColumnFields [ "RA_ICRS", "DE_ICRS", "Gmag", "plx" ] ]
--        , specification $
--            asSpec
--              [ gaiaData
--              , layer
--                [ asSpec [ mark Bar [], totalEnc [] ]
--                , asSpec [ sel [], filterTrans [], mark Bar [], selectedEnc [] ]
--                ]
--              ]
--        ]
--   </pre>
crossFilter :: VegaLite

-- | The <a>loess</a> transform will generate new coordinate pairs for the
--   independent and dependent values based on an existing pair. The name
--   stands for <a>locally-estimated scatterplot smoothing</a>, and here I
--   use it to look for any possible relationship between the magnitude and
--   parallax of each star in a cluster. I don't expect there to really be
--   any (as we've seen before, the distribution is pretty flat), but it's
--   the data I have to play with in this tutorial.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let simplify = transform
--                  . filter (FExpr "(datum.DE_ICRS &gt;= 0) &amp; (datum.DE_ICRS &lt;= 40)")
--   
--       baseEnc = encoding
--                . position X [ PName "Gmag"
--                             , PmType Quantitative
--                             , PScale [ SZero False ]
--                             ]
--                . position Y [ PName "plx"
--                             , PmType Quantitative
--                             , PScale [ SZero False ]
--                             ]
--   
--       rawEnc = baseEnc
--               . color [ MName "Cluster"
--                       , MLegend []
--                       ]
--   
--       rawLayer = asSpec [ rawEnc [], mark Point [] ]
--   
--       trans = transform
--               . <a>loess</a> "plx" "Gmag" [ <a>LsGroupBy</a> [ "Cluster" ] ]
--   
--       trendLayer = asSpec [ trans []
--                           , baseEnc []
--                           , mark Line [ MStroke "black"
--                                       , MStrokeWidth 2
--                                       ]
--                           ]
--   
--       frameSpec = asSpec [ width 250
--                          , height 250
--                          , layer [ rawLayer, trendLayer ] ]
--   
--   in toVegaLite
--        [ gaiaData
--        , simplify []
--        , columns 2
--        , facetFlow [ FName "Cluster", FmType Nominal ]
--        , specification frameSpec
--        ]
--   </pre>
--   
--   The data is filtered to select only four clusters, ensuring that the
--   two closest (i.e. they have the largest parallax values) are included
--   as they are likely to be the most-interesting to look at (because of
--   the spread of parallax values).
--   
--   The <a>LsGroupBy</a> option is used to ensure the calculation is done
--   per cluster, and then multiple layers are used to compare the raw with
--   the "smoothed" data in a faceted display.
loessExample :: VegaLite

-- | This is the same data as <a>loessExample</a>, but using a linear
--   regression model to try and explain the data. Practically, the only
--   things that have changed are switching from <a>loess</a> to
--   <a>regression</a>, and displaying all the data in a single
--   visualization.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let simplify = transform
--                  . filter (FExpr "(datum.DE_ICRS &gt;= 0) &amp; (datum.DE_ICRS &lt;= 40)")
--   
--       axis pos lbl = position pos [ PName lbl
--                                   , PmType Quantitative
--                                   , PScale [ SZero False ]
--                                   ]
--       enc = encoding
--             . axis X "Gmag"
--             . axis Y "plx"
--             . color [ MName "Cluster" ]
--   
--       rawLayer = asSpec [ enc [], mark Point [] ]
--   
--       trans = transform
--               . <a>regression</a> "plx" "Gmag" [ <a>RgGroupBy</a> [ "Cluster" ] ]
--   
--       trendLayer = asSpec [ trans []
--                           , enc []
--                           , mark Line [ MStroke "black"
--                                       , MStrokeWidth 2
--                                       ]
--                           ]
--   
--   in toVegaLite
--        [ width 300
--        , height 300
--        , gaiaData
--        , simplify []
--        , layer [ rawLayer, trendLayer ]
--        ]
--   </pre>
--   
--   In this example I used the default method - <a>RgLinear</a> - but
--   other options are possible (set with the <a>RgMethod</a> option).
regressionExample :: VegaLite

-- | We have already seen "error bars" in the <a>layeredDiversion</a> plot,
--   where the <a>Rule</a> type was used to draw a line between the
--   <a>Y</a> and <a>Y2</a> encodings. In that example the two positions
--   were calculated "on the fly" by Vega-Lite (using the <a>Min</a> and
--   <a>Max</a> aggregation operations). In this example I use the data to
--   calculate the display range, namely <tt>plx - e_plx</tt> to <tt>plx +
--   e_plx</tt>. These are mapped to the <a>X</a> and <a>X2</a> channels
--   (not because it makes a better visualization, but just to show you can
--   create lines along the x axis), and a small-multiples approach is used
--   to separate out the clusters, but only after a filter designed to
--   select the two clusters - with the "most interesting" data for this
--   plot - has been applied.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let trans = transform
--                 . filter (FExpr "datum.Cluster[0] == 'C' || datum.Cluster[0] == 'H'")
--                 . calculateAs "datum.plx - datum.e_plx" "plx_lo"
--                 . calculateAs "datum.plx + datum.e_plx" "plx_hi"
--   
--       errorEnc = encoding
--                    . position X [ PName "plx_lo"
--                                 , PmType Quantitative
--                                 , PScale [SZero False]
--                                 , PAxis [ AxTitle "parallax (mas)" ]
--                                 ]
--                    . position <a>X2</a> [ PName "plx_hi" ]
--                    . position Y [ PName "Gmag", PmType Quantitative ]
--                    . column [ FName "Cluster", FmType Nominal ]
--   
--       sel = selection
--               . select "picked" Interval [ BindScales ]
--   
--   in toVegaLite [ gaiaData
--                 , trans []
--                 , errorEnc []
--                 , mark Rule []
--                 , sel []
--                 ]
--   </pre>
--   
--   For the interested reader, it was the calculation of the
--   <tt>"plx_hi"</tt> column that lead me to the discovery that the
--   columns were being read in as a string, and the introduction of the
--   <a>Parse</a> option to <a>gaiaData</a>.
--   
--   As can be seen, the <tt>e_plx</tt> terms are generally very small.
--   This is good for anyone using the data, as we want precise
--   measurements, but makes it harder for me to come up with meaningful
--   visualizations! I have taken advantage of the <a>BindScales</a>
--   interaction to zoom in on a subset of stars which show larger parallax
--   errors:
--   
errorManual :: VegaLite

-- | Alternatively, I could have made life simpler for myself and used the
--   <a>ErrorBar</a> (or <a>ErrorBand</a>) mark type, together with
--   <a>XError</a> (or <a>YError</a>) to indicate that the channel gives
--   the offset from the central value. For this visualization I restrict
--   to a single cluster (since I now know there's only one in this sample
--   which begins with <tt>C</tt>), but retain the <a>column</a> encoding
--   as a means to getting a useful title. I've also switched things so
--   that the errors are back along the y axis.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let trans = transform
--                 . filter (FExpr "datum.Cluster[0] == 'C'")
--   
--       errorEnc = encoding
--                   . position Y [ PName "plx"
--                                , PmType Quantitative
--                                , PScale [SZero False]
--                                , PAxis [ AxTitle "parallax (mas)" ]
--                                ]
--                   . position <a>YError</a> [ PName "e_plx" ]
--                   . position X [ PName "Gmag", PmType Quantitative ]
--                   . column [ FName "Cluster", FmType Nominal ]
--   
--   in toVegaLite [ gaiaData
--                 , trans []
--                 , errorEnc []
--                 , mark <a>ErrorBar</a> []
--                 ]
--   </pre>
errorAuto :: VegaLite

-- | In this plot the error range is calculated by Vega-Lite, and is taken
--   from the standard deviation of the <tt>Gmag</tt> field
--   (<a>StdDev</a>). The <a>MTicks</a> and <a>MRule</a> constructors are
--   used to color the different parts of the error bars. Since the error
--   bar does not reference the central value, a separate layer is used to
--   add a square symbol (<a>SymSquare</a>) at the average (<a>Mean</a>)
--   value of the distribution.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let cluster = position X [ PName "Cluster", PmType Nominal ]
--   
--       barOpts = [ <a>MExtent</a> <a>StdDev</a>
--                 , <a>MTicks</a> [ <a>MColor</a> "purple" ]
--                 , <a>MRule</a> [ MColor "teal" ]
--                 ]
--       range = [ mark ErrorBar barOpts
--               , encoding
--                   . position Y [ PName "Gmag"
--                                , PmType Quantitative
--                                , PScale [ SZero False ]
--                                ]
--                   $ []
--               ]
--   
--       center = [ mark Point [ <a>MShape</a> <a>SymSquare</a>, <a>MSize</a> 20 ]
--                , encoding
--                    . position Y [ PName "Gmag"
--                                 , PmType Quantitative
--                                 , PmType <a>Mean</a>
--                                 ]
--                    $ []
--                ]
--   
--   in toVegaLite
--         [ gaiaData
--         , encoding (cluster [])
--         , layer (map asSpec [ range, center ])
--         , width 300
--         , height 300
--         ]
--   </pre>
errorBars :: VegaLite

-- | The next plot shows the <a>ErrorBand</a> mark, which fills the area
--   between the chosen range with a color, and optional borders. Here the
--   blue band shows the calculated standard deviation - as used in
--   <a>errorBars</a> - and the gray band with borders shows the
--   inter-quartile range. On top of these are drawn the median (blue) and
--   median (green dashed) lines.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let posY extra = position Y ([ PName "Gmag"
--                                , PmType Quantitative
--                                , PScale [ SZero False ]
--                                ] ++ extra) []
--   
--       bands = [ [ encoding (posY [])
--                 , mark <a>ErrorBand</a> [ MExtent StdDev ]
--                 ]
--               , [ encoding (posY [])
--                 , mark ErrorBand [ MExtent <a>Iqr</a>
--                                  , <a>MBorders</a> [ <a>MStrokeDash</a> [ 6, 2 ] ]
--                                  , MColor "gray"
--                                  ]
--                 ]
--               , [ encoding (posY [ PAggregate Median ])
--                 , mark Line []
--                 ]
--               , [ encoding (posY [ PAggregate Mean ])
--                 , mark Line [ MColor "green"
--                             , MStrokeDash [ 6, 2, 4, 2 ]
--                             ]
--                 ]
--               ]
--   
--   in toVegaLite
--       [ gaiaData
--       , encoding (position X [ PName "Cluster", PmType Nominal ] [])
--       , layer (map asSpec bands)
--       , width 300
--       , height 300
--       , title "Comparing ranges" []
--       ]
--   </pre>
--   
--   Note that I don't think this is a good visualization for this
--   <i>particular</i> dataset, since it implies there's a connection or
--   correlation between clusters, as given by the x-axis ordering, but the
--   aim here is to show how to use <tt>hvega</tt> rather than creating
--   sensible plots!
errorBand :: VegaLite

-- | An alternative visualization of a distribution is the "box and
--   whiskers" plot, which can be achieved in <tt>hvega</tt> with the
--   <a>Boxplot</a> mark. The example below shows the default settings, but
--   the various components can be controlled with <a>MBox</a>,
--   <a>MMedian</a>, <a>MOutliers</a>, and <a>MTicks</a>.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   toVegaLite
--       [ gaiaData
--       , encoding
--           . position X [ PName "Cluster", PmType Nominal ]
--           . position Y [ PName "Gmag", PmType Quantitative ]
--           $ []
--       , mark <a>Boxplot</a> []
--       , width 300
--       , height 300
--       ]
--   </pre>
--   
--   The <a>Boxplot</a> option supports two different "ranges":
--   
--   <ul>
--   <li>the default is the Tukey Box plot, where the whiskers span a range
--   <tt>Q1 - k * IQR</tt> to <tt>Q3 + k * IQR</tt>, <tt>IQR = Q3 -
--   Q1</tt>, <tt>Q1</tt> and <tt>Q3</tt> are the lower and upper
--   inter-quartile values (so 25 and 75 per cent of the distribution), and
--   <tt>k</tt> defaults to 1.5 but can be changed with
--   <a>IqrScale</a>;</li>
--   <li>or <a>ExRange</a>, which uses the full range of the data (i.e.
--   minimum to maximum values).</li>
--   </ul>
errorBox :: VegaLite

-- | Here I combine <a>errorBox</a> with <a>smallMultiples2</a> so we can
--   compare the distribution (from the histogram) with that from the box
--   plot.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let histEnc = encoding
--                   . position X [ PName "Gmag", PmType Quantitative, PBin [] ]
--                   . position Y yAxis
--                   . color [ MName "Cluster", MmType Nominal, MLegend [] ]
--   
--       errEnc = encoding
--                  . position X [ PName "Gmag", PmType Quantitative ]
--                  . position Y [ <a>PNumber</a> 80 ]
--                  . color [ MName "Cluster", MmType Nominal, MLegend [] ]
--   
--       yAxis = [ PAggregate Count
--               , PmType Quantitative
--               , PAxis [ AxTitle "Number of Stars" ]
--               ]
--   
--       boxOpts = [ <a>MMedian</a> [ MColor "black" ]
--                 , <a>MBox</a> [ MStroke "white" ]
--                 , <a>MNoOutliers</a>
--                 ]
--   
--       histSpec = asSpec [ mark Bar [], histEnc [] ]
--       errSpec = asSpec [ mark Boxplot boxOpts, errEnc [] ]
--   
--       combinedSpec = asSpec [ layer [ histSpec, errSpec ] ]
--   
--   in toVegaLite
--       [ gaiaData
--       , columns 3
--       , facetFlow [ FName "Cluster", FmType Nominal ]
--       , specification combinedSpec
--       ]
--   </pre>
--   
--   The main additions here are the configuration of the box plot - with
--   <a>MMedian</a>, <a>MBox</a> (used to ensure the box is visually
--   distinct from the bar for the Pleiades cluster, where they overlap),
--   and <a>MNoOutliers</a> (to turn off the display of the outliers) - and
--   the use of <a>PNumber</a> to define the location on the y axis of the
--   boxplot visualization. Note that <a>PNumber</a> is defined in pixel
--   units, with 0 being the top of the visualization and 80 was found by
--   trial and error.
comparingErrors :: VegaLite

-- | This is based on the <a>Marginal Histogram</a> example from the
--   Vega-Lite <a>Example Gallery</a>. There is very-little new in this
--   plot, in that pretty-much everything has been shown before. However,
--   there are some interesting wrinkles, such as
--   
--   <ul>
--   <li>combining multiple plots, in this case the "top" area - which is a
--   histogram on top of a plot which is itself a "map" and a histogram -
--   and "bottom" area - which is just a point plot - requires judicious
--   use of <a>asSpec</a>;</li>
--   <li>selection works in <b>both</b> the main plots - the "map" and
--   "point" plots - to highlight all stars in the same cluster, and I was
--   pleasantly surprised to find out I could just use the same selection
--   specification (<tt>selCluster</tt>) in both (hopefully I am not just
--   enjoying a hole in the Vega-Lite specification);</li>
--   <li>I have been perhaps too defensive in defining the Right Ascension
--   and Declination axes in the relevant plots, as I want to make sure the
--   histogram bins and plot axes are well aligned (that is the
--   <tt><a>Nice</a> False</tt> statements may not be needed when defining
--   the histogram axes);</li>
--   <li>I am not 100% sure I understand what is going on with the grid
--   labels on the Declination axis, as I had thought I was asking for
--   marks every 15 degrees, but the plot shows them every 30 degrees
--   (however, if I change the <tt>deTicks</tt> array then the marks change
--   in ways I currently do not understand);</li>
--   <li>and I have decided to display Right Ascension in hours, rather
--   than degrees, because why have one way to measure a value when you can
--   have many!</li>
--   </ul>
--   
--   
--   <a>Open this visualization in the Vega Editor (although the link is
--   long, and may not work with Internet Explorer)</a>
--   
--   <pre>
--   let trans = transform
--                 . calculateAs "datum.RA_ICRS / 15" "RA"
--   
--       quant n = [ PName n, PmType Quantitative ]
--   
--       big = 400
--       small = 100
--       wmain = width big
--       hmain = height big
--       wsub = width small
--       hsub = height small
--       noTitle = PAxis [ AxNoTitle ]
--   
--       raAxis = [ PScale [ SDomain (DNumbers [ 0, 24 ])
--                         , SNice (IsNice False)
--                         ]
--                , PSort [ Descending ]
--                , PAxis [ AxTitle "Right Ascension (hours)" ]
--                ]
--   
--       deMin = -90
--       deMax = 90
--       deStep = 15
--   
--       -- we do not get ticks/grids at all these values, but it does
--       -- something (e.g. if do not specify the axis ticks are different)
--       --
--       deTicks = Numbers [ deMin, deMin + deStep .. deMax ]
--       deAxis = [ PScale [ SDomain (DNumbers [ deMin, deMax ])
--                         , SNice (IsNice False)
--                         ]
--                , PAxis [ AxTitle "Declination (degrees)"
--                        , AxValues deTicks
--                        ]
--                ]
--   
--       colorEnc = color [ MSelectionCondition (SelectionName "pick")
--                            [ MName "Cluster", MmType Nominal ]
--                            [ MString "grey" ]
--                        ]
--       mapEnc = encoding
--                  . position X (quant "RA" ++ raAxis)
--                  . position Y (quant "DE_ICRS" ++ deAxis)
--                  . colorEnc
--   
--       circleMark = mark Circle [ MOpacity 0.5 ]
--   
--       mapSpec = asSpec [ mapEnc []
--                        , circleMark
--                        , wmain
--                        , hmain
--                        , selCluster []
--                        ]
--   
--       -- histogram of the RA values
--       --
--       raBinning = [ PBin [ <a>Extent</a> 0 24
--                          , Step 2
--                          , Nice False
--                          ]
--                   , PSort [ Descending ]
--                   , PAxis []
--                   ]
--   
--       -- histogram of the Declination values
--       --
--       deBinning = [ PBin [ Extent deMin deMax
--                          , Step deStep
--                          , Nice False
--                          ]
--                   , PAxis []
--                   ]
--   
--       histAxis = [ PAggregate Count
--                  , PmType Quantitative
--                  , noTitle
--                  , PScale [ SDomain (DNumbers [ 0, 3000 ]) ]
--                  ]
--   
--       raEnc = encoding
--                 . position X (quant "RA" ++ raBinning)
--                 . position Y histAxis
--   
--       deEnc = encoding
--                 . position Y (quant "DE_ICRS" ++ deBinning)
--                 . position X histAxis
--   
--       allRA = [ raEnc []
--               , mark Bar [ MColor "gray" ]
--               ]
--       filtRA = [ filterCluster []
--                , raEnc
--                    . colorEnc
--                    $ []
--                , mark Bar []
--                ]
--   
--       allDE = [ deEnc []
--               , mark Bar [ MColor "gray" ]
--               ]
--       filtDE = [ filterCluster []
--                , deEnc
--                    . colorEnc
--                    $ []
--                , mark Bar []
--                ]
--   
--       raSpec = asSpec [ wmain, hsub, layer [ asSpec allRA, asSpec filtRA ] ]
--       deSpec = asSpec [ hmain, wsub, layer [ asSpec allDE, asSpec filtDE ] ]
--   
--       borderSpacing = 20
--   
--       mapAndDecSpec = asSpec [ spacing borderSpacing
--                              , <a>bounds</a> <a>Flush</a>
--                              , hConcat [ mapSpec, deSpec ]
--                              ]
--   
--       histSpecs = [ raSpec, mapAndDecSpec ]
--   
--       -- select the cluster which the star belongs to; do not use
--       -- "nearest click" as that means a user can not cancel the
--       -- selection.
--       --
--       pick = "pick"
--       selCluster = selection
--                      . select pick Single [ Fields [ "Cluster" ] ]
--   
--       filterCluster = transform
--                         . filter (FSelection pick)
--   
--       plxOpts = [ PScale [ SType ScLog, SNice (IsNice False) ]
--                 , PAxis [ AxTitle "parallax (milli-arcsecond)" ]
--                 ]
--       gmagOpts = [ PAxis [ AxTitle "G magnitude" ] ]
--   
--       encData = encoding
--                   . position X (quant "plx" ++ plxOpts)
--                   . position Y (quant "Gmag" ++ gmagOpts)
--   
--       parallaxSpec = asSpec [ width (big + borderSpacing + small)
--                             , encData
--                                 . colorEnc
--                                 $ []
--                             , circleMark
--                             , selCluster []
--                             ]
--   
--       allSpecs = [ asSpec [ spacing borderSpacing
--                           , bounds Flush
--                           , vConcat histSpecs
--                           ]
--                  , parallaxSpec ]
--   
--   
--   in toVegaLite
--      [ gaiaData
--      , trans []
--      , vConcat allSpecs
--        -- remove the "other" axis (e.g. top of Y, right for X)
--      , configure
--          . configuration (ViewStyle [ <a>ViewStroke</a> "transparent" ])
--          $ []
--      , title "Gaia data from arXiv:1804.09378" [ <a>TAnchor</a> <a>AMiddle</a> ]
--      ]
--   </pre>
--   
--   Here is the visualization after selecting a star:
--   
combinedPlot :: VegaLite

-- | This visualization started out when I asked myself if I could repeat
--   the X axis at the top of the plot. I started off by trying to use
--   <a>configuration</a> with the <a>AxisTop</a> constructor, but this
--   didn't work (perhaps I didn't turn on the necessary option), so I
--   ended up with the following. It does show off the use of
--   <a>AxLabelExpr</a> and <a>AxDataCondition</a>, but is not perhaps the
--   most-digestible visualization one could create!
--   
--   As I could not work out how to duplicate the X axis with only a single
--   layer, I got creative and duplicated the data and in the second layer
--   moved the X axis to the top of the plot with <a>AxOrient</a>, and
--   ensured the data would not be displayed (by setting the <a>Text</a>
--   value to the empty string).
--   
--   The axis labels and the tick marks for the two X axes make use of the
--   <tt>datum.index</tt> field, which is in the range 0 to 1 inclusive,
--   which I multiply by 8 (one less than the total number of clusters) and
--   check if the result is odd or even (ignoring the possibility of
--   floating-point inaccuracies in the conversion). The odd values are
--   displayed on the bottom axis and the even values on the top (the first
--   cluster, in this case <tt>Blanco1</tt>, has an index value of 0, so is
--   displayed on the top axis). The <a>AxLabelExpr</a> option is used to
--   determine the label contents (if the condition holds then it uses a
--   trimmed and truncated version of the default label, otherwise it is
--   blank), and <a>AxDataCondition</a> is used to control the opacity of
--   the tick marks. I had hoped to show some of the label-overlap
--   strategies in play here - controlled by <a>AxLabelOverlap</a> - but
--   they didn't work well with the data and visualization size, and I
--   realised I could play with the new-to-Vega-Lite-4 <a>AxLabelExpr</a>
--   and <a>AxDataCondition</a> capabilities.
--   
--   Normally a grid is not drawn for <a>Nominal</a> axes, but I turn it on
--   (for the first layer) with <a>AxGrid</a> just to help guide the eye.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let trans = transform
--               . aggregate [ opAs Count "" "number" ]
--                           [ "Cluster" ]
--   
--       xAxis f = position X [ PName "Cluster"
--                            , PmType Nominal
--                            , PAxis [ <a>AxLabelAngle</a> 0
--                                    , <a>AxOrient</a> (if f then SBottom else STop)
--                                    , if f
--                                      then AxTitle "Cluster"
--                                      else AxNoTitle
--                                    , <a>AxLabelExpr</a> (xlabels f)
--                                    , <a>AxDataCondition</a>
--                                      (Expr (xticks f))
--                                      (<a>CAxTickOpacity</a> 1 0)
--                                    , <a>AxGrid</a> f
--                                    ]
--                            ]
--   
--       xlabels f =
--         let v = if f then "1" else "0"
--         in "if((datum.index * 8) % 2 ==" &lt;&gt; v &lt;&gt; ", truncate(trim(datum.label), 5), '')"
--   
--       xticks f =
--         let v = if f then "1" else "0"
--         in "(datum.index * 8) % 2 ==" &lt;&gt; v
--   
--       yAxis f = position Y [ PName "number"
--                            , PmType Quantitative
--                            , PAxis [ if f
--                                      then AxTitle "Number of stars"
--                                      else AxNoTitle ]
--                            ]
--   
--       -- f is True indicates first Layer (bottom X axis, should display
--       -- the Y axis).
--       enc f = encoding
--               . xAxis f
--               . yAxis f
--   
--       dataLayer = asSpec [ enc True []
--                          , mark Circle []
--                          ]
--   
--       axLayer = asSpec [ enc False []
--                        , mark Text [ MText "" ]
--                        ]
--   
--   in toVegaLite [ gaiaData
--                 , trans []
--                 , layer [ dataLayer, axLayer ]
--                 ]
--   </pre>
--   
--   If anyone can come up with a simpler way to duplicate the X axis I'm
--   all ears!
duplicateAxis :: VegaLite

-- | Way back in the tutorial I noted - in <a>densityParallaxGrouped</a> -
--   that setting the <a>density</a> option <a>DnCounts</a> to
--   <tt>True</tt> resulted in counts that were too high. This is because
--   the values need to be divided by the bin width, as shown in this
--   visualization, where I:
--   
--   <ul>
--   <li>use an explicit grid for the density calculation, choosing the
--   <a>DnExtent</a> and <a>DnSteps</a> parameters to create a bin width of
--   0.1 in parallax;</li>
--   <li>sum up the resulting KDE (the <tt>"ykde"</tt> field) to create
--   <tt>"ycounts"</tt>;</li>
--   <li>normalize the counts by the bin with using <a>calculateAs</a> to
--   create the <tt>"count"</tt> field;</li>
--   <li>which is plotted as a diamond, on top of a line showing the actual
--   counts (calculated following <a>starCount</a>).</li>
--   </ul>
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let densTrans = transform
--               . density "plx" [ DnAs "xkde" "ykde"
--                               , DnGroupBy [ "Cluster" ]
--                               , DnCounts True
--                               , DnExtent 3 30
--                               , <a>DnSteps</a> 270
--                               ]
--               . aggregate [ opAs Sum "ykde" "ycounts" ]
--                           [ "Cluster" ]
--               . calculateAs "datum.ycounts / 10" "count"
--   
--       enc = encoding
--             . position X [ PName "Cluster"
--                          , PmType Nominal
--                          ]
--             . position Y [ PName "count"
--                          , PmType Quantitative
--                          , PAxis [ AxTitle "Counts" ]
--                          ]
--   
--       densLayer = asSpec [ densTrans []
--                          , enc []
--                          , mark Point [ MShape <a>SymDiamond</a>
--                                       , MStroke "black"
--                                       , MSize 200
--                                       ]
--                          ]
--   
--       countTrans = transform
--                    . aggregate [ opAs Count "" "count" ] [ "Cluster" ]
--   
--       countLayer = asSpec [ countTrans [], enc [], mark Line [] ]
--   
--   in toVegaLite
--        [ gaiaData
--        , layer [ countLayer, densLayer ]
--        ]
--   </pre>
--   
--   Note that the same encoding specification is used on both layers,
--   since I arranged the data transforms to create two columns -
--   <tt>"Cluster"</tt> and <tt>"count"</tt> - in both cases.
compareCounts :: VegaLite

-- | In this example I compare the parallax values
--   
--   <ul>
--   <li>as the raw distribution, using the ticks display we saw in the
--   very first plot, <a>stripPlot</a>, (although with a few
--   adjustments)</li>
--   <li>against a smoothed version of the distribution, calculated using
--   the <a>regression</a> transform (e.g. <a>densityParallax</a>).</li>
--   </ul>
--   
--   The only new things here are configuration options for the X axis -
--   that is, the use of <a>AxLabels</a>, along with <a>AxNoTitle</a>, to
--   ensure the X axis of the density plot only has grid lines - and the
--   legend options were set to center the title.
--   
--   
--   <a>Open this visualization in the Vega Editor</a>
--   
--   <pre>
--   let plxScale = PScale [ SType ScLog
--                         , SNice (IsNice False)
--                         , SDomain (DNumbers [3, 30])
--                         ]
--   
--       opacityEnc ounsel osel =
--         opacity [ MSelectionCondition (SelectionName selName)
--                   [ MNumber osel ]
--                   [ MNumber ounsel ]
--                 ]
--   
--       tickEnc = encoding
--                 . position X [ PName "plx"
--                              , PmType Quantitative
--                              , plxScale
--                              , PAxis [ AxTitle "Parallax (mas)" ]
--                              ]
--                 . color [ MName "Cluster"
--                         , MmType Nominal
--                         , MLegend []
--                         ]
--                 . opacityEnc 0.05 0.3
--   
--       plotWidth = width 600
--   
--       tickLayer = asSpec [ plotWidth
--                          , tickEnc []
--                          , mark Tick [ ] ]
--   
--       densTrans = transform
--                   . density "plx" [ DnGroupBy [ "Cluster" ]
--                                     , DnAs "value" "density"
--                                     ]
--       densEnc = encoding
--                 . position X [ PName "value"
--                              , PmType Quantitative
--                              , plxScale
--                              , PAxis [ AxNoTitle
--                                      , <a>AxLabels</a> False
--                                      ]
--                              ]
--                 . position Y [ PName "density"
--                              , PmType Quantitative
--                              , PAxis [ AxTitle "Density" ]
--                              ]
--                 . color [ MName "Cluster"
--                         , MmType Nominal
--                         , MLegend [ LOrient LOBottom
--                                   , <a>LTitleAnchor</a> AMiddle
--                                   , LTitle "Select a cluster"
--                                   ]
--                         , MScale [ SScheme "category10" [] ]
--                         ]
--                 . opacityEnc 0.3 1
--   
--       densLayer = asSpec [ plotWidth
--                          , densTrans []
--                          , densEnc []
--                          , sel []
--                          , mark Line [ ]
--                          ]
--   
--       selName = "legend"
--       sel = selection
--             . select selName Single [ BindLegend (BLField "Cluster") ]
--   
--   in toVegaLite
--       [ gaiaData
--       , spacing 0
--       , bounds Flush
--       , vConcat [ densLayer, tickLayer ]
--       ]
--   </pre>
--   
--   I have also changed the color scheme to <tt>"category10"</tt>, which
--   isn't necessarily any better than the default (<tt>"tableau10"</tt>),
--   but is at least different (I was hoping to get a better separation in
--   color space for the IC2391 and IC2602 clusters, but quickly gave up
--   after <a>trying out a few options</a>).
--   
--   Here is the visualization after selecting the label "<tt>NGC2451</tt>"
--   in the legend:
--   
parallaxView :: VegaLite

-- | With the helper routines, the actual plot is not very different to
--   other plots (but note that unlike <a>skyPlot</a> we <b>do not</b> use
--   <a>projection</a> since we are doing it all ourselves).
--   
--   
--   <a>Open this visualization in the Vega Editor (although the link is
--   long, and may not work with Internet Explorer)</a>
--   
--   <pre>
--   let trans = transform
--               . aitoffTrans "datum.RA_ICRS" "datum.DE_ICRS"
--   
--       enc = encoding
--             . position X [ PName "x", PmType Quantitative, PScale [ SNice (IsNice False) ] ]
--             . position Y [ PName "y", PmType Quantitative, PScale [ SNice (IsNice False) ] ]
--             . color [ MName "Cluster", MmType Nominal ]
--   
--       spec = asSpec [ trans [], enc [], mark Circle [ MSize 9 ] ]
--   
--   in toVegaLite [ aitoffConfig []
--                 , width 570
--                 , height 285
--                 , gaiaData
--                 , layer (spec : graticuleSpec)
--                 ]
--   </pre>
--   
--   Since we <a>control the hotizontal and the vertical</a>, it is
--   possible to "rotate" the data to move a different location to the
--   center of the plot (this version has Right Ascension of 0 at the
--   middle). I leave that addition for your entertainment!
skyPlotAitoff :: VegaLite

-- | If we want, we can treat each cluster as a point, and calculate an
--   "average" location. The following visualization presents the average
--   location of each cluster, where we calculate the <a>circular mean</a>
--   of the Right Ascension values (to account for possible wrapping around
--   0/360 degrees). To see the effect of this correction, we overlay the
--   simple average as unfilled circles: for all clusters except Blanco1,
--   which spans 0 degree meridian, the two match.
--   
--   
--   <a>Open this visualization in the Vega Editor (although the link is
--   long, and may not work with Internet Explorer)</a>
--   
--   <pre>
--   let aggTrans = transform
--                  . calculateAs "cos(datum.RA_ICRS * PI / 180)" "cosRA"
--                  . calculateAs "sin(datum.RA_ICRS * PI / 180)" "sinRA"
--                  . aggregate
--                      [ opAs Mean "cosRA" "cosRA0"
--                      , opAs Mean "sinRA" "sinRA0"
--                      , opAs Mean "RA_ICRS" "wrong_ra0"
--                      , opAs Mean "DE_ICRS" "dec0"
--                      ]
--                      [ "Cluster" ]
--                 . calculateAs "atan2(datum.sinRA0,datum.cosRA0) * 180.0 / PI" "ra0"
--   
--       clusterTrans = aggTrans
--                      . aitoffTrans "datum.ra0" "datum.dec0"
--   
--       pos ax field = position ax [ PName field
--                                  , PmType Quantitative
--                                  , PScale [SNice (IsNice False)]
--                                  ]
--       enc = encoding
--             . pos X "x"
--             . pos Y "y"
--             . color [ MName "Cluster", MmType Nominal, MLegend [] ]
--       encText = enc
--                 . text [ TName "Cluster", TmType Nominal ]
--   
--       clusterSpec =
--           asSpec [ clusterTrans [], enc [], mark Circle [ MSize 90 ] ]
--   
--       clusterLabelSpec =
--           asSpec [ clusterTrans [], encText [], mark Text [ MAlign <a>AlignLeft</a>
--                                                           , MdX 8 ] ]
--   
--       uncorrectedTrans = aggTrans
--                          . aitoffTrans "datum.wrong_ra0" "datum.dec0"
--   
--       uncorrectedSpec =
--           asSpec [ uncorrectedTrans [], enc [], mark Circle [ MSize 200, MFilled False ] ]
--   
--   in toVegaLite  [ aitoffConfig []
--                  , width 570
--                  , height 285
--                  , gaiaData
--                  , layer (clusterSpec : uncorrectedSpec : clusterLabelSpec : graticuleSpec)
--                  ]
--   </pre>
clusterCenters :: VegaLite
