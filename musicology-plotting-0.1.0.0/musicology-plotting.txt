-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/DCMLab/haskell-musicology#readme</a>
@package musicology-plotting
@version 0.1.0.0

module Musicology.Plotting.Charts
data PianoRollPlot n
PRPlot :: [n] -> (FillStyle, Maybe LineStyle) -> PianoRollPlot n
[_prNotes] :: PianoRollPlot n -> [n]
[_prStyle] :: PianoRollPlot n -> (FillStyle, Maybe LineStyle)
pianoRollStyle :: AlphaColour Double -> (FillStyle, Maybe LineStyle)
ptod :: (Interval p, ToMidi p) => Pitch p -> Double
plotPianoRoll :: (HasPitch n, HasTime n, PlotValue (TimeOf n), ToMidi (IntervalOf n)) => PianoRollPlot n -> Plot (TimeOf n) Double
renderPianoRoll :: (HasPitch n, HasTime n, PlotValue (TimeOf n), ToMidi (IntervalOf n)) => [n] -> (FillStyle, Maybe LineStyle) -> PointMapFn (TimeOf n) Double -> BackendProgram ()
instance GHC.Classes.Eq n => GHC.Classes.Eq (Musicology.Plotting.Charts.PianoRollPlot n)
instance GHC.Show.Show n => GHC.Show.Show (Musicology.Plotting.Charts.PianoRollPlot n)

module Musicology.Plotting.Plotting
ppSpec :: VegaLite -> IO ()
writeSpec :: FilePath -> VegaLite -> IO ()
viewPlot :: VegaLite -> IO ()
fixRatios :: Value -> Value
pianorollView :: (ToJSON p, ToJSON t, Interval p, ToMidi p) => [Note p t] -> Maybe Text -> [(VLProperty, VLSpec)]
pianoroll :: (ToJSON p, ToJSON t, Interval p, ToMidi p) => [Note p t] -> VegaLite
plotpolysView :: (ToJSON p, ToJSON t, Interval p, ToMidi p) => [Note p t] -> [[Note p t]] -> [(VLProperty, VLSpec)]
plotpolys' :: (ToJSON p, ToJSON t, Interval p, ToMidi p) => [Note p t] -> [[Note p t]] -> VegaLite
plotpolys :: (ToJSON p, ToJSON t, Interval p, ToMidi p) => [Note p t] -> [[[Note p t]]] -> VegaLite
vegaEmbed :: FilePath -> Element "html" ('[] :: [ContentCategory]) ('Elements '["head", "body"]) '[GetAttributeName 'ManifestA] :> ((Element "head" ('[] :: [ContentCategory]) 'Metadata ('[] :: [Symbol]) :> ((Element "title" '[ 'Metadata] 'OnlyText ('[] :: [Symbol]) :> Text) # (((Element "script" '[ 'Metadata, 'Flow, 'Phrasing, 'Scripting] 'OnlyText (GetAttributeName 'SrcA ': ('TypeA & ('NomoduleA & ('AsyncA & ('DeferA & ('CrossoriginA & ('IntegrityA & ('ReferrerpolicyA & ('[] :: [Symbol]))))))))) :@ (Attribute "src" 'False 'False := Text)) :> ()) # (((Element "script" '[ 'Metadata, 'Flow, 'Phrasing, 'Scripting] 'OnlyText (GetAttributeName 'SrcA ': ('TypeA & ('NomoduleA & ('AsyncA & ('DeferA & ('CrossoriginA & ('IntegrityA & ('ReferrerpolicyA & ('[] :: [Symbol]))))))))) :@ (Attribute "src" 'False 'False := Text)) :> ()) # ((Element "script" '[ 'Metadata, 'Flow, 'Phrasing, 'Scripting] 'OnlyText (GetAttributeName 'SrcA ': ('TypeA & ('NomoduleA & ('AsyncA & ('DeferA & ('CrossoriginA & ('IntegrityA & ('ReferrerpolicyA & ('[] :: [Symbol]))))))))) :@ (Attribute "src" 'False 'False := Text)) :> ()))))) # (Element "body" ('[] :: [ContentCategory]) 'Flow (GetAttributeName 'OnafterprintA ': ('OnbeforeprintA & ('OnbeforeunloadA & ('OnhashchangeA & ('OnlanguagechangeA & ('OnmessageA & ('OnmessageerrorA & ('OnofflineA & ('OnonlineA & ('OnpagehideA & ('OnpageshowA & ('OnpopstateA & ('OnrejectionhandledA & ('OnstorageA & ('OnunhandledrejectionA & ('OnunloadA & ('[] :: [Symbol]))))))))))))))))) :> (((Element "div" '[ 'Flow, 'Palpable] ('Flow ':|: ('Elements '["dt", "dt"] ':|: 'Scripting)) ('[] :: [Symbol]) :@ (Attribute "id" 'True 'False := Text)) :> ()) # ((Element "script" '[ 'Metadata, 'Flow, 'Phrasing, 'Scripting] 'OnlyText (GetAttributeName 'SrcA ': ('TypeA & ('NomoduleA & ('AsyncA & ('DeferA & ('CrossoriginA & ('IntegrityA & ('ReferrerpolicyA & ('[] :: [Symbol]))))))))) :@ (Attribute "type" 'False 'False := Text)) :> Raw Text))))
vegaJsText :: FilePath -> Text
