-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/DCMLab/musicology-pitch#readme</a>
@package musicology-pitch
@version 0.1.0.0


-- | This module defines a generic interface for pitch and interval types.
--   
--   It provides three basic blocks of functionality:
--   
--   <ul>
--   <li>a set of type classes for generically <a>working with
--   intervals</a></li>
--   <li>a generic type and associated operations for <a>working with
--   pitches</a></li>
--   <li>functionality for reading and printing pitches and intervals in a
--   <a>common notation</a></li>
--   </ul>
module Musicology.Pitch.Class
class VectorSpace i => Interval i where {
    type family ICOf i;
}
ic :: Interval i => i -> ICOf i
octave :: Interval i => i
direction :: Interval i => i -> Ordering
direction :: (Interval i, Ord i) => i -> Ordering
iabs :: Interval i => i -> i
class (Interval i, Interval (IOf i), VectorSpace i, ICOf (IOf i) ~ i) => IntervalClass i where {
    type family IOf i;
}
emb :: IntervalClass i => i -> IOf i
oct :: (IntervalClass i, s ~ Scalar (IOf i)) => s -> i -> IOf i
unison :: Interval i => i
class Interval i => Diatonic i
isStep :: Diatonic i => i -> Bool
class Interval i => Chromatic i
chromaticSemitone :: Chromatic i => i
aug :: Chromatic i => i -> i
dim :: Chromatic i => i -> i
down :: Interval i => i -> i
newtype ImperfectInterval i
Impf :: (i -> i) -> ImperfectInterval i
minor :: Chromatic i => ImperfectInterval i -> i
major :: Interval i => ImperfectInterval i -> i
newtype Pitch a
Pitch :: a -> Pitch a
toPitch :: a -> Pitch a
toInterval :: Pitch a -> a
pto :: AdditiveGroup v => Pitch v -> Pitch v -> v
pfrom :: AdditiveGroup v => Pitch v -> Pitch v -> v
(+^) :: AdditiveGroup a => Pitch a -> a -> Pitch a
(^+) :: AdditiveGroup a => a -> Pitch a -> Pitch a
(-^) :: AdditiveGroup a => Pitch a -> a -> Pitch a
pc :: Interval p => Pitch p -> Pitch (ICOf p)
class Notation i
showNotation :: Notation i => i -> String
showNotationT :: Notation i => i -> Text
parseNotation :: Notation i => ReadP i
readNotation :: Notation i => String -> Maybe i
readNotationT :: Notation i => Text -> Maybe i
transpose :: (Functor f, Interval i) => i -> f i -> f i
embedI :: IntervalClass i => i -> IOf i -> i -> IOf i
embedP :: IntervalClass i => i -> IOf i -> Pitch i -> Pitch (IOf i)
embed :: (Functor f, IntervalClass i) => i -> IOf i -> f i -> f (IOf i)
embed' :: (Functor f, IntervalClass (ICOf v), Interval v, IOf (ICOf v) ~ v) => v -> Pitch v -> f (ICOf v) -> f (IOf (ICOf v))
class ToMidi i
toMidi :: ToMidi i => i -> Int
class ToFreq i
toFreq :: ToFreq i => i -> Double
instance Data.Hashable.Class.Hashable a => Data.Hashable.Class.Hashable (Musicology.Pitch.Class.Pitch a)
instance Control.DeepSeq.NFData a => Control.DeepSeq.NFData (Musicology.Pitch.Class.Pitch a)
instance Data.Aeson.Types.FromJSON.FromJSON a => Data.Aeson.Types.FromJSON.FromJSON (Musicology.Pitch.Class.Pitch a)
instance Data.Aeson.Types.ToJSON.ToJSON a => Data.Aeson.Types.ToJSON.ToJSON (Musicology.Pitch.Class.Pitch a)
instance GHC.Generics.Generic (Musicology.Pitch.Class.Pitch a)
instance GHC.Classes.Ord a => GHC.Classes.Ord (Musicology.Pitch.Class.Pitch a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Musicology.Pitch.Class.Pitch a)
instance GHC.Base.Functor Musicology.Pitch.Class.Pitch

module Musicology.Pitch.Internal
parseInt :: ReadP Int
parseInt' :: ReadP Int
munchChar :: Char -> ReadP String
munchChar1 :: Char -> ReadP String


-- | This module defines pitch and interval types for enharmonic/chromatic
--   pitch, (as used in MIDI). Midi intervals are just <a>Int</a>s.
module Musicology.Pitch.Midi
type MidiInterval = Int
newtype MidiIC
MidiIC :: Int -> MidiIC
mic :: Int -> MidiIC
type MidiPitch = Pitch MidiInterval
type MidiPC = Pitch MidiIC
midip :: Int -> MidiPitch
midipc :: Int -> MidiPC
instance Data.Hashable.Class.Hashable Musicology.Pitch.Midi.MidiIC
instance GHC.Show.Show Musicology.Pitch.Midi.MidiIC
instance Control.DeepSeq.NFData Musicology.Pitch.Midi.MidiIC
instance GHC.Classes.Ord Musicology.Pitch.Midi.MidiIC
instance GHC.Classes.Eq Musicology.Pitch.Midi.MidiIC
instance Musicology.Pitch.Class.Notation Musicology.Pitch.Midi.MidiPC
instance GHC.Show.Show Musicology.Pitch.Midi.MidiPC
instance Musicology.Pitch.Class.ToMidi Musicology.Pitch.Midi.MidiPC
instance Musicology.Pitch.Class.Notation Musicology.Pitch.Midi.MidiPitch
instance GHC.Show.Show Musicology.Pitch.Midi.MidiPitch
instance Musicology.Pitch.Class.ToMidi Musicology.Pitch.Midi.MidiPitch
instance Musicology.Pitch.Class.IntervalClass Musicology.Pitch.Midi.MidiIC
instance Musicology.Pitch.Class.Notation Musicology.Pitch.Midi.MidiInterval
instance Musicology.Pitch.Class.ToMidi Musicology.Pitch.Midi.MidiInterval
instance Data.AdditiveGroup.AdditiveGroup Musicology.Pitch.Midi.MidiIC
instance Data.VectorSpace.VectorSpace Musicology.Pitch.Midi.MidiIC
instance Musicology.Pitch.Class.Interval Musicology.Pitch.Midi.MidiIC
instance Musicology.Pitch.Class.Diatonic Musicology.Pitch.Midi.MidiIC
instance Musicology.Pitch.Class.Chromatic Musicology.Pitch.Midi.MidiIC
instance Musicology.Pitch.Class.Notation Musicology.Pitch.Midi.MidiIC
instance Musicology.Pitch.Class.ToMidi Musicology.Pitch.Midi.MidiIC
instance Musicology.Pitch.Class.Interval GHC.Types.Int
instance Musicology.Pitch.Class.Diatonic GHC.Types.Int
instance Musicology.Pitch.Class.Chromatic GHC.Types.Int


-- | This module defines pitch and interval types for spelled pitch, i.e.
--   Western notation.
module Musicology.Pitch.Spelled
data SInterval
SInterval :: Int -> Int -> SInterval
[siFifths] :: SInterval -> Int
[siOctaves] :: SInterval -> Int
spelled :: Int -> Int -> SInterval
spelledDiaChrom :: Int -> Int -> SInterval
newtype SIC
SIC :: Int -> SIC
[sFifth] :: SIC -> Int
sic :: Int -> SIC
type SPitch = Pitch SInterval
type SPC = Pitch SIC
spelledp :: Int -> Int -> SPitch
spc :: Int -> SPC
class Spelled i
fifths :: Spelled i => i -> Int
octaves :: Spelled i => i -> Int
internalOctaves :: Spelled i => i -> Int
degree :: Spelled i => i -> Int
generic :: Spelled i => i -> Int
diasteps :: Spelled i => i -> Int
alteration :: Spelled i => i -> Int
letter :: Spelled i => i -> Char
second :: ImperfectInterval SInterval
third :: ImperfectInterval SInterval
fourth :: SInterval
tritone :: SInterval
fifth :: SInterval
sixth :: ImperfectInterval SInterval
seventh :: ImperfectInterval SInterval
second' :: ImperfectInterval SIC
third' :: ImperfectInterval SIC
fourth' :: SIC
tritone' :: SIC
fifth' :: SIC
sixth' :: ImperfectInterval SIC
seventh' :: ImperfectInterval SIC
newtype Accidental
Acc :: Int -> Accidental
flt :: Accidental
nat :: Accidental
shp :: Accidental
c :: Accidental -> Int -> SPitch
d :: Accidental -> Int -> SPitch
e :: Accidental -> Int -> SPitch
f :: Accidental -> Int -> SPitch
g :: Accidental -> Int -> SPitch
a :: Accidental -> Int -> SPitch
b :: Accidental -> Int -> SPitch
c' :: Accidental -> SPC
d' :: Accidental -> SPC
e' :: Accidental -> SPC
f' :: Accidental -> SPC
g' :: Accidental -> SPC
a' :: Accidental -> SPC
b' :: Accidental -> SPC
instance Data.Hashable.Class.Hashable Musicology.Pitch.Spelled.SInterval
instance Control.DeepSeq.NFData Musicology.Pitch.Spelled.SInterval
instance GHC.Show.Show Musicology.Pitch.Spelled.SInterval
instance GHC.Generics.Generic Musicology.Pitch.Spelled.SInterval
instance GHC.Classes.Eq Musicology.Pitch.Spelled.SInterval
instance Data.Hashable.Class.Hashable Musicology.Pitch.Spelled.SIC
instance Control.DeepSeq.NFData Musicology.Pitch.Spelled.SIC
instance GHC.Generics.Generic Musicology.Pitch.Spelled.SIC
instance GHC.Show.Show Musicology.Pitch.Spelled.SIC
instance GHC.Classes.Ord Musicology.Pitch.Spelled.SIC
instance GHC.Classes.Eq Musicology.Pitch.Spelled.SIC
instance GHC.Show.Show Musicology.Pitch.Spelled.SPC
instance Musicology.Pitch.Class.Notation Musicology.Pitch.Spelled.SPC
instance Musicology.Pitch.Class.ToMidi Musicology.Pitch.Spelled.SPC
instance GHC.Show.Show Musicology.Pitch.Spelled.SPitch
instance Musicology.Pitch.Class.Notation Musicology.Pitch.Spelled.SPitch
instance Musicology.Pitch.Class.ToMidi Musicology.Pitch.Spelled.SPitch
instance Musicology.Pitch.Class.Interval Musicology.Pitch.Spelled.SInterval
instance Data.Aeson.Types.ToJSON.ToJSON Musicology.Pitch.Spelled.SIC
instance Data.Aeson.Types.FromJSON.FromJSON Musicology.Pitch.Spelled.SIC
instance Musicology.Pitch.Spelled.Spelled Musicology.Pitch.Spelled.SIC
instance Data.AdditiveGroup.AdditiveGroup Musicology.Pitch.Spelled.SIC
instance Data.VectorSpace.VectorSpace Musicology.Pitch.Spelled.SIC
instance Musicology.Pitch.Class.Interval Musicology.Pitch.Spelled.SIC
instance Musicology.Pitch.Class.Diatonic Musicology.Pitch.Spelled.SIC
instance Musicology.Pitch.Class.Chromatic Musicology.Pitch.Spelled.SIC
instance Musicology.Pitch.Class.IntervalClass Musicology.Pitch.Spelled.SIC
instance Musicology.Pitch.Class.ToMidi Musicology.Pitch.Spelled.SIC
instance Musicology.Pitch.Class.Notation Musicology.Pitch.Spelled.SIC
instance Data.Aeson.Types.ToJSON.ToJSON Musicology.Pitch.Spelled.SInterval
instance Data.Aeson.Types.FromJSON.FromJSON Musicology.Pitch.Spelled.SInterval
instance Musicology.Pitch.Spelled.Spelled Musicology.Pitch.Spelled.SInterval
instance GHC.Classes.Ord Musicology.Pitch.Spelled.SInterval
instance Data.AdditiveGroup.AdditiveGroup Musicology.Pitch.Spelled.SInterval
instance Data.VectorSpace.VectorSpace Musicology.Pitch.Spelled.SInterval
instance Musicology.Pitch.Class.Diatonic Musicology.Pitch.Spelled.SInterval
instance Musicology.Pitch.Class.Chromatic Musicology.Pitch.Spelled.SInterval
instance Musicology.Pitch.Class.ToMidi Musicology.Pitch.Spelled.SInterval
instance Musicology.Pitch.Class.Notation Musicology.Pitch.Spelled.SInterval
instance (Musicology.Pitch.Spelled.Spelled i, Musicology.Pitch.Class.Interval i, Musicology.Pitch.Spelled.Spelled (Musicology.Pitch.Class.ICOf i)) => Musicology.Pitch.Spelled.Spelled (Musicology.Pitch.Class.Pitch i)


-- | This package provides useful representations and operations for
--   working with musical pitch. Follows the same API and notation formats
--   as the companion libraries:
--   
--   <ul>
--   <li><a>Pitches.jl</a> (Julia)</li>
--   <li><a>purescript-pitches</a> (Purescript)</li>
--   <li><a>rust-pitches</a> (Rust)</li>
--   <li><a>pitchtypes</a> (Python)</li>
--   </ul>
--   
--   The two main goals are:
--   
--   <ul>
--   <li>providing types and operations (such as arithmetics, printing and
--   parsing) for common types of pitches and intervals</li>
--   <li>providing a generic interface for writing code that is agnostic to
--   the specific pitch or interval types.</li>
--   </ul>
--   
--   It allows you to write generic algorithms that can then be applied to
--   pitches and intervals in different formats:
--   
--   <pre>
--   import           Data.Foldable                  ( forM_ )
--   import           Data.Maybe                     ( catMaybes )
--   import           Musicology.Pitch
--   
--   -- do something with a list of pitches
--   transposeAndAddOctave :: Interval i =&gt; [Pitch i] -&gt; i -&gt; [Pitch i]
--   transposeAndAddOctave pitches by = map (\p -&gt; p +^ by +^ octave) pitches
--   
--   main :: IO ()
--   main = do
--     -- perform the algorithm with MIDI pitches
--     putStrLn "MIDI:"
--     let midiPitches = midip &lt;$&gt; [60, 64, 67]
--     forM_ (transposeAndAddOctave midiPitches 3)
--       $ \p -&gt; putStrLn $ "- " &lt;&gt; showNotation p
--   
--     -- perform the algorithm with MIDI pitch classes
--     putStrLn "MIDI classes:"
--     let midiPitches = midipc &lt;$&gt; [0, 4, 7]
--     forM_ (transposeAndAddOctave midiPitches (mic 3))
--       $ \p -&gt; putStrLn $ "- " &lt;&gt; showNotation p
--   
--     -- perform the algorithm with spelled pitches
--     putStrLn "spelled:"
--     let spelledPitches :: [SPitch]
--         spelledPitches = catMaybes $ readNotation &lt;$&gt; ["C4", "Eb4", "G#4", "C5"]
--         Just interval  = readNotation "M3:0"
--     forM_ (transposeAndAddOctave spelledPitches interval)
--       $ \p -&gt; putStrLn $ "- " &lt;&gt; showNotation p
--   </pre>
--   
--   Output:
--   
--   <pre>
--   MIDI:
--   - p75
--   - p79
--   - p82
--   MIDI classes:
--   - ic3
--   - ic7
--   - ic10
--   spelled:
--   - E5
--   - G5
--   - B♯5
--   - E6
--   </pre>
--   
--   The fundamental idea behind this library is that the central object is
--   the <i>interval</i>. Pitches are derived from intervals by
--   interpreting them with respect to a reference point. This is much like
--   the relation between vectors (= intervals) and points (= pitches). For
--   example, the pitch <tt>E♭4</tt> can be represented as an interval
--   (e.g. a minor third, <tt>m3:0</tt>) above a reference pitch such as
--   Middle C (<tt>C4</tt>). The concept of an interval is represented by
--   the <a>Interval</a> class. Pitches are represented using the generic
--   <a>Pitch</a> type. Pitch types for concrete interval types, however,
--   may provide specialized functionality (e.g. for reading and printing)
--   as well as type synonyms (e.g. <a>SPitch</a> for <tt>Pitch
--   Snterval</tt>).
--   
--   Similar to vectors and points, intervals and pitches support a number
--   of operations such as addition and scalar multiplication, which are
--   here implemented using the <a>Interval</a> class and its superclasses
--   (e.g. <a>VectorSpace</a>).
--   
--   For the general pitch and interval interface, have a look at
--   <a>Musicology.Pitch.Class</a>. Documentation for spelled and MIDI
--   types can be found in <a>Musicology.Pitch.Spelled</a> and
--   <a>Musicology.Pitch.Midi</a>, respectively.
module Musicology.Pitch

module Musicology.MidiNumInstances
instance GHC.Num.Num (Musicology.Pitch.Class.Pitch Musicology.Pitch.Midi.MidiInterval)
instance GHC.Num.Num (Musicology.Pitch.Class.Pitch Musicology.Pitch.Midi.MidiIC)
instance GHC.Num.Num Musicology.Pitch.Midi.MidiIC
